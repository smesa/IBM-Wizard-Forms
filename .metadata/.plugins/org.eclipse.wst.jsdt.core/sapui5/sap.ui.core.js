
// ---- jQuery --------------------------------------------------------------------------

/**
 * Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.
 * @param {int} [idx] optional parameter to return the control instance at the given idx's position in the array.
 * @returns {sap.ui.core.Control[] | sap.ui.core.Control | null} depending on the given context and idx parameter an array of controls, an instance or null.
 * @public
 * 
 * @memberof jQuery
 */
jQuery.prototype.control = function(idx) { return new Array.<sap.ui.core.Control>(); };

/**
 * Sets or gets the position of the cursor in an element that supports cursor positioning
 * @param {int} iPos The cursor position to set (or no parameter to retrieve the cursor position)
 * @return {int | jQuery} The cursor position (or the jQuery collection if the position has been set)
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.cursorPos = function(iPos) { return 0; };

/**
 * Disable HTML elements selection.
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.24.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.disableSelection = function() { return null; };

/**
 * Enable HTML elements to get selected.
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.24.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.enableSelection = function() { return null; };

/**
 * Returns the first focusable domRef in a given container (the first element of the collection)
 * @return {Element} The domRef
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.firstFocusableDomRef = function() { return null; };

/**
 * Retrieve the selected text in the first element of the collection.
 * note: This feature is only supported for input element’s type of text, search, url, tel and password.
 * @return {string} The selected text.
 * @public
 * @since 1.26.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.getSelectedText = function() { return ""; };

/**
 * Returns true if the first element has a set tabindex
 * @return {boolean} If the first element has a set tabindex
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.hasTabIndex = function() { return false; };

/**
 * Returns the last focusable domRef in a given container
 * @return {Element} The last domRef
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.lastFocusableDomRef = function() { return null; };

/**
 * Returns the outer HTML of the given HTML element
 * @return {string} outer HTML
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.outerHTML = function() { return ""; };

/**
 * Gets the next parent DOM element with a given attribute and attribute value starting above the first given element
 * @param {string} sAttribute Name of the attribute
 * @param {string} sValue Value of the attribute (optional)
 * @return {Element} null or the DOM reference
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.parentByAttribute = function(sAttribute,sValue) { return null; };

/**
 * Returns a rectangle describing the current visual positioning of the first DOM object in the collection
 * (or null if no element was given)
 * @return {object} An object with left, top, width and height
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.rect = function() { return new Object(); };

/**
 * Returns whether a point described by X and Y is inside this Rectangle's boundaries
 * @param {int} iPosX
 * @param {int} iPosY
 * @return {boolean} Whether X and Y are inside this Rectangle's boundaries
 * @public
 * @since 0.18.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.rectContains = function(iPosX,iPosY) { return false; };

/**
 * @param {object} oRootControl
 * @public
 * 
 * @memberof jQuery
 */
jQuery.prototype.root = function(oRootControl) {  };

/**
 * Sets or returns the scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
 * Precondition: The element is rendered in RTL mode.
 * 
 * Reason for this method is that the major browsers use three different values for the same scroll position when in RTL mode.
 * This method hides those differences and returns/applies the same value that would be returned in LTR mode: The distance in px
 * how far the given container is scrolled away from the leftmost scroll position.
 * 
 * Returns "undefined" if no element and no iPos is given.
 * @param {int} iPos
 * @return {jQuery | int} The jQuery collection if iPos is given, otherwise the scroll position, counted from the leftmost position
 * @public
 * @since 0.20.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.scrollLeftRTL = function(iPos) { return null; };

/**
 * Returns the MIRRORED scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
 * Precondition: The element is rendered in RTL mode.
 * 
 * Reason for this method is that the major browsers return three different values for the same scroll position when in RTL mode.
 * This method hides those differences and returns the value that would be returned in LTR mode if the UI would be mirrored horizontally:
 * The distance in px how far the given container is scrolled away from the rightmost scroll position.
 * 
 * Returns "undefined" if no element is given.
 * @return {int} The scroll position, counted from the rightmost position
 * @public
 * @since 0.20.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.scrollRightRTL = function() { return 0; };

/**
 * Sets the text selection in the first element of the collection.
 * note: This feature is only supported for input element’s type of text, search, url, tel and password.
 * @param {int} iStart Start position of the selection (inclusive)
 * @param {int} iEnd End position of the selection (exclusive)
 * @return {jQuery} The jQuery collection
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.selectText = function(iStart,iEnd) { return null; };

/**
 * @param {int} iIdx
 * @public
 * 
 * @memberof jQuery
 */
jQuery.prototype.uiarea = function(iIdx) {  };


// ---- jQuery.device --------------------------------------------------------------------------


// ---- jQuery.device.is --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.device.is.toString = function() { return ""; };

// ---- jQuery.Event --------------------------------------------------------------------------

/**
 * Constructor for a jQuery.Event object.<br/>
 * @see "http://www.jquery.com" and "http://api.jquery.com/category/events/event-object/".
 * @class Check the jQuery.Event class documentation available under "http://www.jquery.com"<br/>
 * and "http://api.jquery.com/category/events/event-object/" for details.
 * @public
 * 
 */
jQuery.Event = function() {};
/**
 * Returns OffsetX of Event. In jQuery there is a bug. In IE the value is in offsetX, in FF in layerX
 * @returns {int} offsetX
 * @public
 * 
 */
jQuery.Event.prototype.getOffsetX = function() { return 0; };

/**
 * Returns OffsetY of Event. In jQuery there is a bug. in IE the value is in offsetY, in FF in layerY.
 * @returns {int} offsetY
 * @public
 * 
 */
jQuery.Event.prototype.getOffsetY = function() { return 0; };

/**
 * Returns an array of names (as strings) identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
 * @returns {String[]} Array of names identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
 * @public
 * 
 */
jQuery.Event.prototype.getPseudoTypes = function() { return new Array(); };

/**
 * Checks whether this instance of {@link jQuery.Event} is of the given <code>sType</code> pseudo type.
 * @param {string} sType The name of the pseudo type this event should be checked for.
 * @returns {boolean} <code>true</code> if this instance of jQuery.Event is of the given sType, <code>false</code> otherwise.
 * @public
 * 
 */
jQuery.Event.prototype.isPseudoType = function(sType) { return false; };


// ---- jQuery.os --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.os.toString = function() { return ""; };

// ---- jQuery.sap --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.toString = function() { return ""; };
/**
 * Adds a whitelist entry for URL valiadtion
 * @param {string} protocol The protocol of the URL
 * @param {string} host The host of the URL
 * @param {string} port The port of the URL
 * @param {string} path the path of the URL
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.addUrlWhitelist = function(protocol,host,port,path) {  };

/**
 * Calculate delta of old list and new list
 * This implements the algorithm described in "A Technique for Isolating Differences Between Files"
 * (Commun. ACM, April 1978, Volume 21, Number 4, Pages 264-268)
 * @public
 * @param {Array} aOld Old Array
 * @param {Array} aNew New Array
 * @param {function} [fnCompare] Function to compare list entries
 * @param {boolean} [bUniqueEntries] Whether entries are unique, so no duplicate entries exist
 * @return {Array} List of changes
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.arrayDiff = function(aOld,aNew,fnCompare,bUniqueEntries) { return null; };

/**
 * A simple assertion mechanism that logs a message when a given condition is not met.
 * 
 * <b>Note:</b> Calls to this method might be removed when the JavaScript code
 *              is optimized during build. Therefore, callers should not rely on any side effects
 *              of this method.
 * @param {boolean} bResult result of the checked assertion
 * @param {string} sMessage message that will be raised when the result is <code>false</code>
 * @public
 * @static
 * @SecSink {1|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.assert = function(bResult,sMessage) {  };

/**
 * Binds all events for listening with the given callback function.
 * @param {function} fnCallback Callback function
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.bindAnyEvent = function(fnCallback) {  };

/**
 * Shortcut for jQuery("#" + id) with additionally the id being escaped properly.
 * I.e.: returns the jQuery object for the DOM element with the given id
 * 
 * Use this method instead of jQuery(...) if you know the argument is exactly one id and
 * the id is not known in advance because it is in a variable (as opposed to a string
 * constant with known content).
 * @param {string} sId The id to search for and construct the jQuery object
 * @param {Element} oContext the context DOM Element
 * @return {Object} The jQuery object for the DOM element identified by the given sId
 * @public
 * @since 0.9.1
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.byId = function(sId,oContext) { return null; };

/**
 * Transforms a hyphen separated string to an camel case string. 
 * @param {string} sString Hyphen separated string
 * @return The transformed string
 * @type {string}
 * @since 1.7.0
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.camelCase = function(sString) { return ""; };

/**
 * Converts a character of the string to upper case.<br/>
 * If no pos is defined as second parameter or pos is negative or greater than sString the first character will be
 * converted into upper case. the first char position is 0.
 * @param {string} sString The string to be checked
 * @param {int} iPos the position of the character that will be uppercase
 * @return The string with the firstletter in upper case
 * @type {string}
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.charToUpperCase = function(sString,iPos) { return ""; };

/**
 * Checks a given mouseover or mouseout event whether it is
 * equivalent to a mouseenter or mousleave event regarding the given DOM reference.
 * @param {jQuery.Event} oEvent
 * @param {element} oDomRef
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.checkMouseEnterOrLeave = function(oEvent,oDomRef) {  };

/**
 * Stops the delayed call.
 * 
 * The function given when calling delayedCall is not called anymore.
 * @param {string} sDelayedCallId The id returned, when calling delayedCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.clearDelayedCall = function(sDelayedCallId) {  };

/**
 * Stops the interval call.
 * 
 * The function given when calling intervalCall is not called anymore.
 * @param {string} sIntervalCallId The id returned, when calling intervalCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.clearIntervalCall = function(sIntervalCallId) {  };

/**
 * clears the whitelist for URL valiadtion
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.clearUrlWhitelist = function() {  };

/**
 * Returns whether oDomRefChild is oDomRefContainer or is contained in oDomRefContainer.
 * 
 * This is a browser-independent version of the .contains method of Internet Explorer.
 * For compatibility reasons it returns true if oDomRefContainer and oDomRefChild are equal.
 * 
 * This method intentionally does not operate on the jQuery object, as the original jQuery.contains()
 * method also does not do so.
 * @param {Element} oDomRefContainer The container element
 * @param {Element} oDomRefChild The child element (must not be a text node, must be an element)
 * @return {boolean} 'true' if oDomRefChild is contained in oDomRefContainer or oDomRefChild is oDomRefContainer
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.containsOrEquals = function(oDomRefContainer,oDomRefChild) { return false; };

/**
 * Declares a module as existing.
 * 
 * By default, this function assumes that the module will create a JavaScript object
 * with the same name as the module. As a convenience it ensures that the parent
 * namespace for that object exists (by calling jQuery.sap.getObject).
 * If such an object creation is not desired, <code>bCreateNamespace</code> must be set to false.
 * @param {string | object}  sModuleName name of the module to be declared
 *                           or in case of an object {modName: "...", type: "..."}
 *                           where modName is the name of the module and the type
 *                           could be a specific dot separated extension e.g.
 *                           <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
 *                           loads <code>sap/ui/core/Dev.view.js</code> and
 *                           registers as <code>sap.ui.core.Dev.view</code>
 * @param {boolean} [bCreateNamespace=true] whether to create the parent namespace
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.declare = function(sModuleName,bCreateNamespace) {  };

/**
 * Calls a method after a given delay and returns an id for this timer
 * @param {int} iDelay Delay time in milliseconds
 * @param {object} oObject Object from which the method should be called
 * @param {string|object} method function pointer or name of the method
 * @param {array} [aParameters] Method parameters
 * @return {string} Id which can be used to cancel the timer with clearDelayedCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.delayedCall = function(iDelay,oObject,method,aParameters) { return ""; };

/**
 * For the given scroll position measured from the "beginning" of a container (the right edge in RTL mode)
 * this method returns the scrollLeft value as understood by the current browser in RTL mode.
 * This value is specific to the given DOM element, as the computation may involve its dimensions.
 * 
 * So when oDomRef should be scrolled 2px from the beginning, the number "2" must be given as iNormalizedScrollBegin
 * and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as
 * oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.
 * Low values make the right part of the content visible, high values the left part.
 * 
 * This method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).
 * 
 * Only use this method in RTL mode, as the behavior in LTR mode is undefined and may change!
 * @param {int} iNormalizedScrollBegin The distance from the rightmost position to which the element should be scrolled
 * @param {Element} oDomRef The DOM Element to which scrollLeft will be applied
 * @return {int} The scroll position that must be set for the DOM element
 * @public
 * @since 1.26.1
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.denormalizeScrollBeginRTL = function(iNormalizedScrollBegin,oDomRef) { return 0; };

/**
 * For the given scrollLeft value this method returns the scrollLeft value as understood by the current browser in RTL mode.
 * This value is specific to the given DOM element, as the computation may involve its dimensions.
 * 
 * So when oDomRef should be scrolled 2px from the leftmost position, the number "2" must be given as iNormalizedScrollLeft
 * and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as
 * oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.
 * 
 * This method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).
 * @param {int} iNormalizedScrollLeft The distance from the leftmost position to which the element should be scrolled
 * @param {Element} oDomRef The DOM Element to which scrollLeft will be applied
 * @return {int} The scroll position that must be set for the DOM element
 * @public
 * @since 0.20.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.denormalizeScrollLeftRTL = function(iNormalizedScrollLeft,oDomRef) { return 0; };

/**
 * Disable touch to mouse handling
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.disableTouchToMouseHandling = function() {  };

/**
 * Shortcut for document.getElementById(), including a bug fix for older IE versions.
 * @param {string} sId The id of the DOM element to return
 * @param {Window} [oWindow=window] The window (optional)
 * @return {Element} The DOMNode identified by the given sId
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.domById = function(sId,oWindow) { return null; };

/**
 * Encode the string for inclusion into CSS string literals or identifiers
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a CSS context
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeCSS = function(sString) { return ""; };

/**
 * Encode the string for inclusion into HTML content/attribute
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for HTML contexts
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeHTML = function(sString) { return ""; };

/**
 * Encode the string for inclusion into a JS string literal
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a JavaScript contexts
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeJS = function(sString) { return ""; };

/**
 * Encode the string for inclusion into an URL parameter
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a URL context
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeURL = function(sString) { return ""; };

/**
 * Encode a map of parameters into a combined URL parameter string
 * @param {object} mParams The map of parameters to encode
 * @return The URL encoded parameters
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a CSS context
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeURLParameters = function(mParams) { return ""; };

/**
 * Encode the string for inclusion into XML content/attribute
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for XML contexts
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeXML = function(sString) { return ""; };

/**
 * Checks whether a given sString ends with sEndString
 * respecting the case of the strings.
 * @param {string} sString The string to be checked
 * @param {string} sEndString The end string to be searched
 * @return True if sString ends with sEndString
 * @type {boolean}
 * @see jQuery.sap.endsWithIgnoreCase
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.endsWith = function(sString,sEndString) { return false; };

/**
 * Checks whether a given sString ends with sEndString
 * ignoring the case of the strings.
 * @param {string} sString the string to be checked
 * @param {string} sEndString the end string to be searched
 * @return true if sString ends with sEndString
 * @type {boolean}
 * @see jQuery.sap.endsWith
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.endsWithIgnoreCase = function(sString,sEndString) { return false; };

/**
 * Compares the two given values for equality, especially takes care not to compare
 * arrays and objects by reference, but compares their content.
 * Note: function does not work with comparing XML objects
 * @param {any} a A value of any type
 * @param {any} b A value of any type
 * @param {int} [maxDepth=10] Maximum recursion depth
 * @param {boolean} [contains] Whether all existing properties in a are equal as in b
 * @return {boolean} Whether a and b are equal
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.equal = function(a,b,maxDepth,contains) { return false; };

/**
 * Encode the string for inclusion into HTML content/attribute.
 * Old name "escapeHTML" kept for backward compatibility
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @deprecated Has been renamed, use {@link jQuery.sap.encodeHTML} instead.
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.escapeHTML = function(sString) { return ""; };

/**
 * Encode the string for inclusion into a JS string literal.
 * Old name "escapeJS" kept for backward compatibility
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @deprecated Since 1.3.0. Has been renamed, use {@link jQuery.sap.encodeJS} instead.
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.escapeJS = function(sString) { return ""; };

/**
 * This function escapes the reserved letters in Regular Expression
 * @param {string} sString string to escape
 * @return The escaped string
 * @type {string}
 * @since 1.9.3
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.escapeRegExp = function(sString) { return ""; };

/**
 * Returns a new constructor function that creates objects with
 * the given prototype.
 * @param {object} oPrototype
 * @return {function} the newly created constructor function
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.factory = function(oPrototype) { return function() {}; };

/**
 * Calls focus() on the given DOM element, but catches and ignores any errors that occur when doing so.
 * (i.e. IE8 throws an error when the DOM element is invisible or disabled)
 * @param {Element} oDomRef The DOM element to focus (or null - in this case the method does nothing)
 * @return {boolean} Whether the focus() command was executed without an error
 * @public
 * @since 1.1.2
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.focus = function(oDomRef) { return false; };

/**
 * Creates a string from a pattern by replacing placeholders with concrete values.
 * 
 * The syntax of the pattern is inspired by (but not fully equivalent to) the 
 * java.util.MessageFormat.
 * 
 * Placeholders have the form <code>{ integer }</code>, where any occurrence of 
 * <code>{0}</code> is replaced by the value with index 0 in <code>aValues</code>,
 * <code>{1}</code> y the value with index 1 in <code>aValues</code> etc.
 * 
 * To avoid interpretation of curly braces as placeholders, any non-placeholder fragment 
 * of the pattern can be enclosed in single quotes. The surrounding single quotes will be 
 * omitted from the result. Single quotes that are not meant to escape a fragment and 
 * that should appear in the result, need to be doubled. In the result, only a single 
 * single quote will occur.
 * 
 * Example Pattern Strings:
 * <pre>
 *   jQuery.sap.formatMessage("Say {0}", ["Hello"]) -> "Say Hello"  // normal use case
 *   jQuery.sap.formatMessage("Say '{0}'", ["Hello"]) -> "Say {0}"  // escaped placeholder
 *   jQuery.sap.formatMessage("Say ''{0}''", ["Hello"]) -> "Say 'Hello'" // doubled single quote 
 *   jQuery.sap.formatMessage("Say '{0}'''", ["Hello"]) -> "Say {0}'" // doubled single quote in quoted fragment
 * </pre>
 * 
 * In contrast to java.util.MessageFormat, format types or format styles are not supported. 
 * Everything after the argument index and up to the first closing curly brace is ignored.
 * Nested placeholders (as supported by java.lang.MessageFormat for the format type choice)
 * are not ignored but reported as a parse error. 
 * 
 * This method throws an Error when the pattern syntax is not fulfilled (e.g. unbalanced curly 
 * braces, nested placeholders or a non-numerical argument index).
 * 
 * This method can also be used as a formatter within a binding. The first part of a composite binding 
 * will be used as pattern, the following parts as aValues. If there is only one value and this
 * value is an array it will be handled like the default described above.
 * @param {string} sPattern A pattern string in the described syntax 
 * @param {any[]} [aValues=[]] The values to be used instead of the placeholders.
 * @return {string} The formatted result string 
 * @since 1.12.5
 * @SecPassthrough {*|return}
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.formatMessage = function(sPattern,aValues) { return ""; };

/**
 * Returns the names of all declared modules.
 * @return {string[]} the names of all declared modules
 * @see jQuery.sap.isDeclared
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getAllDeclaredModules = function() { return new Array(); };

/**
 * Constructs an URL to load the module with the given name and file type (suffix).
 * 
 * Searches the longest prefix of the given module name for which a registration
 * exists (see {@link jQuery.sap.registerModulePath}) and replaces that prefix
 * by the registered URL prefix.
 * 
 * The remainder of the module name is appended to the URL, replacing any dot with a slash.
 * 
 * Finally, the given suffix (typically a file name extension) is added (unconverted).
 * 
 * The returned name (without the suffix) doesn't end with a slash.
 * @param {string} sModuleName module name to detemrine the path for
 * @param {string} sSuffix suffix to be added to the resulting path
 * @return {string} calculated path (URL) to the given module
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getModulePath = function(sModuleName,sSuffix) { return ""; };

/**
 * Returns a JavaScript object which is identified by a sequence of names.
 * 
 * A call to <code>getObject("a.b.C")</code> has essentially the same effect
 * as accessing <code>window.a.b.C</code> but with the difference that missing
 * intermediate objects (a or b in the example above) don't lead to an exception.
 * 
 * When the addressed object exists, it is simply returned. If it doesn't exists,
 * the behavior depends on the value of the second, optional parameter
 * <code>iNoCreates</code> (assuming 'n' to be the number of names in the name sequence):
 * <ul>
 * <li>NaN: if iNoCreates is not a number and the addressed object doesn't exist,
 *          then <code>getObject()</code> returns <code>undefined</code>.
 * <li>0 &lt; iNoCreates &lt; n: any non-existing intermediate object is created, except
 *          the <i>last</i> <code>iNoCreates</code> ones.
 * </ul>
 * 
 * Example:
 * <pre>
 *   getObject()            -- returns the context object (either param or window)
 *   getObject("a.b.C")     -- will only try to get a.b.C and return undefined if not found.
 *   getObject("a.b.C", 0)  -- will create a, b, and C in that order if they don't exists
 *   getObject("a.b.c", 1)  -- will create a and b, but not C.
 * </pre>
 * 
 * When a <code>oContext</code> is given, the search starts in that object.
 * Otherwise it starts in the <code>window</code> object that this plugin
 * has been created in.
 * 
 * Note: Although this method internally uses <code>object["key"]</code> to address object
 *       properties, it does not support all possible characters in a name.
 *       Especially the dot ('.') is not supported in the individual name segments,
 *       as it is always interpreted as a name separator.
 * @param {string} sName  a dot separated sequence of names that identify the required object
 * @param {int}    [iNoCreates=NaN] number of objects (from the right) that should not be created
 * @param {object} [oContext=window] the context to execute the search in
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getObject = function(sName,iNoCreates,oContext) {  };

/**
 * Returns a new function that returns the given <code>oValue</code> (using its closure).
 * 
 * Avoids the need for a dedicated member for the value.
 * 
 * As closures don't come for free, this function should only be used when polluting
 * the enclosing object is an absolute "must-not" (as it is the case in public base classes).
 * @param {object} oValue
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getter = function(oValue) {  };

/**
 * Creates and returns a new instance of {@link jQuery.sap.util.UriParameters}.
 * 
 * Example for reading a single URI parameter (or the value of the first
 * occurrence of the URI parameter):
 * <pre>
 * 	var sValue = jQuery.sap.getUriParameters().get("myUriParam");
 * </pre>
 * 
 * Example for reading the values of the first of the URI parameter
 * (with multiple occurrences):
 * <pre>
 * 	var aValues = jQuery.sap.getUriParameters().get("myUriParam", true);
 * 	for(i in aValues){
 * 	var sValue = aValues[i];
 * 	}
 * </pre>
 * @public
 * @param {string} sUri Uri to determine the parameters for
 * @return {jQuery.sap.util.UriParameters} A new URI parameters instance
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getUriParameters = function(sUri) { return new jQuery.sap.util.UriParameters(); };

/**
 * Gets the whitelist for URL valiadtion
 * @return {string[]} whitelist
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getUrlWhitelist = function() { return new Array(); };

/**
 * Executes an 'eval' for its arguments in the global context (without closure variables).
 * 
 * This is a synchronous replacement for <code>jQuery.globalEval</code> which in some
 * browsers (e.g. FireFox) behaves asynchronously.
 * @type void
 * @public
 * @static
 * @SecSink {0|XSS} Parameter is evaluated
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.globalEval = function() { return null; };

/**
 * Transforms a camel case string into a hyphen separated string.
 * @param {string} sString camel case string
 * @return The transformed string
 * @type {string}
 * @since 1.15.0
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.hyphen = function(sString) { return ""; };

/**
 * Includes the script (via &lt;script&gt;-tag) into the head for the
 * specified <code>sUrl</code> and optional <code>sId</code>.
 * <br>
 * <i>In case of IE8 only the load callback will work ignoring in case of success and error.</i>
 * @param {string}
 *            sUrl the URL of the script to load
 * @param {string}
 *            [sId] id that should be used for the script include tag
 * @param {function}
 *            [fnLoadCallback] callback function to get notified once the script has been loaded
 * @param {function}
 *            [fnErrorCallback] callback function to get notified once the script loading failed (not supported by IE8)
 * @public
 * @static
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.includeScript = function(sUrl,sId,fnLoadCallback,fnErrorCallback) {  };

/**
 * Includes the specified stylesheet via a &lt;link&gt;-tag in the head of the current document. If there is call to
 * <code>includeStylesheet</code> providing the sId of an already included stylesheet, the existing element will be
 * replaced.
 * @param {string}
 *          sUrl the URL of the script to load
 * @param {string}
 *          [sId] id that should be used for the script include tag
 * @param {function}
 *          [fnLoadCallback] callback function to get notified once the link has been loaded
 * @param {function}
 *          [fnErrorCallback] callback function to get notified once the link loading failed.
 *          In case of usage in IE the error callback will also be executed if an empty stylesheet
 *          is loaded. This is the only option how to determine in IE if the load was successful
 *          or not since the native onerror callback for link elements doesn't work in IE. The IE 
 *          always calls the onload callback of the link element.
 * @public
 * @static
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.includeStyleSheet = function(sUrl,sId,fnLoadCallback,fnErrorCallback) {  };

/**
 * Does some basic modifications to the HTML page that make it more suitable for mobile apps.
 * Only the first call to this method is executed, subsequent calls are ignored. Note that this method is also called by the constructor of toplevel controls like sap.m.App, sap.m.SplitApp and sap.m.Shell.
 * Exception: if no homeIcon was set, subsequent calls have the chance to set it.
 * 
 * The "options" parameter configures what exactly should be done.
 * 
 * It can have the following properties:
 * <ul>
 * <li>viewport: whether to set the viewport in a way that disables zooming (default: true)</li>
 * <li>statusBar: the iOS status bar color, "default", "black" or "black-translucent" (default: "default")</li>
 * <li>hideBrowser: whether the browser UI should be hidden as far as possible to make the app feel more native (default: true)</li>
 * <li>preventScroll: whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole window is moved (default: true)</li>
 * <li>preventPhoneNumberDetection: whether Safari Mobile should be prevented from transforming any numbers that look like phone numbers into clickable links; this should be left as "true", otherwise it might break controls because Safari actually changes the DOM. This only affects all page content which is created after initMobile is called.</li>
 * <li>rootId: the ID of the root element that should be made fullscreen; only used when hideBrowser is set (default: the document.body)</li>
 * <li>useFullScreenHeight: a boolean that defines whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height (default: true)</li>
 * <li>homeIcon: deprecated since 1.12, use jQuery.sap.setIcons instead.
 * </ul>
 * @param {object}  [options] configures what exactly should be done
 * @param {boolean} [options.viewport=true] whether to set the viewport in a way that disables zooming
 * @param {string}  [options.statusBar='default'] the iOS status bar color, "default", "black" or "black-translucent"
 * @param {boolean} [options.hideBrowser=true] whether the browser UI should be hidden as far as possible to make the app feel more native
 * @param {boolean} [options.preventScroll=true] whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole window is moved
 * @param {boolean} [options.preventPhoneNumberDetection=true] whether Safari mobile should be prevented from transforming any numbers that look like phone numbers into clickable links
 * @param {string}  [options.rootId] the ID of the root element that should be made fullscreen; only used when hideBrowser is set. If not set, the body is used
 * @param {boolean} [options.useFullScreenHeight=true] whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height
 * @param {string}  [options.homeIcon=undefined] deprecated since 1.12, use jQuery.sap.setIcons instead.
 * @param {boolean} [options.homeIconPrecomposed=false] deprecated since 1.12, use jQuery.sap.setIcons instead.
 * @param {boolean} [options.mobileWebAppCapable=true] whether the Application will be loaded in full screen mode after added to home screen on mobile devices. The default value for this property only enables the full screen mode when runs on iOS device.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.initMobile = function(options) {  };

/**
 * Calls a method after a given interval and returns an id for this interval.
 * @param {int} iInterval Interval time in milliseconds
 * @param {object} oObject Object from which the method should be called
 * @param {string|object} method function pointer or name of the method
 * @param {array} [aParameters] Method parameters
 * @return {string} Id which can be used to cancel the interval with clearIntervalCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.intervalCall = function(iInterval,oObject,method,aParameters) { return ""; };

/**
 * Check whether a given module has been loaded / declared already.
 * 
 * Returns true as soon as a module has been required the first time, even when
 * loading/executing it has not finished yet. So the main assertion of a
 * return value of <code>true</code> is that the necessary actions have been taken
 * to make the module available in the near future. It does not mean, that
 * the content of the module is already available!
 * 
 * This fuzzy behavior is necessary to avoid multiple requests for the same module.
 * As a consequence of the assertion above, a <i>preloaded</i> module does not
 * count as <i>declared</i>. For preloaded modules, an explicit call to
 * <code>jQuery.sap.require</code> is necessary to make them available.
 * 
 * If a caller wants to know whether a module needs to be loaded from the server,
 * it can set <code>bIncludePreloaded</code> to true. Then, preloaded modules will
 * be reported as 'declared' as well by this method.
 * @param {string} sModuleName name of the module to be checked
 * @param {boolean} [bIncludePreloaded=false] whether preloaded modules should be reported as declared.
 * @return {boolean} whether the module has been declared already
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.isDeclared = function(sModuleName,bIncludePreloaded) { return false; };

/**
 * Returns a new object which has the given oPrototype as its prototype.
 * 
 * If several objects with the same prototype are to be created,
 * {@link jQuery.sap.factory} should be used instead.
 * @param {object} oPrototype
 * @return {object} new object
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.newObject = function(oPrototype) { return new Object(); };

/**
 * Returns the window reference for a DomRef
 * @param {Element} oDomRef The DOM reference
 * @return {Window} Window reference
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.ownerWindow = function(oDomRef) { return null; };

/**
 * Pads a string on the left side until is has the given length.<br/>
 * @param {string} sString The string to be padded
 * @param {string} sPadChar The char to use for the padding
 * @param {int} iLength the target length of the string
 * @return The padded string
 * @type {string}
 * @public
 * @SecPassthrough {0 1|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.padLeft = function(sString,sPadChar,iLength) { return ""; };

/**
 * Pads a string on the right side until is has the given length.<br/>
 * @param {string} sString The string to be padded
 * @param {string} sPadChar The char to use for the padding
 * @param {int} iLength the target length of the string
 * @return The padded string
 * @type {string}
 * @public
 * @SecPassthrough {0 1|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.padRight = function(sString,sPadChar,iLength) { return ""; };

/**
 * Parses the specified XML formatted string text using native parsing
 * function of the browser and returns a valid XML document. If an error
 * occurred during parsing a parse error object is returned as property (parseError) of the
 * returned XML document object. The parse error object has the following error
 * information parameters: errorCode, url, reason, srcText, line, linepos, filepos
 * @param {string}
 *            sXMLText the XML data as string
 * @return {object} the parsed XML document with a parseError property as described in
 *         getParseError. An error occurred if the errorCode property of the parseError is != 0.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.parseXML = function(sXMLText) { return new Object(); };

/**
 * Creates and returns a new instance of {@link jQuery.sap.util.Properties}.
 * 
 * If option 'url' is passed, immediately a load request for the given target is triggered.
 * A property file that is loaded can contain comments with a leading ! or #.
 * The loaded property list does not contain any comments.
 * 
 * <b>Example for loading a property file:</b>
 * <pre>
 *  jQuery.sap.properties({url : "../myProperty.properties"});
 * </pre>
 * 
 * <b>Example for creating an empty properties instance:</b>
 * <pre>
 *  jQuery.sap.properties();
 * </pre>
 * 
 * <b>Examples for getting and setting properties:</b>
 * <pre>
 * 	var oProperties = jQuery.sap.properties();
 * 	oProperties.setProperty("KEY_1","Test Key");
 * 	var sValue1 = oProperties.getProperty("KEY_1");
 * 	var sValue2 = oProperties.getProperty("KEY_2","Default");
 * </pre>
 * @public
 * @param {object} [mParams] Parameters used to initialize the property list
 * @param {string} [mParams.url] The URL to the .properties file which should be loaded.
 * @param {boolean} [mParams.async] Whether the .properties file which should be loaded asynchronously (Default: <code>false</code>)
 * @param {object} [mParams.headers] A map of additional header key/value pairs to send along with the request (see headers option of jQuery.ajax). 
 * @return {jQuery.sap.util.Properties|Promise} A new property list instance (synchronous case). In case of asynchronous loading an ECMA Script 6 Promise is returned.
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.properties = function(mParams) { return new jQuery.sap.util.Properties(); };

/**
 * Registers an URL prefix for a module name prefix.
 * 
 * Before a module is loaded, the longest registered prefix of its module name
 * is searched for and the associated URL prefix is used as a prefix for the request URL.
 * The remainder of the module name is attached to the request URL by replacing
 * dots ('.') with slashes ('/').
 * 
 * The registration and search operates on full name segments only. So when a prefix
 * 
 * 'sap.com'  ->  'http://www.sap.com/ui5/resources/'
 * 
 * is registered, then it will match the name
 * 
 * 'sap.com.Button'
 * 
 * but not
 * 
 * 'sap.commons.Button'
 * 
 * Note that the empty prefix ('') will always match and thus serves as a fallback for
 * any search.
 * @param {string} sModuleName module name to register a path for
 * @param {string} sUrlPrefix path to register
 * @public
 * @static
 * @SecSink {1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.registerModulePath = function(sModuleName,sUrlPrefix) {  };

/**
 * Registers an URL prefix for a resource name prefix.
 * 
 * Before a resource is loaded, the longest registered prefix of its module name
 * is searched for and the associated URL prefix is used as a prefix for the request URL.
 * The remainder of the resource name is attached to the request URL 1:1.
 * 
 * The registration and search operates on full name segments only. So when a prefix
 * 
 * 'sap/com'  ->  'http://www.sap.com/ui5/resources/'
 * 
 * is registered, then it will match the name
 * 
 * 'sap/com/Button'
 * 
 * but not
 * 
 * 'sap/commons/Button'
 * 
 * Note that the empty prefix ('') will always match and thus serves as a fallback for
 * any search.
 * @param {string} sResourceNamePrefix
 * @param {string} sUrlPrefix
 * @public
 * @static
 * @SecSink {1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.registerResourcePath = function(sResourceNamePrefix,sUrlPrefix) {  };

/**
 * Removes a whitelist entry for URL valiadtion
 * @param {int} iIndex index of entry
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.removeUrlWhitelist = function(iIndex) {  };

/**
 * Ensures that the given module is loaded and executed before execution of the
 * current script continues.
 * 
 * By issuing a call to this method, the caller declares a dependency to the listed modules.
 * 
 * Any required and not yet loaded script will be loaded and execute synchronously.
 * Already loaded modules will be skipped.
 * @param {string... | object}  vModuleName one or more names of modules to be loaded
 *                              or in case of an object {modName: "...", type: "..."}
 *                              where modName is the name of the module and the type
 *                              could be a specific dot separated extension e.g.
 *                              <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
 *                              loads <code>sap/ui/core/Dev.view.js</code> and
 *                              registers as <code>sap.ui.core.Dev.view</code>
 * @public
 * @static
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.require = function() {  };

/**
 * Creates and returns a new instance of {@link jQuery.sap.util.ResourceBundle}
 * using the given URL and locale to determine what to load.
 * @public
 * @param {object} [mParams] Parameters used to initialize the resource bundle
 * @param {string} [mParams.url=''] The URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [mParams.locale='en'] Optional string of the language and an optional country code separated by underscore (e.g. "en_GB" or "fr")
 * @param {boolean} [mParams.includeInfo=false] Optional boolean whether to include origin information into the returned property values
 * @param {boolean} [mParams.async=false] Optional boolean whether first bundle should be loaded asynchronously. Note: fallback bundles will still be loaded synchronously afterwards if needed.
 * @return {jQuery.sap.util.ResourceBundle|Promise} A new resource bundle instance or a ECMA Script 6 Promise (in asynchronous case)
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.resources = function(mParams) { return new jQuery.sap.util.ResourceBundle(); };

/**
 * Returns the size (width of the vertical / height of the horizontal) native browser scrollbars.
 * 
 * This function must only be used when the DOM is ready.
 * @param {string} [sClasses=null] the CSS class that should be added to the test element.
 * @param {boolean} [bForce=false] force recalculation of size (e.g. when CSS was changed). When no classes are passed all calculated sizes are reset.
 * @return {object} JSON object with properties <code>width</code> and <code>height</code> (the values are of type number and are pixels).
 * @public
 * @since 1.4.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.scrollbarSize = function(sClasses,bForce) { return new Object(); };

/**
 * Serializes the specified XML document into a string representation.
 * @param {string}
 *            oXMLDocument the XML document object to be serialized as string
 * @return {object} the serialized XML string
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.serializeXML = function(oXMLDocument) { return new Object(); };

/**
 * Sets the bookmark icon for desktop browsers and the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Only call this method once and call it early when the page is loading: browsers behave differently when the favicon is modified while the page is alive.
 * Some update the displayed icon inside the browser but use an old icon for bookmarks.
 * When a favicon is given, any other existing favicon in the document will be removed.
 * When at least one home icon is given, all existing home icons will be removed and new home icon tags for all four resolutions will be created.
 * 
 * The home icons must be in PNG format and given in different sizes for iPad/iPhone with and without retina display.
 * The favicon is used in the browser and for desktop shortcuts and should optimally be in ICO format:
 * PNG does not seem to be supported by Internet Explorer and ICO files can contain different image sizes for different usage locations. E.g. a 16x16px version
 * is used inside browsers.
 * 
 * All icons are given in an an object holding icon URLs and other settings. The properties of this object are:
 * <ul>
 * <li>phone: a 57x57 pixel version for non-retina iPhones</li>
 * <li>tablet: a 72x72 pixel version for non-retina iPads</li>
 * <li>phone@2: a 114x114 pixel version for retina iPhones</li>
 * <li>tablet@2: a 144x144 pixel version for retina iPads</li>
 * <li>precomposed: whether the home icons already have some glare effect (otherwise iOS will add it) (default: false)</li>
 * <li>favicon: the ICO file to be used inside the browser and for desktop shortcuts</li>
 * </ul>
 * 
 * One example is:
 * <pre>
 * {
 *    'phone':'phone-icon_57x57.png',
 *    'phone@2':'phone-retina_117x117.png',
 *    'tablet':'tablet-icon_72x72.png',
 *    'tablet@2':'tablet-retina_144x144.png',
 *    'precomposed':true,
 *    'favicon':'desktop.ico'
 * }
 * </pre>
 * If one of the sizes is not given, the largest available alternative image will be used instead for this size.
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by using icons with glare effect, so the "precomposed" property can be set to "true". Some Android devices may also use the favicon for bookmarks instead of the home icons.</li>
 * @param {object} oIcons
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.setIcons = function(oIcons) {  };

/**
 * Sets the "apple-mobile-web-app-capable" and "mobile-web-app-capable" meta information which defines whether the application is loaded
 * in full screen mode (browser address bar and toolbar are hidden) after the user does "add to home screen" on mobile devices. Currently
 * this meta tag is only supported by iOS Safari and mobile Chrome from version 31.
 * 
 * If the application opens new tabs because of attachments, url and so on, setting this to false will let the user be able to go from the
 * new tab back to the application tab after the application is added to home screen.
 * 
 * Note: this function only has effect when the application runs on iOS Safari and mobile Chrome from version 31.
 * @param {boolean} bValue whether the Application will be loaded in full screen mode after added to home screen from iOS Safari or mobile Chrome from version 31.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.setMobileWebAppCapable = function(bValue) {  };

/**
 * Sets an object property to a given value, where the property is
 * identified by a sequence of names (path).
 * 
 * When a <code>oContext</code> is given, the path starts in that object.
 * Otherwise it starts in the <code>window</code> object that this plugin
 * has been created for.
 * 
 * Note: Although this method internally uses <code>object["key"]</code> to address object
 *       properties, it does not support all possible characters in a name.
 *       Especially the dot ('.') is not supported in the individual name segments,
 *       as it is always interpreted as a name separator.
 * @param {string} sName  a dot separated sequence of names that identify the property
 * @param {any}    vValue value to be set, can have any type
 * @param {object} [oContext=window] the context to execute the search in
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.setObject = function(sName,vValue,oContext) {  };

/**
 * Convenience wrapper around <code>jQuery.ajax()</code> that avoids the need for callback functions when
 * synchronous calls are made. If the setting <code>complexResult</code> is true (default), then the return value
 * is an object with the following properties
 * <ul>
 * <li><code>success</code> boolean whether the call succeeded or not
 * <li><code>data</code> any the data returned by the call. For dataType 'text' this is a string,
 *                       for JSON it is an object, for XML it is a document. When the call failed, then data is not defined
 * <li><code>status</code> string a textual status ('success,', 'error', 'timeout',...)
 * <li><code>statusCode</code> string the HTTP status code of the request
 * <li><code>error</code> Error an error object (exception) in case an error occurred
 * </ul>
 * 
 * When <code>complexResult</code> is false, then in the case of success, only 'data' is returned, in case of an error the
 * 'fallback' setting is returned (defaults to undefined).
 * 
 * Note that async=false is always enforced by this method.
 * @param {string} oOrigSettings the ajax() settings
 * @return result, see above
 * @public
 * @since 0.9.0
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.sjax = function(oOrigSettings) {  };

/**
 * Checks whether a given sString starts with sStartString
 * respecting the case of the strings.
 * @param {string} sString The string to be checked
 * @param {string} sStartString The start string to be searched
 * @return True if sString ends with sEndString
 * @type {boolean}
 * @see jQuery.sap.startsWithIgnoreCase
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.startsWith = function(sString,sStartString) { return false; };

/**
 * Checks whether a given sString starts with sStartString
 * ignoring the case of the strings.
 * @param {string} sString The string to be checked
 * @param {string} sStartString The start string to be searched
 * @return True if sString ends with sEndString
 * @type {boolean}
 * @see jQuery.sap.startsWith
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.startsWithIgnoreCase = function(sString,sStartString) { return false; };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforeces the Http method GET and defaults the
 * data type of the result to 'text'.
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {string} [sDataType='text'] the type of data expected from the server, default is "text"
 * @return result @see jQuery.sap.sjax
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * @SecSource {return} Returned value is under control of an external resource
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncGet = function(sUrl,data,sDataType) {  };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'json'.
 * If a fallback value is given, the function simply returns the response as an object or - if some error occurred -
 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
 * 
 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
 * or they can omit the fallback value (providing only two parameters to syncGetJSON()).
 * They then receive the same complex result object as for the sjax() call.
 * 
 * Note that providing "undefined" or "null" as a fallback is different from omitting the fallback (complex result).
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {object} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
 * @return result @see jQuery.sap.sjax
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncGetJSON = function(sUrl,data,fallback) {  };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'text'.
 * If a fallback value is given, the function simply returns the response as a text or - if some error occurred -
 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
 * 
 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
 * or they can omit the fallback value (providing only two parameters to syncGetText()).
 * They then receive the same complex result object as for the sjax() call.
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {string} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
 * @return  result @see jQuery.sap.sjax
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncGetText = function(sUrl,data,fallback) {  };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method POST and defaults the
 * data type of the result to 'text'.
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {string} [sDataType='text'] the type of data expected from the server, default is "text"
 * @return result @see jQuery.sap.sjax
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * @SecSource {return} Returned value is under control of an external resource
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncPost = function(sUrl,data,sDataType) {  };

/**
 * Search ancestors of the given source DOM element for the specified CSS class name.
 * If the class name is found, set it to the root DOM element of the target control.
 * If the class name is not found, it is also removed from the target DOM element.
 * @param {string} sStyleClass CSS class name
 * @param {jQuery|Control|string} vSource jQuery object, control or an id of the source element.
 * @param {jQuery|Control} vDestination target jQuery object or a control.
 * @return {jQuery|Element} Target element
 * @public
 * @since 1.22
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncStyleClass = function(sStyleClass,vSource,vDestination) { return null; };

/**
 * Creates and returns a pseudo-unique id.
 * 
 * No means for detection of overlap with already present or future UIDs.
 * @return {string} A pseudo-unique id.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.uid = function() { return ""; };

/**
 * Unbinds all events for listening with the given callback function.
 * @param {function} fnCallback Callback function
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.unbindAnyEvent = function(fnCallback) {  };

/**
 * Sorts the given array in-place and removes any duplicates (identified by "===").
 * 
 * Use <code>jQuery.unique()</code> for arrays of DOMElements.
 * @param {Array} a An Array of any type
 * @return {Array} Same array as given (for chaining)
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.unique = function(a) { return null; };

/**
 * Validates an URL. Check if it's not a script or other security issue.
 * @param {string} sUrl
 * @return true if valid, false if not valid
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.validateUrl = function(sUrl) {  };


// ---- jQuery.sap.act --------------------------------------------------------------------------

/**
 * Registers the given handler to the activity event, which is fired when an activity was detected after a certain period of inactivity.
 * 
 * The Event is not fired for Internet Explorer 8.
 * @param {Function} fnFunction The function to call, when an activity event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @protected
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.attachActivate = function(fnFunction,oListener) {  };

/**
 * Deregisters a previously registered handler from the activity event.
 * @param {Function} fnFunction The function to call, when an activity event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @protected
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.detachActivate = function(fnFunction,oListener) {  };

/**
 * Checks whether recently an activity was detected.
 * 
 * Not supported for Internet Explorer 8.
 * @return true if recently an activity was detected, false otherwise
 * @protected
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.isActive = function() {  };

/**
 * Reports an activity.
 * @public
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.refresh = function() {  };


// ---- jQuery.sap.history --------------------------------------------------------------------------

/**
 * jQuery.sap.history is deprecated. Please use {@link sap.ui.core.routing.Route} instead.
 * 
 * Initialize the history handling and set the routes and default handler.
 * This should be only called once with the mSettings set in the right format. If the mSettings is not an object,
 * you have another chance to call this function again to initialize the history handling. But once the mSettings
 * is set with an object, you can only call the addRoute and setDefaultHandler to set the data.
 * @deprecated since 1.19.1. Please use {@link sap.ui.core.routing.Route} instead.
 * @param {object} mSettings The map that contains data in format:
 * <pre>
 * {
 * 	routes: [{
 * 		path: string //identifier for one kind of hash
 * 		handler: function	//function what will be called when the changed hash is matched against the path.
 * 							//first parameter: the json data passed in when calling the addHistory
 * 							//second parameter: the type of the navigation {@link jQuery.sap.history.NavType}
 * 		}],
 * 		defaultHandler: function	//this function will be called when empty hash is matched
 * 									//first parameter: the type of the navigation {@link jQuery.sap.history.NavType}
 * }
 * </pre>
 * @public
 * @class Enables the back and forward buttons in browser to navigate back or forth through the browser history stack.<br/><br/>
 * 
 * It also supports adding virtual history which used only to mark some intermediate state in order to navigate back to the previous state. 
 * And this state will be skipped from the browser history stack immediately after a new history state is added to the history stack after this state <br/><br/>
 * 
 * By providing the hash saved from the return value of calling jQuery.sap.history.addHistory, jQuery.sap.history.backToHash will navigate back directly to the
 * history state with the same hash. <br/><br/>
 * 
 * Please use jQuery.sap.history.back() to go one step back in the history stack instead of using window.history.back(), because it handles the empty history stack
 * situation and will call the defaultHandler for this case. <br/><br/>
 * 
 * 
 * Example for the usage of history handling:
 * <pre>
 * 	//Initialization
 * 	jQuery.sap.history({
 * 		routes: [], //please refer to the jQuery.sap.history function comment for the format. 
 * 		defaultHandler: function(){
 * 			//code here
 * 		}
 * 	});
 *   
 * 	//add history
 * 	var hash = jQuery.sap.history.addHistory("IDENTIFIER", jsonData);
 *   
 * 	//add virtual history
 * 	jQuery.sap.history.addVirtualHistory();
 *   
 * 	//back to hash
 * 	jQuery.sap.history.backToHash(hash);
 *   
 * 	//back one step along the history stack
 * 	jQuery.sap.history.back();
 * </pre>
 * 
 */
jQuery.sap.history = function(mSettings) {};
/**
 * This function adds a history record. It will not trigger the related handler of the routes, the changes have to be done by the
 * developer. Normally, a history record should be added when changes are done already. 
 * @param {string} sIdf The identifier defined in the routes which will be matched in order to call the corresponding handler
 * @param {object} oStateData The object passed to the corresponding handler when the identifier is matched with the url hash
 * @param {boolean} bBookmarkable Default value is set to true. If this is set to false, the default handler will be called when this identifier and data are matched
 * @param {boolean} [bVirtual] This states if the history is a virtual history that should be skipped when going forward or backward in the history stack.
 * @returns {string} sHash The complete hash string which contains the identifier, stringified data, optional uid, and bookmarkable digit. This hash can be passed into 
 *     the backToHash function when navigating back to this state is intended.
 * @public
 * 
 */
jQuery.sap.history.prototype.addHistory = function(sIdf,oStateData,bBookmarkable,bVirtual) { return ""; };

/**
 * Adds a route to the history handling.
 * @param {string} sIdf The identifier that is matched with the hash in the url in order to call the corresponding handler.
 * @param {function} fn The function that will be called when the identifier is matched with the hash.
 * @param {object} [oThis] If oThis is provided, the fn function's this keyword will be bound to this object.
 * @returns {object} It returns the this object to enable chaining.
 * @public
 * 
 */
jQuery.sap.history.prototype.addRoute = function(sIdf,fn,oThis) { return new Object(); };

/**
 * This function adds a virtual history record based on the current hash. A virtual record is only for marking the current state of the application, 
 * and when the back button clicked it will return to the previous state. It is used when the marked state shouldn't be seen by the user when user click
 * the back or forward button of the browser. For example, when showing a context menu a virtual history record should be added and this record will be skipped
 * when user navigates back and it will return directly to the previous history record. If you avoid adding the virtual history record, it will return to one
 * history record before the one your virtual record is based on. That's why virtual record is necessary.
 * @public
 * 
 */
jQuery.sap.history.prototype.addVirtualHistory = function() {  };

/**
 * This function navigates back through the history stack. The number of steps is set by the parameter iSteps. It also handles the situation when it's called while there's nothing in the history stack.
 * Normally this happens when the application is restored from the bookmark. If there's nothing in the history stack, the default handler will be called with NavType jQuery.sap.history.NavType.Back.
 * @param {int} [iSteps] how many steps you want to go back, by default the value is 1.
 * @public
 * 
 */
jQuery.sap.history.prototype.back = function(iSteps) {  };

/**
 * This function will navigate back to the recent history state which has the sPath identifier. It is usually used to navigate back along one
 * specific route and jump over the intermediate history state if there are any.
 * @param {string} sPath The route identifier to which the history navigates back.
 * @public
 * 
 */
jQuery.sap.history.prototype.backThroughPath = function(sPath) {  };

/**
 * This function calculate the number of back steps to the specific sHash passed as parameter,
 * and then go back to the history state with this hash.
 * @param {string} sHash The hash string needs to be navigated. This is normally returned when you call the addhistory method.
 * @public
 * 
 */
jQuery.sap.history.prototype.backToHash = function(sHash) {  };

/**
 * Set the default handler which will be called when there's an empty hash in the url.
 * @param {function} fn The function that will be set as the default handler
 * @public
 * 
 */
jQuery.sap.history.prototype.setDefaultHandler = function(fn) {  };


// ---- jQuery.sap.history.NavType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.history.NavType.toString = function() { return ""; };

// ---- jQuery.sap.KeyCodes --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.KeyCodes.toString = function() { return ""; };

// ---- jQuery.sap.log --------------------------------------------------------------------------

/**
 * Allows to add a new LogListener that will be notified for new log entries.
 * The given object must provide method <code>onLogEntry</code> and can also be informed
 * about <code>onDetachFromLog</code> and <code>onAttachToLog</code>
 * @param {object} oListener The new listener object that should be informed
 * @return {jQuery.sap.log} The global logger
 * @public
 * @static
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.addLogListener = function(oListener) { return new jQuery.sap.log(); };

/**
 * Creates a new debug-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.debug = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new error-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.error = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new fatal-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance for method chaining
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.fatal = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Returns the log level currently effective for the given component.
 * If no component is given or when no level has been configured for a
 * given component, the log level for the default component of this logger is returned.
 * @param {string} [sComponent] Name of the component to retrieve the log level for
 * @return {int} The log level for the given component or the default log level
 * @public
 * @since 1.1.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLevel = function(sComponent) { return 0; };

/**
 * Retrieves the currently recorded log entries.
 * @deprecated Since 1.1.2. To avoid confusion with getLogger, this method has been renamed to {@link jQuery.sap.log.getLogEntries}.
 * @public
 * @static
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLog = function() {  };

/**
 * Returns the logged entries recorded so far as an array.
 * 
 * Log entries are plain JavaScript objects with the following properties
 * <ul>
 * <li>timestamp {number} point in time when the entry was created
 * <li>level {int} LogLevel level of the entry
 * <li>message {string} message text of the entry
 * </ul>
 * @return {object[]} an array containing the recorded log entries
 * @public
 * @static
 * @since 1.1.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLogEntries = function() { return new Array(); };

/**
 * Returns a {@link jQuery.sap.log.Logger} for the given component.
 * 
 * The method might or might not return the same logger object across multiple calls.
 * While loggers are assumed to be light weight objects, consumers should try to
 * avoid redundant calls and instead keep references to already retrieved loggers.
 * 
 * The optional second parameter <code>iDefaultLogLevel</code> allows to specify
 * a default log level for the component. It is only applied when no log level has been
 * defined so far for that component (ignoring inherited log levels). If this method is
 * called multiple times for the same component but with different log levels,
 * only the first call one might be taken into account.
 * @param {string} sComponent Component to create the logger for
 * @param {int} [iDefaultLogLevel] a default log level to be used for the component,
 *   if no log level has been defined for it so far.
 * @return {jQuery.sap.log.Logger} A logger for the component.
 * @public
 * @static
 * @since 1.1.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLogger = function(sComponent,iDefaultLogLevel) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new info-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.info = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Checks whether logging is enabled for the given log level,
 * depending on the currently effective log level for the given component.
 * 
 * If no component is given, the default component of this logger will be taken into account.
 * @param {int} [iLevel=Level.DEBUG] the log level in question
 * @param {string} [sComponent] Name of the component to check the log level for
 * @return {boolean} Whether logging is enabled or not
 * @public
 * @since 1.13.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.isLoggable = function(iLevel,sComponent) { return false; };

/**
 * Allows to remove a registered LogListener.
 * @param {object} oListener The new listener object that should be removed
 * @return {jQuery.sap.log} The global logger
 * @public
 * @static
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.removeLogListener = function(oListener) { return new jQuery.sap.log(); };

/**
 * Defines the maximum jQuery.sap.log.Level of log entries that will be recorded.
 * Log entries with a higher (less important) log level will be omitted from the log.
 * When a component name is given, the log level will be configured for that component
 * only, otherwise the log level for the default component of this logger is set.
 * For the global logger, the global default level is set.
 * 
 * <b>Note</b>: Setting a global default log level has no impact on already defined
 * component log levels. They always override the global default log level.
 * @param {jQuery.sap.log.Level} iLogLevel
 * @param {string} [sComponent] The log component to set the log level for.
 * @return {jQuery.sap.log} The global logger to allow method chaining
 * @public
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.setLevel = function(iLogLevel,sComponent) { return new jQuery.sap.log(); };

/**
 * Creates a new trace-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log-instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.trace = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new warning-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.warning = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };


// ---- jQuery.sap.log.Level --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.log.Level.toString = function() { return ""; };

// ---- jQuery.sap.log.Logger --------------------------------------------------------------------------

/**
 * Creates a new Logger instance which will use the given component string
 * for all logged messages without a specific component.
 * @param {string} sDefaultComponent
 * @class A Logger class
 * @since 1.1.2
 * @public
 * 
 */
jQuery.sap.log.Logger = function(sDefaultComponent) {};
/**
 * Creates a new debug-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.debug = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new error-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.error = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new fatal-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance for method chaining
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.fatal = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Returns the log level currently effective for the given component.
 * If no component is given or when no level has been configured for a
 * given component, the log level for the default component of this logger is returned.
 * @param {string} [sComponent] Name of the component to retrieve the log level for
 * @return {int} The log level for the given component or the default log level
 * @public
 * @since 1.1.2
 * 
 */
jQuery.sap.log.Logger.prototype.getLevel = function(sComponent) { return 0; };

/**
 * Creates a new info-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.info = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Checks whether logging is enabled for the given log level,
 * depending on the currently effective log level for the given component.
 * 
 * If no component is given, the default component of this logger will be taken into account.
 * @param {int} [iLevel=Level.DEBUG] the log level in question
 * @param {string} [sComponent] Name of the component to check the log level for
 * @return {boolean} Whether logging is enabled or not
 * @public
 * @since 1.13.2
 * 
 */
jQuery.sap.log.Logger.prototype.isLoggable = function(iLevel,sComponent) { return false; };

/**
 * Defines the maximum jQuery.sap.log.Level of log entries that will be recorded.
 * Log entries with a higher (less important) log level will be omitted from the log.
 * When a component name is given, the log level will be configured for that component
 * only, otherwise the log level for the default component of this logger is set.
 * For the global logger, the global default level is set.
 * 
 * <b>Note</b>: Setting a global default log level has no impact on already defined
 * component log levels. They always override the global default log level.
 * @param {jQuery.sap.log.Level} iLogLevel
 * @param {string} [sComponent] The log component to set the log level for.
 * @return {jQuery.sap.log} The global logger to allow method chaining
 * @public
 * 
 */
jQuery.sap.log.Logger.prototype.setLevel = function(iLogLevel,sComponent) { return new jQuery.sap.log(); };

/**
 * Creates a new trace-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log-instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.trace = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new warning-level entry in the log with the given message, details and calling component.
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.warning = function(sMessage,sDetails,sComponent) { return new jQuery.sap.log.Logger(); };


// ---- jQuery.sap.log.LogLevel --------------------------------------------------------------------------


// ---- jQuery.sap.measure --------------------------------------------------------------------------

/**
 * Adds a performance measurement with all data
 * This is usefull to add external measurements (e.g. from a backend) to the common measurement UI
 * @param {string} sId ID of the measurement
 * @param {string} sInfo Info for the measurement
 * @param {int} iStart start timestamp
 * @param {int} iEnd end timestamp
 * @param {int} iTime time in milliseconds
 * @param {int} iDuration effective time in milliseconds
 * @return {object} [] current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.add = function(sId,sInfo,iStart,iEnd,iTime,iDuration) { return new Object(); };

/**
 * Clears all performance measurements
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.clear = function() {  };

/**
 * Ends a performance measure
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.end = function(sId) { return new Object(); };

/**
 * Gets the current state of the perfomance measurement functionality
 * @return {boolean} current state of the perfomance measurement functionality
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getActive = function() { return false; };

/**
 * Gets all performance measurements
 * @return {object} [] current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getAllMeasurements = function() { return new Object(); };

/**
 * Gets a performance measure
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getMeasurement = function(sId) { return new Object(); };

/**
 * Pauses a performance measure
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, pause-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.pause = function(sId) { return new Object(); };

/**
 * Removes a performance measure
 * @param {string} sId ID of the measurement
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.remove = function(sId) {  };

/**
 * Resumes a performance measure
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, resume-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.resume = function(sId) { return new Object(); };

/**
 * Activates or deactivates the performance measure functionality
 * @param {boolean} bOn state of the perfomance measurement functionality to set
 * @return {boolean} current state of the perfomance measurement functionality
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.setActive = function(bOn) { return false; };

/**
 * Starts a performance measure
 * @param {string} sId ID of the measurement
 * @param {string} sInfo Info for the measurement
 * @return {object} current measurement containing id, info and start-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.start = function(sId,sInfo) { return new Object(); };


// ---- jQuery.sap.PseudoEvents --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.PseudoEvents.toString = function() { return ""; };

// ---- jQuery.sap.storage --------------------------------------------------------------------------

/**
 * Deletes all the entries saved in the session (Independent of the current Storage instance!).
 * 
 * CAUTION: This method should be called only in very particular situations,
 * when a global erasing of data is required. Given that the method deletes
 * the data saved under any ID, it should not be called when managing data
 * for specific controls.
 * @return {boolean} true if execution of removal
 * was successful or the data to remove doesn't exist,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.clear = function() { return false; };

/**
 * Retrieves the state string stored in the session under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sId Id for the state to retrieve
 * @return {string} the string from the storage, if the retrieval
 * was successful, and null otherwise
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.get = function(sId) { return ""; };

/**
 * Returns the type of the storage.
 * @returns {jQuery.sap.storage.Type | string} the type of the storage or "unknown"
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.getType = function() { return new jQuery.sap.storage.Type(); };

/**
 * Returns whether the given storage is suppported.
 * @return {boolean} true if storage is supported, false otherwise (e.g. due to browser security settings)
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.isSupported = function() { return false; };

/**
 * Stores the passed state string in the session, under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sId Id for the state to store
 * @param {string} sStateToStore content to store
 * @return {boolean} true if the data were successfully stored, false otherwise
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.put = function(sId,sStateToStore) { return false; };

/**
 * Deletes the state string stored in the session under the key
 * sStorageKeyPrefix + sId.s
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sId Id for the state to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.remove = function(sId) { return false; };

/**
 * Deletes all state strings stored in the session under the key prefix 
 * sStorageKeyPrefix + sIdPrefix.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sIdPrefix Id prefix for the states to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @since 1.13.0
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.removeAll = function(sIdPrefix) { return false; };


// ---- jQuery.sap.storage.Storage --------------------------------------------------------------------------

/**
 * Deletes all the entries saved in the session (Independent of the current Storage instance!).
 * 
 * CAUTION: This method should be called only in very particular situations,
 * when a global erasing of data is required. Given that the method deletes
 * the data saved under any ID, it should not be called when managing data
 * for specific controls.
 * @return {boolean} true if execution of removal
 * was successful or the data to remove doesn't exist,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.clear = function() { return false; };

/**
 * Retrieves the state string stored in the session under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sId Id for the state to retrieve
 * @return {string} the string from the storage, if the retrieval
 * was successful, and null otherwise
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.get = function(sId) { return ""; };

/**
 * Returns the type of the storage.
 * @returns {jQuery.sap.storage.Type | string} the type of the storage or "unknown"
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.getType = function() { return new jQuery.sap.storage.Type(); };

/**
 * Returns whether the given storage is suppported.
 * @return {boolean} true if storage is supported, false otherwise (e.g. due to browser security settings)
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.isSupported = function() { return false; };

/**
 * Stores the passed state string in the session, under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sId Id for the state to store
 * @param {string} sStateToStore content to store
 * @return {boolean} true if the data were successfully stored, false otherwise
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.put = function(sId,sStateToStore) { return false; };

/**
 * Deletes the state string stored in the session under the key
 * sStorageKeyPrefix + sId.s
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sId Id for the state to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.remove = function(sId) { return false; };

/**
 * Deletes all state strings stored in the session under the key prefix 
 * sStorageKeyPrefix + sIdPrefix.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * @param {string} sIdPrefix Id prefix for the states to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @since 1.13.0
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.removeAll = function(sIdPrefix) { return false; };


// ---- jQuery.sap.storage.Type --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.storage.Type.toString = function() { return ""; };

// ---- jQuery.sap.util.Properties --------------------------------------------------------------------------


// ---- jQuery.sap.util.ResourceBundle --------------------------------------------------------------------------

/**
 * Returns a locale-specific string value for the given key sKey.
 * 
 * The text is searched in this resource bundle according to the fallback chain described in
 * {@link jQuery.sap.util.ResourceBundle}. If no text could be found, the key itself is used as text.
 * 
 * If text parameters are given, then any occurrences of the pattern "{<i>n</i>}" with <i>n</i> being an integer
 * are replaced by the parameter value with index <i>n</i>.  Note: This replacement is also applied if no text had been found (key).
 * For more details on this replacement mechanism refer also:
 * @see jQuery.sap#formatMessage
 * @param {string} sKey
 * @param {string[]} [aArgs] List of parameters which should replace the place holders "{n}" (n is the index) in the found locale-specific string value.
 * @return {string} The value belonging to the key, if found; otherwise the key itself.
 * @public
 * 
 */
jQuery.sap.util.ResourceBundle.prototype.getText = function(sKey,aArgs) { return ""; };


// ---- jQuery.sap.util.UriParameters --------------------------------------------------------------------------


// ---- jQuery.sap.Version --------------------------------------------------------------------------

/**
 * Returns a Version instance created from the given parameters.
 * 
 * This function can either be called as a constructor (using <code>new</code>) or as a normal function.
 * It always returns an immutable Version instance.
 * 
 * The parts of the version number (major, minor, patch, suffix) can be provided in several ways:
 * <ul>
 * <li>Version("1.2.3-SNAPSHOT") - as a dot-separated string. Any non-numerical char or a dot followed by a non-numerical char starts the suffix portion.
 * Any missing major, minor or patch versions will be set to 0.</li>
 * <li>Version(1,2,3,"-SNAPSHOT") - as individual parameters. Major, minor and patch must be integer numbers or empty, suffix must be a string not starting with digits.</li>
 * <li>Version([1,2,3,"-SNAPSHOT"]) - as an array with the individual parts. The same type restrictions apply as before.</li>
 * <li>Version(otherVersion) - as a Version instance (cast operation). Returns the given instance instead of creating a new one.</li>
 * </ul>
 * 
 * To keep the code size small, this implementation mainly validates the single string variant.
 * All other variants are only validated to some degree. It is the responsibility of the caller to
 * provide proper parts.
 * @param {int|string|any[]|jQuery.sap.Version} vMajor the major part of the version (int) or any of the single parameter variants explained above.
 * @param {int} iMinor the minor part of the version number
 * @param {int} iPatch the patch part of the version number
 * @param {string} sSuffix the suffix part of the version number
 * @return {jQuery.sap.Version} the version object as determined from the parameters
 * @class Represents a version consisting of major, minor, patch version and suffix, e.g. '1.2.7-SNAPSHOT'.
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version = function(vMajor,iMinor,iPatch,sSuffix) {};
/**
 * Compares this version with a given one.
 * 
 * The version with which this version should be compared can be given as
 * <code>jQuery.sap.Version</code> instance, as a string (e.g. <code>v.compareto("1.4.5")</code>)
 * or major, minor, patch and suffix cab be given as separate parameters (e.g. <code>v.compareTo(1, 4, 5)</code>)
 * or in an array (e.g. <code>v.compareTo([1, 4, 5])</code>).
 * @return {int} 0, if the given version is equal to this version, a negative value if the given version is greater and a positive value otherwise
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.compareTo = function() { return 0; };

/**
 * Returns the major version part of this version.
 * @return {int} the major version part of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getMajor = function() { return 0; };

/**
 * Returns the minor version part of this version.
 * @return {int} the minor version part of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getMinor = function() { return 0; };

/**
 * Returns the patch (or micro) version part of this version.
 * @return {int} the patch version part of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getPatch = function() { return 0; };

/**
 * Returns the version suffix of this version.
 * @return {string} the version suffix of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getSuffix = function() { return ""; };

/**
 * Checks whether this version is in the range of the given versions (start included, end excluded).
 * 
 * The boundaries against which this version should be checked can be given as
 * <code>jQuery.sap.Version</code> instances (e.g. <code>v.inRange(v1, v2)</code>), as strings (e.g. <code>v.inRange("1.4", "2.7")</code>)
 * or as arrays (e.g. <code>v.inRange([1,4], [2,7])</code>).
 * @param {string|any[]|jQuery.sap.Version} vMin the start of the range (inclusive)
 * @param {string|any[]|jQuery.sap.Version} vMax the end of the range (exclusive)
 * @return {boolean} <code>true</code> if this version is greater or equal to <code>vMin</code> and smaller than <code>vMax</code>, <code>false</code> otherwise.
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.inRange = function(vMin,vMax) { return false; };

/**
 * Returns a string representation of this version.
 * @return {string} a string representation of this version.
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.toString = function() { return ""; };


// ---- jQuery.support --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.support.toString = function() { return ""; };

// ---- sap --------------------------------------------------------------------------


// ---- sap.ui --------------------------------------------------------------------------

/**
 * Creates a new instance of a <code>Component</code> or returns the instance
 * of an existing <code>Component</code>.
 * 
 * If you want to lookup all an existing <code>Component</code> you can call
 * this function with a component Id as parameter:
 * <pre> 
 *   var oComponent = sap.ui.component(sComponentId);
 * </pre>
 * 
 * To create a new instance of a component you pass a component configuration
 * object into this function:
 * <pre>
 *   var oComponent = sap.ui.component({
 *     name: "my.Component",
 *     url: "my/component/location",
 *     id: "myCompId1"
 *   });
 * </pre>
 * @param {string|object} oComponent the id of an existing Component or the configuration object to create the Component
 * @param {string} oComponent.name the name of the Component to load
 * @param {string} [oComponent.url] an alternate location from where to load the Component
 * @param {object} [oComponent.componentData] initial data of the Component (@see sap.ui.core.Component#getComponentData)
 * @param {string} [oComponent.id] the sId of the new Component
 * @param {object} [oComponent.settings] the mSettings of the new Component 
 * @return {sap.ui.core.Component} the Component instance 
 * @public
 * @static
 * @since 1.15.0
 * 
 * @memberof sap.ui
 */
sap.ui.component = function(oComponent) { return new sap.ui.core.Component(); };

/**
 * Defines a controller class or creates an instance of an already defined controller class.
 * 
 * When a name and a controller implementation object is given, a new controller class
 * of the given name is created. The members of the implementation object will be copied
 * into each new instance of that controller class (shallow copy).
 * <b>Note</b>: as the members are shallow copied, controller instances will share all object values.
 * This might or might not be what applications expect.
 * 
 * If only a name is given, a new instance of the named Controller class is returned.
 * @param {string} sName The Controller name
 * @param {object} [oControllerImpl] An object literal defining the methods and properties of the Controller
 * @return {void | sap.ui.core.mvc.Controller} void or the new controller instance, depending on the use case
 * @public
 * 
 * @memberof sap.ui
 */
sap.ui.controller = function(sName,oControllerImpl) { return null; };

/**
 * Creates 0..n UI5 controls from an ExtensionPoint.
 * One control if the ExtensionPoint is e.g. filled with a View, zero for ExtensionPoints without configured extension and
 * n controls for multi-root Fragments as extension.
 * In JSViews, this function allows both JSON notation in aggregation content as well as adding an extension point to an aggregation after the target control
 * has already been instantiated. In the latter case the optional parameters oTargetControls and oTargetAggregation need to be specified.
 * @param {sap.ui.core.mvc.View|sap.ui.core.Fragment} oContainer The view or fragment containing the extension point
 * @param {String} sExtName The extensionName used to identify the extension point in the customizing
 * @param {createDefaultContent} [fnCreateDefaultContent] Optional callback function creating default content, returning an Array of controls. It is executed 
 * 			when there's no customizing, if not provided, no default content will be rendered.
 * @param {sap.ui.base.Control} [oTargetControl] Optional - use this parameter to attach the extension point to a particular aggregation
 * @param {String} [sAggregationName] Optional - if provided along with oTargetControl, the extension point content is added to this particular aggregation at oTargetControl,
 * 			if not given, but an oTargetControl is still present, the function will attempt to add the extension point to the default aggregation of oTargetControl.
 * 			If no oTargetControl is provided, sAggregationName will also be ignored.
 * @return an array with 0..n controls created from an ExtensionPoint
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.extensionpoint = function(oContainer,sExtName,fnCreateDefaultContent,oTargetControl,sAggregationName) {  };

/**
 * Instantiate a Fragment - this method loads the Fragment content, instantiates it, and returns this content.
 * The Fragment object itself is not an entity which has further significance beyond this constructor.
 * 
 * To instantiate an existing Fragment, call this method as:
 *    sap.ui.fragment(sName, sType, [oController]);
 * The sName must correspond to an XML Fragment which can be loaded
 * via the module system (fragmentName + suffix ".fragment.[typeextension]") and which defines the Fragment content.
 * If oController is given, the (event handler) methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be implemented 
 * and added using the sap.ui.core.Fragment.registerType() function.
 * 
 * 
 * Advanced usage:
 * To instantiate a Fragment and give further configuration options, call this method as:
 *     sap.ui.fragment(oFragmentConfig, [oController]);
 * The oFragmentConfig object can have the following properties:
 * - "fragmentName": the name of the Fragment, as above
 * - "fragmentContent": the definition of the Fragment content itself. When this property is given, any given name is ignored.
 *         The type of this property depends on the Fragment type, e.g. it could be a string for XML Fragments.
 * - "type": the type of the Fragment, as above (mandatory)
 * - "id": the ID of the Fragment (optional)
 * Further properties may be supported by future or custom Fragment types. Any given properties 
 * will be forwarded to the Fragment implementation.
 * 
 * If you want to give a fixed ID for the Fragment, please use the advanced version of this method call with the 
 * configuration object or use the typed factories like sap.ui.xmlfragment(...) or sap.ui.jsfragment(...). 
 * Otherwise the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the ID of 
 * all contained controls.
 * @param {string} sName the Fragment name
 * @param {string} sType the Fragment type, e.g. "XML", "JS", or "HTML"
 * @param {sap.ui.core.Controller} [oController] the Controller which should be used by the controls in the Fragment. Note that some Fragments may not need a Controller and other may need one - and even rely on certain methods implemented in the Controller.
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the Fragment content
 * 
 * @memberof sap.ui
 */
sap.ui.fragment = function(sName,sType,oController) { return new sap.ui.core.Control(); };

/**
 * Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.
 * @returns {sap.ui.core.Core} the API of the current SAPUI5 Core instance.
 * @public
 * 
 * @memberof sap.ui
 */
sap.ui.getCore = function() { return new sap.ui.core.Core(); };

/**
 * Loads the version info file (resources/sap-ui-version.json) and returns 
 * it or if a library name is specified then the version info of the individual 
 * library will be returned.
 * 
 * In case of the version info file is not available an error will occur when
 * calling this function.
 * @param {string} [sLibName] name of the library (e.g. "sap.ui.core")
 * @return {object} either the full version info or the library specific one
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.getVersionInfo = function(sLibName) { return new Object(); };

/**
 * Instantiates an HTML-based Fragment.
 * 
 * To instantiate a Fragment, call this method as:
 *    sap.ui.htmlfragment([sId], sFragmentName, [oController]);
 * The Fragment instance ID is optional (generated if not given) and will be used as prefix for the ID of all
 * contained controls. The sFragmentName must correspond to an HTML Fragment which can be loaded
 * via the module system (fragmentName + ".fragment.html") and which defines the Fragment.
 * If oController is given, the methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * 
 * Advanced usage:
 * To instantiate a Fragment and optionally directly give the HTML definition instead of loading it from a file, 
 * call this method as:
 *     sap.ui.htmlfragment(oFragmentConfig, [oController]);
 * The oFragmentConfig object can have a either a "fragmentName" or a "fragmentContent" property. 
 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
 * @param {string} [sId] id of the newly created Fragment
 * @param {string | object} vFragment name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired.)
 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
 * 
 * @memberof sap.ui
 */
sap.ui.htmlfragment = function(sId,vFragment,oController) { return new sap.ui.core.Control(); };

/**
 * Defines or creates an instance of a declarative HTML view.
 * 
 * The behavior of this method depends on the signature of the call and on the current context.
 * 
 * <ul>
 * <li>View Definition <code>sap.ui.htmlview(sId, vView)</code>: Defines a view of the given name with the given
 * implementation. sId must be the views name, vView must be an object and can contain
 * implementations for any of the hooks provided by HTMLView</li>
 * <li>View Instantiation <code>sap.ui.htmlview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
 * </ul>
 * 
 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
 * be created automatically.
 * @param {string} [sId] id of the newly created view, only allowed for instance creation
 * @param {string | object} vView name or implementation of the view.
 * @public
 * @static
 * @return {sap.ui.core.mvc.HTMLView | undefined} the created HTMLView instance in the creation case, otherwise undefined
 * 
 * @memberof sap.ui
 */
sap.ui.htmlview = function(sId,vView) { return new sap.ui.core.mvc.HTMLView(); };

/**
 * Defines OR instantiates an HTML-based Fragment.
 * 
 * To define a JS Fragment, call this method as:
 *    sap.ui.jsfragment(sName, oFragmentDefinition)
 * Where:
 * - "sName" is the name by which this fragment can be found and instantiated. If defined in its own file,
 *    in order to be found by the module loading system, the file location and name must correspond to sName 
 *    (path + file name must be: fragmentName + ".fragment.js").
 * - "oFragmentDefinition" is an object at least holding the "createContent(oController)" method which defines
 *    the Fragment content. If given during instantiation, the createContent method receives a Controller
 *    instance (otherwise oController is undefined) and the return value must be one sap.ui.core.Control
 *    (which could have any number of children).
 * 
 * 
 * To instantiate a JS Fragment, call this method as:
 *    sap.ui.jsfragment([sId], sFragmentName, [oController]);
 * The Fragment ID is optional (generated if not given) and the Fragment implementation CAN use it
 * to make contained controls unique (this depends on the implementation: some JS Fragments may choose 
 * not to support multiple instances within one application and not use the ID prefixing).
 * The sFragmentName must correspond to a JS Fragment which can be loaded
 * via the module system (fragmentName + ".fragment.js") and which defines the Fragment.
 * If oController is given, the methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * @param {string} [sId] id of the newly created Fragment
 * @param {string | object} sFragmentName name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
 * 
 * @memberof sap.ui
 */
sap.ui.jsfragment = function(sId,sFragmentName,oController) { return new sap.ui.core.Control(); };

/**
 * Creates a JSON view of the given name and id.
 * 
 * The <code>viewName</code> must either correspond to a JSON module that can be loaded
 * via the module system (viewName + suffix ".view.json") and which defines the view or it must
 * be a configuration object for a view.
 * The configuration object can have a viewName, viewContent and a controller property. The viewName
 * behaves as described above, viewContent can hold the view description as JSON string or as object literal. 
 * 
 * <strong>Note</strong>: when an object literal is given, it might be modified during view construction.
 * 
 * The controller property can hold an controller instance. If a controller instance is given, 
 * it overrides the controller defined in the view.
 * 
 * Like with any other control, an id is optional and will be created when missing.
 * @param {string} [sId] id of the newly created view
 * @param {string | object} vView name of a view resource or view configuration as described above.
 * @param {string} [vView.viewName] name of a view resource in module name notation (without suffix)
 * @param {string|object} [vView.viewContent] view definition as a JSON string or an object literal
 * @param {sap.ui.core.mvc.Controller} [vView.controller] controller to be used for this view instance
 * @public
 * @static
 * @return {sap.ui.core.mvc.JSONView} the created JSONView instance
 * 
 * @memberof sap.ui
 */
sap.ui.jsonview = function(sId,vView) { return new sap.ui.core.mvc.JSONView(); };

/**
 * Defines or creates an instance of a JavaScript view.
 * 
 * The behavior of this method depends on the signature of the call and on the current context.
 * 
 * <ul>
 * <li>View Definition <code>sap.ui.jsview(sId, vView)</code>: Defines a view of the given name with the given
 * implementation. sId must be the views name, vView must be an object and can contain
 * implementations for any of the hooks provided by JSView</li>
 * <li>View Instantiation <code>sap.ui.jsview(sId?, vView)</code>: Creates an instance of the view with the given name (and id).
 * If no view implementation has been defined for that view name, a JavaScript module with the same name and with suffix "view.js" will be loaded
 * and executed. The module should contain a view definition (1st. variant above). </li>
 * </ul>
 * 
 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
 * be created automatically.
 * @param {string} [sId] id of the newly created view, only allowed for instance creation
 * @param {string | object} vView name or implementation of the view.
 * @public
 * @static
 * @return {sap.ui.core.mvc.JSView | undefined} the created JSView instance in the creation case, otherwise undefined
 * 
 * @memberof sap.ui
 */
sap.ui.jsview = function(sId,vView) { return new sap.ui.core.mvc.JSView(); };

/**
 * Creates a lazy loading stub for a given class <code>sClassName</code>.
 * 
 * If the class has been loaded already, nothing is done. Otherwise a stub object
 * or constructor and - optionally - a set of stub methods are created.
 * All created stubs will load the corresponding module on execution
 * and then delegate to their counterpart in the loaded module.
 * 
 * When no methods are given or when the list of methods contains the special name
 * "new" (which is an operator can't be used as method name in JavaScript), then a
 * stub <b>constructor</b> for class <code>sClassName</code> is created.
 * Otherwise, a plain object is created.
 * 
 * <b>Note</b>: Accessing any stub as a plain object without executing it (no matter
 * whether it is a function or an object) won't load the module and therefore most like
 * won't work as expected. This is a fundamental restriction of the lazy loader approach.
 * It could only be fixed with JavaScript 1.5 features that are not available in all
 * UI5 target browsers (e.g. not in IE8).
 * 
 * <b>Note</b>: As a side effect of this method, the namespace containing the given
 * class is created <b>immediately</b>.
 * @param {string} sClassName Fully qualified name (dot notation) of the class that should be prepared
 * @param {string} [sMethods='new'] space separated list of additional (static) methods that should be created as stubs
 * @param {string} [sModuleName] name of the module to load, defaults to the class name
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.lazyRequire = function(sClassName,sMethods,sModuleName) {  };

/**
 * Redirects access to resources that are part of the given namespace to a location
 * relative to the assumed <b>application root folder</b>.
 * 
 * Any UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.)
 * whose resource name starts with <code>sNamespace</code>, will be loaded from an
 * equally named subfolder of the <b>application root folder</b>.
 * If the resource name consists of multiple segments (separated by a dot), each segment
 * is assumed to represent an individual folder. In other words: when a resource name is
 * converted to an URL, any dots ('.') are converted to slashes ('/').
 * 
 * <b>Limitation:</b> For the time being, the <b>application root folder</b> is assumed to be
 * the same as the folder where the current page resides in.
 * 
 * Usage sample:
 * <pre>
 *   // Let UI5 know that resources, whose name starts with "com.mycompany.myapp"
 *   // should be loaded from the URL location "./com/mycompany/myapp"
 *   sap.ui.localResources("com.mycompany.myapp");
 * 
 *   // The following call implicitly will use the mapping done by the previous line
 *   // It will load a view from ./com/mycompany/myapp/views/Main.view.xml
 *   sap.ui.view({ view : "com.mycompany.myapp.views.Main", type : sap.ui.core.mvc.ViewType.XML});
 * </pre>
 * 
 * When applications need a more flexible mapping between resource names and their location,
 * they can use {@link jQuery.sap.registerModulePath}.
 * 
 * It is intended to make this configuration obsolete in future releases, but for the time
 * being, applications must call this method when they want to store resources relative to
 * the assumed application root folder.
 * @param {string} sNamespace Namespace prefix for which to load resources relative to the application root folder
 * @public
 * @static
 * @see jQuery.sap.registerModulePath
 * 
 * @memberof sap.ui
 */
sap.ui.localResources = function(sNamespace) {  };

/**
 * Returns the URL of a resource that belongs to the given library and has the given relative location within the library.
 * This is mainly meant for static resources like images that are inside the library.
 * It is NOT meant for access to JavaScript modules or anything for which a different URL has been registered with jQuery.sap.registerModulePath(). For
 * these cases use jQuery.sap.getModulePath().
 * It DOES work, however, when the given sResourcePath starts with "themes/" (= when it is a theme-dependent resource). Even when for this theme a different
 * location outside the normal library location is configured.
 * @param {string} sLibraryName the name of a library, like "sap.ui.commons"
 * @param {string} sResourcePath the relative path of a resource inside this library, like "img/mypic.png" or "themes/my_theme/img/mypic.png"
 * @returns {string} the URL of the requested resource
 * @static
 * @public
 * 
 * @memberof sap.ui
 */
sap.ui.resource = function(sLibraryName,sResourcePath) { return ""; };

/**
 * Displays the control tree with the given root inside the area of the given
 * DOM reference (or inside the DOM node with the given ID) or in the given Control.
 * 
 * Example:
 * <pre>
 *   &lt;div id="SAPUI5UiArea">&lt;/div>
 *   &lt;script type="text/javascript">
 *     var oRoot = new sap.ui.commons.Label();
 *     oRoot.setText("Hello world!");
 *     sap.ui.setRoot("SAPUI5UiArea", oRoot);
 *   &lt;/script>
 * </pre>
 * <p>
 * 
 * This is a shortcut for <code>sap.ui.getCore().setRoot()</code>.
 * 
 * Internally, if a string is given that does not identify an UIArea or a control
 * then implicitly a new <code>UIArea</code> is created for the given DOM reference
 * and the given control is added.
 * @param {string|Element|sap.ui.core.Control} oDomRef a DOM Element or Id String of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>placeAt</code> of <code>sap.ui.core.Control</code> instead.
 * 
 * @memberof sap.ui
 */
sap.ui.setRoot = function(oDomRef,oControl) {  };

/**
 * Creates a Template for the given id, dom reference or a configuration object.
 * If no parameter is defined this function makes a lookup of DOM elements 
 * which are specifying a type attribute. If the value of this type attribute
 * matches an registered type then the content of this DOM element will be 
 * used to create a new <code>Template</code> instance.
 * 
 * If you want to lookup all kind of existing and known templates and parse them
 * directly you can simply call:
 * <pre> 
 *   sap.ui.template();
 * </pre>
 * 
 * To parse a concrete DOM element you can do so by using this function in the 
 * following way:
 * <pre>
 *   sap.ui.template("theTemplateId");
 * </pre>
 * 
 * Or you can pass the reference to a DOM element and use this DOM element as 
 * a source for the template:
 * <pre>
 *   sap.ui.template(oDomRef);
 * </pre>
 * 
 * The last option to use this function is to pass the information via a 
 * configuration object. This configuration object can be used to pass a 
 * context for the templating framework when compiling the template:
 * <pre>
 *   var oTemplateById = sap.ui.template({
 *     id: "theTemplateId",
 *     context: { ... }
 *   });
 * 
 *   var oTemplateByDomRef = sap.ui.template({
 *     domref: oDomRef,
 *     context: { ... }
 *   });
 * </pre>
 * 
 * It can also be used to load a template from another file:
 * <pre>
 *   var oTemplate = sap.ui.template({
 *     id: "myTemplate",
 *     src: "myTemplate.tmpl"
 *   });
 * 
 *   var oTemplateWithContext = sap.ui.template({
 *     id: "myTemplate",
 *     src: "myTemplate.tmpl",
 *     context: { ... }
 *   });
 * </pre>
 * 
 * The properties of the configuration object are the following:
 * <ul>
 * <li><code>id</code> - the ID of the Template / the ID  of the DOM element containing the source of the Template</li>
 * <li><code>domref</code> - the DOM element containing the source of the Template</li>
 * <li><code>type</code> - the type of the Template</li>
 * <li><code>src</code> - the URL to lookup the template</li> (<i>experimental!</i>)
 * <li><code>control</code> - the fully qualified name of the control to declare</li> (<i>experimental!</i>)
 * </ul>
 * @param {string|DomRef|object} [oTemplate] the id or the DOM reference to the template to lookup or an configuration object containing the src, type and eventually the id of the Template.
 * @return {sap.ui.core.tmpl.Template | sap.ui.core.tmpl.Template[]} the created Template instance 
 *         or in case of usage without parametes any array of templates is returned
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.template = function(oTemplate) { return new sap.ui.core.tmpl.Template(); };

/**
 * Defines or creates an instance of a template view.
 * 
 * The behavior of this method depends on the signature of the call and on the current context.
 * 
 * <ul>
 * <li>View Definition <code>sap.ui.templateview(sId, vView)</code>: Defines a view of the given name with the given
 * implementation. sId must be the views name, vView must be an object and can contain
 * implementations for any of the hooks provided by templateview</li>
 * <li>View Instantiation <code>sap.ui.templateview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
 * </ul>
 * 
 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
 * be created automatically.
 * @param {string} [sId] id of the newly created view, only allowed for instance creation
 * @param {string | object} vView name or implementation of the view.
 * @public
 * @static
 * @return {sap.ui.core.mvc.TemplateView | undefined} the created TemplateView instance in the creation case, otherwise undefined
 * 
 * @memberof sap.ui
 */
sap.ui.templateview = function(sId,vView) { return new sap.ui.core.mvc.TemplateView(); };

/**
 * Creates a view of the given type, name and with the given id.
 * 
 * The <code>oView</code> configuration object can have the following properties for the view
 * instantiation:
 * <ul>
 * <li>The ID <code>oView.id</code> specifies an ID for the View instance. If no ID is given,
 * an ID will be generated.</li>
 * <li>The view name <code>oView.viewName</code> corresponds to an XML module that can be loaded
 * via the module system (oView.viewName + suffix ".view.xml")</li>
 * <li>The controller instance <code>oView.controller</code> must be a valid controller implementation.
 * The given controller instance overrides the controller defined in the view definition</li>
 * <li>The view type <code>oView.type</code> specifies what kind of view will be instantiated. All valid
 * view types are listed in the enumeration sap.ui.core.mvc.ViewType.</li>
 * <li>The view data <code>oView.viewData</code> can hold user specific data. This data is available
 * during the whole lifecycle of the view and the controller</li>
 * </ul>
 * @param {string} sId id of the newly created view, only allowed for instance creation
 * @param {object} [vView] the view configuration object
 * @public
 * @static
 * @return {sap.ui.core.mvc.View} the created View instance
 * 
 * @memberof sap.ui
 */
sap.ui.view = function(sId,vView) { return new sap.ui.core.mvc.View(); };

/**
 * Instantiates an XML-based Fragment.
 * 
 * To instantiate a Fragment, call this method as:
 *    sap.ui.xmlfragment([sId], sFragmentName, [oController]);
 * The Fragment instance ID is optional (generated if not given) and will be used as prefix for the ID of all
 * contained controls. The sFragmentName must correspond to an XML Fragment which can be loaded
 * via the module system (fragmentName + ".fragment.xml") and which defines the Fragment.
 * If oController is given, the methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * 
 * Advanced usage:
 * To instantiate a Fragment and optionally directly give the XML definition instead of loading it from a file,
 * call this method as:
 *     sap.ui.xmlfragment(oFragmentConfig, [oController]);
 * The oFragmentConfig object can have a either a "fragmentName" or a "fragmentContent" property. 
 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
 * @param {string} [sId] id of the newly created Fragment
 * @param {string | object} vFragment name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
 * 
 * @memberof sap.ui
 */
sap.ui.xmlfragment = function(sId,vFragment,oController) { return new sap.ui.core.Control(); };

/**
 * Instantiates an XMLView of the given name and with the given id.
 * 
 * The <code>viewName</code> must either correspond to an XML module that can be loaded
 * via the module system (viewName + suffix ".view.xml") and which defines the view or it must
 * be a configuration object for a view.
 * The configuration object can have a viewName, viewContent and a controller property. The viewName
 * behaves as described above. ViewContent is optional and can hold a view description as XML string or as 
 * already parsed XML Document. If not given, the view content definition is loaded by the module system.
 * 
 * <strong>Note</strong>: if a Document is given, it might be modified during view construction.
 * 
 * The controller property can hold an controller instance. If a controller instance is given,
 * it overrides the controller defined in the view.
 * 
 * Like with any other control, id is optional and one will be created automatically.
 * @param {string} [sId] id of the newly created view
 * @param {string | object} vView name of the view or a view configuration object as described above.
 * @param {string} [vView.viewName] name of the view resource in module name notation (without suffix)
 * @param {string|Document} [vView.viewContent] XML string or XML document that defines the view.
 * @param {sap.ui.core.mvc.Controller} [vView.controller] Controller instance to be used for this view 
 * @public
 * @static
 * @return {sap.ui.core.mvc.XMLView} the created XMLView instance
 * 
 * @memberof sap.ui
 */
sap.ui.xmlview = function(sId,vView) { return new sap.ui.core.mvc.XMLView(); };


// ---- sap.ui.app.Application --------------------------------------------------------------------------

/**
 * Abstract application class. Extend this class to create a central application class.
 * 
 * Only one instance is allowed.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRoot root} : string</li>
 * <li>{@link #getConfig config} : any</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRootComponent rootComponent} : sap.ui.core.UIComponent</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Component#constructor sap.ui.core.Component}
 * can be used as well.
 * @param {string}
 *            [sId] optional id for the application; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new application instance
 * @public
 * @class Base class for application classes
 * @extends sap.ui.core.Component
 * @abstract
 * @version @version@
 * @experimental Since 1.11.1. The Application class is still under construction, so some implementation details can be changed in future.
 * @deprecated Since 1.15.1. The Component class is enhanced to take care about the Application code.
 * 
 */
sap.ui.app.Application = function(sId,mSettings) {};
/**
 * Creates and returns the root component. Override this method in your application implementation, if you want to override the default creation by metadata.
 * @return {sap.ui.core.UIComponent} the root component
 * @protected
 * 
 */
sap.ui.app.Application.prototype.createRootComponent = function() { return new sap.ui.core.UIComponent(); };

/**
 * @see sap.ui.core.Component#destroy
 * @public
 * 
 */
sap.ui.app.Application.prototype.destroy = function() {  };

/**
 * Destroys the rootComponent in the aggregation
 * named <code>rootComponent</code>.
 * @return {sap.ui.app.Application} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.app.Application.prototype.destroyRootComponent = function() { return new sap.ui.app.Application(); };

/**
 * Creates a new subclass of class sap.ui.app.Application with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.app.Application.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>config</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {any} the value of property <code>config</code>
 * @public
 * 
 */
sap.ui.app.Application.prototype.getConfig = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.app.Application.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.app.Application.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>root</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>root</code>
 * @public
 * 
 */
sap.ui.app.Application.prototype.getRoot = function() { return ""; };

/**
 * Getter for aggregation <code>rootComponent</code>.<br/>
 * @return {sap.ui.core.UIComponent}
 * @public
 * 
 */
sap.ui.app.Application.prototype.getRootComponent = function() { return new sap.ui.core.UIComponent(); };

/**
 * Returns the application root component. 
 * @return {sap.ui.core.Control} The root component
 * @since 1.13.1
 * @public
 * @deprecated
 * 
 */
sap.ui.app.Application.prototype.getView = function() { return new sap.ui.core.Control(); };

/**
 * The main method is called when the DOM and UI5 is completely loaded. Override this method in your Application class implementation to execute code which relies on a loaded DOM / UI5.
 * @public
 * 
 */
sap.ui.app.Application.prototype.main = function() {  };

/**
 * On before exit application hook. Override this method in your Application class implementation, to handle cleanup before the real exit or to prompt a question to the user,
 * if the application should be exited.
 * @return {string} return a string if a prompt should be displayed to the user confirming closing the application (e.g. when the application is not yet saved).
 * @public
 * 
 */
sap.ui.app.Application.prototype.onBeforeExit = function() { return ""; };

/**
 * On error hook. Override this method in your Application class implementation to listen to unhandled errors.
 * @param {string} sMessage The error message.
 * @param {string} sFile The file where the error occurred
 * @param {number} iLine The line number of the error
 * @public
 * 
 */
sap.ui.app.Application.prototype.onError = function(sMessage,sFile,iLine) {  };

/**
 * On exit application hook. Override this method in your Application class implementation, to handle cleanup of the application.
 * @public
 * 
 */
sap.ui.app.Application.prototype.onExit = function() {  };

/**
 * Sets the configuration model.
 * @param {string|object|sap.ui.model.Model} vConfig the configuration model, the configuration object or a URI string to load a JSON configuration file.
 * @since 1.13.1
 * @public
 * 
 */
sap.ui.app.Application.prototype.setConfig = function(vConfig) {  };

/**
 * Setter for property <code>root</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sRoot new value for property <code>root</code>
 * @return {sap.ui.app.Application} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.app.Application.prototype.setRoot = function(sRoot) { return new sap.ui.app.Application(); };

/**
 * Setter for the aggregated <code>rootComponent</code>.
 * @param {sap.ui.core.UIComponent} oRootComponent the rootComponent to set
 * @return {sap.ui.app.Application} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.app.Application.prototype.setRootComponent = function(oRootComponent) { return new sap.ui.app.Application(); };


// ---- sap.ui.app.MockServer --------------------------------------------------------------------------

/**
 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
 * changing the application code. This class can also be used for qunit tests.
 * @param {string} [sId] id for the new server object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
 * @class Class to mock a server
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version @version@
 * @public
 * @experimental Since 1.13.0. The mock server is still under construction, so some implementation details can be changed in future.
 * @deprecated Since 1.15.1. The mock server code has been moved to sap.ui.core.util - see {@link sap.ui.core.util.MockServer}
 * 
 */
sap.ui.app.MockServer = function(sId,mSettings,oScope) {};

// ---- sap.ui.base --------------------------------------------------------------------------


// ---- sap.ui.base.Event --------------------------------------------------------------------------

/**
 * Creates an event with the given sId, linked to the provided oSource and enriched with the mParameters.
 * @param {string} sId The id of the event
 * @param {sap.ui.base.EventProvider} oSource The source of the event
 * @param {object} mParameters A map of parameters for this event
 * @class An Event object consisting of an id, a source and a map of parameters
 * @extends sap.ui.base.Object
 * @implements sap.ui.base.Poolable
 * @version 1.26.9
 * @public
 * 
 */
sap.ui.base.Event = function(sId,oSource,mParameters) {};
/**
 * Cancel bubbling of the event.
 * @public
 * 
 */
sap.ui.base.Event.prototype.cancelBubble = function() {  };

/**
 * Creates a new subclass of class sap.ui.base.Event with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.Event.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the id of the event
 * @return {string} The id of the event
 * @public
 * 
 */
sap.ui.base.Event.prototype.getId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.base.Event.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.base.Event.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value of the parameter with the given sName.
 * @param {string} sName the name of the parameter to return
 * @return {any} the value for the named parameter
 * @public
 * 
 */
sap.ui.base.Event.prototype.getParameter = function(sName) { return null; };

/**
 * Returns all parameter values of the event keyed by their names.
 * @return {map} All parameters of the event keyed by name
 * @public
 * 
 */
sap.ui.base.Event.prototype.getParameters = function() { return null; };

/**
 * Returns the source of the event
 * @return {sap.ui.base.EventProvider} The source of the event
 * @public
 * 
 */
sap.ui.base.Event.prototype.getSource = function() { return new sap.ui.base.EventProvider(); };

/**
 * Prevent the default action of this event.
 * @public
 * 
 */
sap.ui.base.Event.prototype.preventDefault = function() {  };


// ---- sap.ui.base.EventProvider --------------------------------------------------------------------------

/**
 * Creates an instance of EventProvider.
 * @class Provides internal eventing facilities for objects, so other objects can attach
 * and detach events, and are notified, when events are fired
 * @abstract
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.base.EventProvider = function() {};
/**
 * Adds an event registration for the given object and given event name
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event provider-instance
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.attachEvent = function(sEventId,oData,fnFunction,oListener) { return new sap.ui.base.EventProvider(); };

/**
 * Adds a one time event registration for the given object and given event name. When the event occurs, the handler function is called and removed
 * from registration.
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event provider-instance
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.attachEventOnce = function(sEventId,oData,fnFunction,oListener) { return new sap.ui.base.EventProvider(); };

/**
 * @see sap.ui.base.Object.prototype.destroy
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.destroy = function() {  };

/**
 * Removes an event registration for the given object and given event name.
 * 
 * The passed parameters must match those used for registration with {@link #attachEvent } beforehand!
 * @param {string}
 *            sEventId The identifier of the event to detach from
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.detachEvent = function(sEventId,fnFunction,oListener) { return new sap.ui.base.EventProvider(); };

/**
 * Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.EventProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 * @param {string} sEventId the event id
 * @param {object} [mParameters] the parameter map
 * @param {boolean} [bAllowPreventDefault] whether prevent default is allowed
 * @param {boolean} [bEnableEventBubbling] whether event bubbling is enabled
 * @return {sap.ui.base.EventProvider|boolean} Returns <code>this</code> to allow method chaining or
 * 		   whether the default action should be executed, when bAllowPreventDefault has been set to true
 * @protected
 * 
 */
sap.ui.base.EventProvider.prototype.fireEvent = function(sEventId,mParameters,bAllowPreventDefault,bEnableEventBubbling) { return new sap.ui.base.EventProvider(); };

/**
 * Returns the parent in the eventing hierarchy of this object.
 * 
 * Per default this returns null, but if eventing is used in objects, which are hierarchically
 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
 * enables the use of event bubbling within this object hierarchy.
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 * 
 */
sap.ui.base.EventProvider.prototype.getEventingParent = function() { return new sap.ui.base.EventProvider(); };

/**
 * Returns a metadata object for class sap.ui.base.EventProvider.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.base.EventProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a string representation of this object.
 * 
 * In case there is no class or id information, a simple static string is returned.
 * Subclasses should override this method.
 * @return {string} a string description of this eventProvider
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.toString = function() { return ""; };


// ---- sap.ui.base.Interface --------------------------------------------------------------------------

/**
 * Constructs an instance of sap.ui.base.Interface which restricts access to methods marked as public.
 * @class A class that creates an Interface for an existing class. If a class returns the interface in its constructor,
 *        only the defined functions will be visible, no internals of the class can be accessed.
 * @version 1.26.9
 * @param {sap.ui.base.Object}
 *            oObject the instance that needs an interface created
 * @param {string[]}
 *            aMethods the names of the methods, that should be available on this interface
 * @constructor
 * @public
 * 
 */
sap.ui.base.Interface = function(oObject,aMethods) {};

// ---- sap.ui.base.ManagedObject --------------------------------------------------------------------------

/**
 * Constructs and initializes a managed object with the given <code>sId</code> and settings.
 * 
 * If the optional <code>mSettings</code> are given, they must be a simple object
 * that defines values for properties, aggregations, associations or events keyed by their name.
 * 
 * <b>Valid Names:</b>
 * 
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the managed object and its base classes. Note that for  0..n aggregations and associations this
 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 * 
 * If a key name is ambiguous for a specific managed object class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
 * In that case the keys must be quoted due to the ':'.
 * 
 * Each subclass should document the set of supported names in its constructor documentation.
 * 
 * <b>Valid Values:</b>
 * 
 * <ul>
 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>0..n associations are not supported yet
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 * 
 * 
 * The supported settings are:
 * <ul>
 * <li>Events
 * <ul>
 * <li>{@link #event:validationSuccess validationSuccess} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:validationError validationError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:parseError parseError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:formatError formatError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * @param {string} [sId] id for the new managed object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
 * @class Base Class for managed objects.
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @public
 * @experimental Since 1.11.2. ManagedObject as such is public and usable. Only the support for the optional parameter
 * oScope in the constructor is still experimental and might change in future versions. Applications should not rely on it.
 * 
 */
sap.ui.base.ManagedObject = function(sId,mSettings,oScope) {};
/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.formatError = function(oControlEvent) {  };

/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.parseError = function(oControlEvent) {  };

/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.validationError = function(oControlEvent) {  };

/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.validationSuccess = function(oControlEvent) {  };

/**
 * Adds some entity <code>oObject</code> to the aggregation identified by <code>sAggregationName</code>.
 * @param {string}
 *            sAggregationName the string identifying the aggregation that <code>oObject</code> should be added to.
 * @param {sap.ui.base.ManagedObject}
 *            oObject the object to add; if empty, nothing is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject as well as the added child are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.addAggregation = function(sAggregationName,oObject,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Adds some entity with the ID <code>sId</code> to the association identified by <code>sAssociationName</code>.
 * @param {string}
 *            sAssociationName the string identifying the association the object should be added to.
 * @param {string | sap.ui.base.ManagedObject}
 *            sId the ID of the managed object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject</code> is given, its ID is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this managed object as well as the newly associated object are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.addAssociation = function(sAssociationName,sId,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets all the properties, aggregations, associations and event handlers as given in
 * the object literal <code>mSettings</code>. If a property, aggregation, etc.
 * is not listed in <code>mSettings</code>, then its value is not changed by this method.
 * 
 * For properties and 0..1 aggregations/associations, any given setting overwrites
 * the current value. For 0..n aggregations, the given values are appended; event
 * listeners are registered in addition to existing ones.
 * 
 * For the possible keys and values in <code>mSettings</code> see the general
 * documentation in {@link sap.ui.base.ManagedObject} or the specific documentation
 * of the constructor of the concrete managed object class.
 * @param {object} mSettings the settings to apply to this managed object
 * @param {object} [oScope] Scope object to resolve types and formatters
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @public
 * @experimental Since 1.11.2 support for the scope object for resolving string based type
 * and formatter references in bindings is still experimental
 * 
 */
sap.ui.base.ManagedObject.prototype.applySettings = function(mSettings,oScope) { return new sap.ui.base.ManagedObject(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'formatError' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.base.ManagedObject</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code>.<br/> itself.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachFormatError = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.base.ManagedObject</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code>.<br/> itself.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachParseError = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'validationError' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.base.ManagedObject</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code>.<br/> itself.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachValidationError = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'validationSuccess' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.base.ManagedObject</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code>.<br/> itself.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachValidationSuccess = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind an aggregation to the model.
 * 
 * The bound aggregation will use the given template, clone it for each item
 * which exists in the bound list and set the appropriate binding context.
 * This is a generic method which can be used to bind any aggregation to the
 * model. A managed object may flag aggregations in the metamodel with
 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
 * @param {string} sName the aggregation to bind
 * @param {object} oBindingInfo the binding info
 * @param {string} oBindingInfo.path the binding path
 * @param {sap.ui.base.ManagedObject} oBindingInfo.template the template to clone for each item in the aggregation
 * @param {boolean} [oBindingInfo.templateShareable=true] option to enable that the template will be shared which means that it won't be destroyed or cloned automatically
 * @param {function} oBindingInfo.factory the factory function
 * @param {number} oBindingInfo.startIndex the first entry of the list to be created
 * @param {number} oBindingInfo.length the amount of entries to be created (may exceed the sizelimit of the model)
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [oBindingInfo.sorter] the initial sort order (optional)
 * @param {sap.ui.model.Filter[]} [oBindingInfo.filters] the predefined filters for this aggregation (optional)
 * @param {object} [oBindingInfo.parameters] a map of parameters which is passed to the binding
 * @param {function} [oBindingInfo.groupHeaderFactory] a factory function to generate custom group visualization (optional)
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindAggregation = function(sName,oBindingInfo) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * @deprecated Since 1.11.1, please use bindElement instead.
 * @param {string} sPath the binding path
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindContext = function(sPath) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * If a relative binding path is used, this will be applied whenever the parent context changes.
 * @param {string} sPath the binding path
 * @param {object} [mParameters] map of additional parameters for this binding
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindObject = function(sPath,mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind a property to the model.
 * The Setter for the given property will be called with the value retrieved
 * from the data model.
 * This is a generic method which can be used to bind any property to the
 * model. A managed object may flag properties in the metamodel with
 * bindable="bindable" to get typed bind methods for a property.
 * A composite property binding which may have multiple paths (also known as Calculated Fields) can be declared using the parts parameter.
 * Note a composite binding is read only (One Way). 
 * @param {string} sName the name of the property
 * @param {object} oBindingInfo the binding information
 * @param {string} oBindingInfo.path the binding path
 * @param {string} [oBindingInfo.model] the model identifier
 * @param {function} [oBindingInfo.formatter] the formatter function
 * @param {boolean} [oBindingInfo.useRawValues] determines if the parameters in the formatter functions should be passed as raw values or not. In this case
 * 					the specified type for the binding is not used and the values are not formatted. Note: use this flag only when using multiple bindings.
 * 					If you use only one binding and want raw values then simply don't specify a type for that binding.
 * @param {sap.ui.model.Type|string} [oBindingInfo.type] the sap.ui.model.Type object or class name
 * @param {object} [oBindingInfo.formatOptions] the format options to be used
 * @param {object} [oBindingInfo.constraints] the constraints for this value
 * @param {sap.ui.model.BindingMode} [oBindingInfo.mode=Default] the binding mode to be used for this property binding (e.g. one way)
 * @param {object} [oBindingInfo.parameters] a map of parameters which is passed to the binding
 * @param {object} [oBindingInfo.parts] object for definding a read only composite binding which may have multiple binding paths also in different models.
 * 									<code>oTxt.bindValue({
 * 										parts: [
 *         								{path: "/firstName", type: new sap.ui.model.type.String()},
 *         								{path: "myModel2>/lastName"}
 *        						]
 * 									}); </code>
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindProperty = function(sName,oBindingInfo) { return new sap.ui.base.ManagedObject(); };

/**
 * Clones a tree of objects starting with the object on which clone is called first (root object).
 * 
 * The ids within the newly created clone tree are derived from the original ids by appending
 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
 * unique across multiple clone calls).
 * 
 * The <code>oOptions</code> configuration object can have the following properties:
 * <ul>
 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
 * </ul>
 * 
 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
 * <ul>
 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
 * the values are used by reference, they are not cloned</li>
 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
 * <li>all associated controls; when an association points to an object inside the cloned object tree,
 *     then the cloned association will be modified to that it points to the clone of the target object.
 *     When the association points to a managed object outside of the cloned object tree, then its
 *     target won't be changed.</li>
 * <li>all models set via setModel(); used by reference </li>
 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
 *     cloned, but all other information like template control or factory function,
 *     data type or formatter function are copied by reference. The bindings themselves
 *     are created anew as they are specific for the combination (object, property, model).
 *     As a result, any later changes to a binding of the original object are not reflected
 *     in the clone, but changes to e.g the type or template etc. are.</li>
 * </ul>
 * 
 * Each clone is created by first collecting the above mentioned settings and then creating
 * a new instance with the normal constructor function. As a result, any side effects of
 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
 * 
 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
 * They usually will first call <code>clone()</code> on the super class and then modify the
 * returned clone accordingly.
 * 
 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
 * It is determined automatically for the root object (and its non-existance also serves as
 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned object id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @param {Object} [oOptions] configuration object
 * @return {sap.ui.base.ManagedObject} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.clone = function(sIdSuffix,aLocalIds,oOptions) { return new sap.ui.base.ManagedObject(); };

/**
 * Creates a new ManagedObject from the given data.
 * 
 * If vData is a managed object already, that object is returned.
 * If vData is an object (literal), then a new object is created with vData as settings.
 * The type of the object is either determined by a "Type" entry in the vData or
 * by a type information in the oKeyInfo object
 * @param {sap.ui.base.ManagedObject|object} vData the data to create the object from
 * @param {object} oKeyInfo
 * @public
 * @static
 * 
 */
sap.ui.base.ManagedObject.create = function(vData,oKeyInfo) {  };

/**
 * Cleans up the resources associated with this object and all its aggregated children.
 * 
 * After an object has been destroyed, it can no longer be used in!
 * 
 * Applications should call this method if they don't need the object any longer.
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.destroy = function(bSuppressInvalidate) {  };

/**
 * Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName</code> and afterwards empties the
 * aggregation.
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.destroyAggregation = function(sAggregationName,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'formatError' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachFormatError = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachParseError = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'validationError' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachValidationError = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'validationSuccess' event of this <code>sap.ui.base.ManagedObject</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachValidationSuccess = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Creates a new subclass of class sap.ui.base.ManagedObject with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.ManagedObject.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Searches and returns an array of child elements and controls which are
 * referenced within an aggregation or aggregations of child elements/controls.
 * This can be either done recursive or not.
 * <br>
 * <b>Take care: this operation might be expensive.</b>
 * @param {boolean}
 *          bRecursive true, if all nested children should be returned.
 * @return {sap.ui.base.ManagedObject[]} array of child elements and controls
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.findAggregatedObjects = function(bRecursive) { return new Array(); };

/**
 * Fire event formatError to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireFormatError = function(mArguments) { return new sap.ui.base.ManagedObject(); };

/**
 * Fire event parseError to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireParseError = function(mArguments) { return new sap.ui.base.ManagedObject(); };

/**
 * Fire event validationError to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireValidationError = function(mArguments) { return new sap.ui.base.ManagedObject(); };

/**
 * Fire event validationSuccess to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireValidationSuccess = function(mArguments) { return new sap.ui.base.ManagedObject(); };

/**
 * Returns an aggregation of the managed object with a given sAggregationName
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject | Array}
 * 			  oDefaultForCreation the object that is used in case the current aggregation is empty
 * @type sap.ui.base.ManagedObject|Array
 * @return the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getAggregation = function(sAggregationName,oDefaultForCreation) { return new sap.ui.base.ManagedObject(); };

/**
 * Returns an association of the managed object with a given sAssociationName
 * @param {string} sAssociationName the name of the association
 * @param {object}
 * 			  oDefaultForCreation the object that is used in case the current aggregation is empty (only null or empty array allowed)
 * @return {string | string[]} the ID of the associated managed object or an array of such IDs; may be null if the association has not been populated
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getAssociation = function(sAssociationName,oDefaultForCreation) { return ""; };

/**
 * Get the binding object for a specific aggregation/property
 * @param {string} sName the name of the property or aggregation
 * @return {sap.ui.model.Binding} the binding for the given name
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getBinding = function(sName) { return new sap.ui.model.Binding(); };

/**
 * Get the binding context of this object for the given model name.
 * 
 * If the object does not have a binding context set on itself and has no own Model set,
 * it will use the first binding context defined in its parent hierarchy.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
 * @param {string} [sModelName] the name of the model or <code>undefined</code>
 * @return {Object} the binding context of this object
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getBindingContext = function(sModelName) { return null; };

/**
 * Returns the binding infos for the given property or aggregation. The binding info contains information about path, binding object, format options,
 * sorter, filter etc. for the property or aggregation.
 * @param {string} sName the name of the property or aggregation
 * @returns {object} the binding info object, containing at least a path property
 *                   and, dependant of the binding type, additional properties
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getBindingInfo = function(sName) { return new Object(); };

/**
 * Get the binding path for a specific aggregation/property
 * @param {string} sName the name of the property or aggregation
 * @return {string} the binding path for the given name
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getBindingPath = function(sName) { return ""; };

/**
 * Returns the parent managed object as new eventing parent to enable control event bubbling
 * or <code>null</code> if this object hasn't been added to a parent yet.
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getEventingParent = function() { return new sap.ui.base.EventProvider(); };

/**
 * Returns the object's Id.
 * @return {string} the objects's Id.
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.base.ManagedObject.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.base.ManagedObject.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get the model to be used for data bindings with the given model name.
 * If the object does not have a model set on itself, it will use the first
 * model defined in its parent hierarchy.
 * 
 * The name can be omitted to reference the default model or it must be a non-empty string.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * @param {string|undefined} [sName] name of the model to be retrieved
 * @return {sap.ui.model.Model} oModel
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getModel = function(sName) { return new sap.ui.model.Model(); };

/**
 * Get the object binding object for a specific model
 * @param {string} sModelName the name of the model
 * @return {sap.ui.model.Binding} the element binding for the given model name
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getObjectBinding = function(sModelName) { return new sap.ui.model.Binding(); };

/**
 * Returns the origin info on the property value of the given property name
 * @param {string} sPropertyName the name of the property
 * @return {object} a map of properties describing the origin of this property value or null
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getOriginInfo = function(sPropertyName) { return new Object(); };

/**
 * Returns the parent managed object or <code>null</code> if this object hasn't been added to a parent yet.
 * @return {sap.ui.base.ManagedObject} The parent managed object or <code>null</code>
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getParent = function() { return new sap.ui.base.ManagedObject(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * @param {string} sPropertyName the name of the property
 * @type any
 * @return the value of the property
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getProperty = function(sPropertyName) { return null; };

/**
 * Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).
 * 
 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
 * @return {boolean} whether a model reference exists or not
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.hasModel = function() { return false; };

/**
 * Checks for the provided managed object <code>oObject</code> in the aggregation
 * named <code>sAggregationName</code> and returns its index if found, or -1
 * otherwise. Returns -2 if the given named aggregation is not a multiple one
 * (and does not contain the given child).
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject}
 *            oObject the ManagedObject whose index is looked for.
 * @return {int} the index of the provided managed object in the aggregation.
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.indexOfAggregation = function(sAggregationName,oObject) { return 0; };

/**
 * Inserts managed object <code>oObject</code> to the aggregation named <code>sAggregationName</code> at
 * position <code>iIndex</code>. Please note that this does not work as expected when an object
 * is added that is already part of the aggregation. In order to change the index of an object
 * inside an aggregation, first remove the object, then insert again.
 * @param {string}
 *            sAggregationName the string identifying the aggregation the managed object <code>oObject</code>
 *            should be inserted into.
 * @param {sap.ui.base.ManagedObject}
 *            oObject the ManagedObject to add; if empty, nothing is inserted.
 * @param {int}
 *            iIndex the <code>0</code>-based index the managed object should be inserted at; for a negative
 *            value <code>iIndex</code>, <code>oObject</code> is inserted at position 0; for a value
 *            greater than the current size of the aggregation, <code>oObject</code> is inserted at
 *            the last position
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject as well as the added child are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.insertAggregation = function(sAggregationName,oObject,iIndex,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.invalidate = function() {  };

/**
 * Find out whether a property or aggregation is bound
 * @param {string} sName the name of the property or aggregation
 * @return {boolean} whether a binding exists for the given name
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.isBound = function(sName) { return false; };

/**
 * Returns whether rerendering is currently suppressed on this ManagedObject
 * @return boolean
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.isInvalidateSuppressed = function() {  };

/**
 *  This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding.
 *  In this case and if the aggregation is a tree node the overridden method should then return true.
 *  If true is returned the tree binding will be used instead of the list binding.
 *  @param {string} sName the aggregation to bind (e.g. nodes for a tree managed object)
 *  @return {boolean} whether tree binding should be used or list binding. Default is false. Override method to change this behavior.
 *  @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.isTreeBinding = function(sName) { return false; };

/**
 * Removes an object from the aggregation named <code>sAggregationName</code>.
 * @param {string}
 *            sAggregationName the string identifying the aggregation the ManagedObject should be removed from
 * @param {int | string | sap.ui.base.ManagedObject}
 *            vObject the position or ID of the ManagedObject to remove or the ManagedObject itself; if <code>vObject</code> is invalid,
 *            a negative value or a value greater or equal than the current size of the aggregation, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type sap.ui.base.ManagedObject
 * @return the removed object or null
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAggregation = function(sAggregationName,vObject,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Removes all the controls in the 0..n-aggregation named <code>sAggregationName</code> (and returns them in an array).<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type Array
 * @return an array of the removed elements (might be empty)
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAllAggregation = function(sAggregationName,bSuppressInvalidate) { return null; };

/**
 * Removes all the objects in the 0..n-association named <code>sAssociationName</code> (and returns them in an array).<br/>
 * @param {string}
 *            sAssociationName the name of the association
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type Array
 * @return an array with the IDs of the removed objects (might be empty)
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAllAssociation = function(sAssociationName,bSuppressInvalidate) { return null; };

/**
 * Removes a ManagedObject from the association named <code>sAssociationName</code>.
 * @param {string}
 *            sAssociationName the string identifying the association the ManagedObject should be removed from.
 * @param {int | string | sap.ui.base.ManagedObject}
 *            vObject the position or ID of the ManagedObject to remove or the ManagedObject itself; if <code>vObject</code> is invalid input,
 *            a negative value or a value greater or equal than the current size of the association, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the managed object is not marked as changed
 * @return the ID of the removed ManagedObject or null
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAssociation = function(sAssociationName,vObject,bSuppressInvalidate) {  };

/**
 * Sets an aggregation for the managed object
 * @param {string}
 *            sAggregationName name of the aggregation
 * @param {object}
 *            oObject the managed object that is set as an aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.setAggregation = function(sAggregationName,oObject,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets an association for the managed object
 * @param {string}
 *            sAssociationName name of the association
 * @param {string | sap.ui.base.ManagedObject}
 *            sId the ID of the managed object that is set as an association, or the managed object itself or null
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the managed objects invalidate method is not called
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.setAssociation = function(sAssociationName,sId,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Set the binding context for this ManagedObject for the model with the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
 * @param {Object} oContext the new binding context for this object
 * @param {string} [sModelName] the name of the model to set the context for or <code>undefined</code>
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.setBindingContext = function(oContext,sModelName) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets or unsets a model for the given model name for this ManagedObject.
 * 
 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
 * When the name is omitted, the default model is set/unset.
 * 
 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
 * with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model
 * with that name, this ManagedObject will immediately inherit that model from its ancestor.
 * 
 * All local bindings that depend on the given model name, are updated (created if the model references
 * became complete now; updated, if any model reference has changed; removed if the model references
 * became incomplete now).
 * 
 * Any change (new model, removed model, inherited model) is also applied to all aggregated descendants
 * as long as a descendant doesn't have its own model set for the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * Note: By design, it is not possible to hide an inherited model by setting a <code>null</code> or
 * <code>undefined</code> model. Applications can set an empty model to achieve the same.
 * 
 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
 * @param {sap.ui.model.Model} oModel the model to be set or <code>null</code> or <code>undefined</code>
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.setModel = function(oModel,sName) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets a new value for the given property <code>sPropertyName</code> and marks
 * this object as changed. If the given <code>oValue</code> equals the
 * current value, nothing happens.
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     oValue value to set the property to
 * @param {boolean} [bSuppressInvalidate] if true, the managed is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * TODO better name bSuppressInvalidate positive, e.g. "bStayValid"
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.setProperty = function(sPropertyName,oValue,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Returns a simple string representation of this managed object.
 * 
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string description of this managed object
 * 
 */
sap.ui.base.ManagedObject.prototype.toString = function() { return ""; };

/**
 * Unbind the aggregation from the model
 * @param {string} sName the name of the aggregation
 * @param {boolean} bSuppressReset whether the reset to empty aggregation when unbinding should be suppressed
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindAggregation = function(sName,bSuppressReset) { return new sap.ui.base.ManagedObject(); };

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 * @deprecated Since 1.11.1, please use unbindElement instead.
 * @param {string} [sModelName] name of the model to remove the context for.
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindContext = function(sModelName) { return new sap.ui.base.ManagedObject(); };

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 * @param {string} [sModelName] name of the model to remove the context for.
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindObject = function(sModelName) { return new sap.ui.base.ManagedObject(); };

/**
 * Unbind the property from the model
 * @param {string} sName the name of the property
 * @param {boolean} bSuppressReset whether the reset to the default value when unbinding should be suppressed
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindProperty = function(sName,bSuppressReset) { return new sap.ui.base.ManagedObject(); };

/**
 * Checks whether the given value is of the proper type for the given aggregation name.
 * @param {string} sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject|any} oObject the aggregated object or a primitive value
 * @param {boolean} bMultiple whether the aggregation must have cardinality 0..n
 * @return {sap.ui.base.ManagedObject|any} the passed object
 * @throws Error if no aggregation with the given name is found or the given value does not fit to the aggregation type
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.validateAggregation = function(sAggregationName,oObject,bMultiple) { return new sap.ui.base.ManagedObject(); };

/**
 * Checks whether the given value is of the proper type for the given property name. In case null or undefined is
 * passed, the default value for this property is returned.
 * @param {string} sPropertyName the name of the property
 * @param {any} oValue the value
 * @return {any} the passed value or the property's default value if null or undefined was passed
 * @throws Error if no property with the given name is found or the given value does not fit to the property type
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.validateProperty = function(sPropertyName,oValue) { return null; };


// ---- sap.ui.base.Metadata --------------------------------------------------------------------------

/**
 * Creates a new metadata object from the given static infos.
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oClassInfo info to construct the class and its metadata from
 * @class Metadata for a class.
 * @version 1.26.9
 * @since 0.8.6
 * @public
 * 
 */
sap.ui.base.Metadata = function(sClassName,oClassInfo) {};
/**
 * Returns an array with the names of all public methods declared by this class
 * and its ancestors.
 * @return {string[]} array with names of all public methods provided by this class and its ancestors
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getAllPublicMethods = function() { return new Array(); };

/**
 * Returns the (constructor of the) class described by this metadata object.
 * @return {function} class described by this metadata
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getClass = function() { return function() {}; };

/**
 * Returns the fully qualified name of the class that is described by this metadata object
 * @return {string} name of the described class
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getName = function() { return ""; };

/**
 * Returns the metadata object of the base class of the class described by this metadata object
 * or null if the class has no (documented) base class.
 * @return {sap.ui.base.Metadata} metadata of the base class
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getParent = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns an array with the names of the public methods declared by this class.
 * @return {string[]} array with names of public methods declared by this class
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getPublicMethods = function() { return new Array(); };

/**
 * Whether this class is deprecated and should not be used any more 
 * @return {boolean} whether this class is considered deprecated
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.isDeprecated = function() { return false; };

/**
 * Checks whether the class described by this object or one of its ancestors
 * implements the given interface.
 * @param {string} sInterface name of the interface to test for (in dot notation)
 * @return {boolean} whether this class implements the interface
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.isInstanceOf = function(sInterface) { return false; };


// ---- sap.ui.base.Object --------------------------------------------------------------------------

/**
 * Constructor for a sap.ui.base.Object.
 * @class Base class for all SAPUI5 Objects
 * @abstract
 * @version 1.26.9
 * @public
 * 
 */
sap.ui.base.Object = function() {};
/**
 * Creates metadata for a given class and attaches it to the constructor and prototype of that class.
 * 
 * After creation, metadata can be retrieved with getMetadata().
 * 
 * The static info can at least contain the following entries:
 * <ul>
 * <li>baseType: {string} fully qualified name of a base class or empty
 * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}
 * </ul>
 * @param {string} sClassName name of an (already declared) constructor function
 * @param {object} oStaticInfo static info used to create the metadata object
 * @param {string} oStaticInfo.baseType qualified name of a base class
 * @param {string[]} oStaticInfo.publicMethods array of names of public methods
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 * @return {sap.ui.base.Metadata} the created metadata object
 * @public
 * @static
 * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})
 * 
 */
sap.ui.base.Object.defineClass = function(sClassName,oStaticInfo,FNMetaImpl) { return new sap.ui.base.Metadata(); };

/**
 * Destructor method for objects
 * @public
 * 
 */
sap.ui.base.Object.prototype.destroy = function() {  };

/**
 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain three kinds of informations:
 * <ul>
 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
 * and might contain the following information
 * <ul>
 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
 * facade of the class</li>
 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
 * </ul>
 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
 * </li>
 * 
 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
 * If no constructor function is given, the framework creates a default implementation that delegates all
 * its arguments to the constructor function of the base class.
 * </li>
 * 
 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
 * make sense to use primitive values here other than to declare public constants.
 * </li>
 * 
 * </ul>
 * 
 * The prototype object of the newly created class uses the same prototype as instances of the base class
 * (prototype chaining).
 * 
 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
 * itself.
 * 
 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
 * can be specified. Instances of that class will be used to represent metadata for the newly created class
 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] structured object with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @since 1.3.1
 * 
 */
sap.ui.base.Object.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the public interface of the object.
 * @return {sap.ui.base.Interface} the public interface of the object
 * @public
 * 
 */
sap.ui.base.Object.prototype.getInterface = function() { return new sap.ui.base.Interface(); };


// ---- sap.ui.base.ObjectPool --------------------------------------------------------------------------

/**
 * Creates an ObjectPool instance based on the given oObjectClass.&lt;br/&gt;
 * If there is a free pooled instance, returns that one, otherwise creates a new one.&lt;br/&gt;
 * In order to be maintained by the ObjectPool, oObjectClass must implement
 * methods described in the class description.
 * @param {function} oObjectClass constructor for the class of objects that this pool should manage
 * @class Manages a pool of objects all of the same type;
 * the type has to be specified at pool construction time.
 * 
 * Maintains a list of free objects of the given type.
 * If {@link sap.ui.base.ObjectPool.prototype.borrowObject} is called, an existing free object
 * is taken from the pool and the <code>init</code> method is called on this
 * object.
 * 
 * When no longer needed, any borrowed object should be returned to
 * the pool by calling {@link #returnObject}. At that point in time,
 * the reset method is called on the object and the object is added to the
 * list of free objects.
 * 
 * See {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.
 * 
 * Example:
 * <pre>
 *   this.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);
 *   var oEvent = this.oEventPool.borrowObject(iEventId, mParameters);
 * </pre>
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.base.ObjectPool = function(oObjectClass) {};
/**
 * Borrows a free object from the pool. Any arguments to this method
 * are forwarded to the init method of the borrowed object.
 * @param {any} [any] optional initialization parameters for the borrowed object
 * @return {object} the borrowed object of the same type that has been specified for this pool
 * @public
 * 
 */
sap.ui.base.ObjectPool.prototype.borrowObject = function(any) { return new Object(); };

/**
 * Creates a new subclass of class sap.ui.base.ObjectPool with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.ObjectPool.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.base.ObjectPool.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.base.ObjectPool.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns an object to the pool. The object must have been borrowed from this
 * pool beforehand. The reset method is called on the object before it is added
 * to the set of free objects.
 * @param {object} oObject the object to return to the pool
 * @public
 * 
 */
sap.ui.base.ObjectPool.prototype.returnObject = function(oObject) {  };


// ---- sap.ui.base.Poolable --------------------------------------------------------------------------

/**
 * Called by the object pool when this instance will be actived for a caller.
 * The same method will be called after a new instance has been created by an otherwise
 * exhausted pool.
 * 
 * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}
 * all arguments will be propagated to this method.
 * @public
 * 
 */
sap.ui.base.Poolable.prototype.init = function() {  };

/**
 * Called by the object pool when an instance is returned to the pool.
 * While no specific implementation is required, poolable objects in general
 * should clean all caller specific state (set to null) in this method to
 * avoid memory leaks and to enforce garbage collection of the caller state.
 * @public
 * 
 */
sap.ui.base.Poolable.prototype.reset = function() {  };


// ---- sap.ui.core --------------------------------------------------------------------------

/**
 * If called on the prototype of a sap.ui.core.Element, the Element (and its prototype) is extended
 * to support custom style classes.
 * 
 * WARNING: only to be used WITHIN a control implementation. An application cannot add style class support by calling this method!
 * 
 * The methods "addStyleClass", "removeStyleClass", toggleStyleClass and "hasStyleClass" are added to the Element and the clone() method
 * is extended to also clone the custom classes.
 * 
 * Usage example:
 * jQuery.sap.require("sap.ui.core.CustomStyleClassSupport");
 * sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutCell.prototype);
 * 
 * Each renderer handling the given Element MUST then call
 * renderManager.writeClasses(oElement);
 * when writing the root tag of the Element. This makes sure the classes are written to the HTML.
 * @public
 * 
 * @memberof sap.ui.core
 */
sap.ui.core.CustomStyleClassSupport = function() {  };


// ---- sap.ui.core.AccessibleRole --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.AccessibleRole.toString = function() { return ""; };

// ---- sap.ui.core.AppCacheBuster --------------------------------------------------------------------------

/**
 * Converts the given URL if it matches a URL in the cachebuster index. 
 * If not then the same URL will be returned. To prevent URLs from being
 * modified by the application cachebuster you can implement the function
 * <code>sap.ui.core.AppCacheBuster.handleURL</code>. 
 * @param {string} sUrl any URL
 * @return {string} modified URL when matching the index or unmodified when not
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.convertURL = function(sUrl) { return ""; };

/**
 * Callback function which can be overwritten to programmatically decide
 * whether to rewrite the given URL or not. 
 * @param {string} sUrl any URL
 * @return {boolean} <code>true</code> to rewrite or <code>false</code> to ignore 
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.handleURL = function(sUrl) { return false; };

/**
 * Normalizes the given URL and make it absolute.
 * @param {string} sUrl any URL
 * @return {string} normalized URL
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.normalizeURL = function(sUrl) { return ""; };

/**
 * Registers an application. Loads the cachebuster index file from this
 * locations. All registered files will be considered by the cachebuster
 * and the URLs will be prefixed with the timestamp of the index file.
 * @param {string} base URL of an application providing a cachebuster index file
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.register = function(base) {  };


// ---- sap.ui.core.BarColor --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.BarColor.toString = function() { return ""; };

// ---- sap.ui.core.BusyIndicator --------------------------------------------------------------------------

/**
 * Registers a handler for the "close" event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.attachClose = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Registers a handler for the "open" event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.attachOpen = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Unregisters a handler for the "close" event
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.detachClose = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Unregisters a handler for the "open" event
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.detachOpen = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Removes the BusyIndicator from the screen
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.hide = function() {  };

/**
 * Displays the BusyIndicator and starts blocking all user input.
 * This only happens after some delay and if after that delay the BusyIndicator.hide() has not yet been called in the meantime.
 * There is a certain default value for the delay, but that one can be overridden.
 * @public
 * @param {int} [iDelay] The delay in milliseconds before opening the BusyIndicator. It is not opened if hide() is called before end of the delay. If no delay (or no valid delay) is given, the default value is used.
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.show = function(iDelay) {  };


// ---- sap.ui.core.Collision --------------------------------------------------------------------------


// ---- sap.ui.core.Component --------------------------------------------------------------------------

/**
 * Creates and initializes a new component with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
 * for a general description of this argument.
 * @param {string}
 *            [sId] optional id for the new control; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * @class Base Class for Component.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.26.9
 * @since 1.9.2
 * 
 */
sap.ui.core.Component = function(sId,mSettings) {};
/**
 * Cleans up the component instance before destruction.
 * 
 * Applications must not call this hook method directly, it is called by the
 * framework when the element is {@link #destroy destroyed}.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * cleanup.
 * @protected
 * 
 */
sap.ui.core.Component.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.Component with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Component.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns user specific data object
 * @return {object} componentData
 * @public
 * @since 1.15.0
 * 
 */
sap.ui.core.Component.prototype.getComponentData = function() { return new Object(); };

/**
 * Returns the event bus of this component.
 * @return {sap.ui.core.EventBus} the event bus
 * @since 1.20.0
 * @public
 * 
 */
sap.ui.core.Component.prototype.getEventBus = function() { return new sap.ui.core.EventBus(); };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.Component.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.Component.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Component.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the Component instance in whose "context" the given ManagedObject has been created
 * or <code>undefined</code>.
 * 
 * This is a convenience wrapper around {@link sap.ui.core.Component.getOwnerIdFor Component.getOwnerIdFor}. 
 * If the owner Id cannot be determined for the reasons document with <code>getOwnerForId</code> 
 * or when the Component for the determined Id no longer exists, <code>undefined</code> 
 * will be returned.
 * @param {sap.ui.base.ManagedObject} oObject Object to retrieve the owner Component for
 * @return {sap.ui.core.Component} the owner Component or <code>undefined</code>.
 * @static
 * @public
 * @since 1.25.1 
 * 
 */
sap.ui.core.Component.getOwnerComponentFor = function(oObject) { return new sap.ui.core.Component(); };

/**
 * Returns the Id of the object in whose "context" the given ManagedObject has been created.
 * 
 * For objects that are not ManagedObjects or for which the owner is unknown, 
 * <code>undefined</code> will be returned as owner Id.
 * 
 * <strong>Note</strong>: Ownership for objects is only checked by the framework at the time 
 * when they are created. It is not checked or updated afterwards. And it can only be detected 
 * while the {@link sap.ui.core.Component.runAsOwner Component.runAsOwner} function is executing. 
 * Without further action, this is only the case while the content of an UIComponent is
 * {@link sap.ui.core.UIComponent.createContent constructed} or when a 
 * {@link sap.ui.core.routing.Router Router} creates a new View and its content.
 * 
 * <strong>Note</string>: This method does not guarantee that the returned owner Id belongs
 * to a Component. Currently, it always does. But future versions of UI5 might introduce a 
 * more fine grained ownership concept, e.g. taking Views into account. Callers that 
 * want to deal only with components as owners, should use the following method:
 * {@link sap.ui.core.Component.getOwnerComponentFor Component.getOwnerComponentFor}.
 * It guarantees that the returned object (if any) will be a Component. 
 * 
 * <strong>Further note</strong> that only the Id of the owner is recorded. In rare cases, 
 * when the lifecycle of a ManagedObject is not bound to the lifecycle of its owner,
 * (e.g. by the means of aggregations), then the owner might have been destroyed already
 * whereas the ManagedObject is still alive. So even the existence of an owner Id is 
 * not a guarantee for the existence of the corresponding owner.
 * @param {sap.ui.base.ManagedObject} oObject Object to retrieve the owner Id for
 * @return {string} the Id of the owner or <code>undefined</code>
 * @static
 * @public
 * @since 1.15.1 
 * 
 */
sap.ui.core.Component.getOwnerIdFor = function(oObject) { return ""; };

/**
 * Initializes the Component instance after creation.
 * 
 * Applications must not call this hook method directly, it is called by the
 * framework while the constructor of an Component is executed.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * initialization.
 * @protected
 * 
 */
sap.ui.core.Component.prototype.init = function() {  };

/**
 * The hook which gets called when the static configuration of the component 
 * has been changed by some configuration extension.
 * @param {string} sConfigKey The error message.
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onConfigChange = function(sConfigKey) {  };

/**
 * The window error hook. Override this method in your Component class implementation 
 * to listen to unhandled errors.
 * @param {string} sMessage The error message.
 * @param {string} sFile The file where the error occurred
 * @param {number} iLine The line number of the error
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onError = function(sMessage,sFile,iLine) {  };

/**
 * The window before unload hook. Override this method in your Component class 
 * implementation, to handle cleanup before the real unload or to prompt a question 
 * to the user, if the component should be exited.
 * @return {string} return a string if a prompt should be displayed to the user 
 *                  confirming closing the component (e.g. when the component is not yet saved).
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onWindowBeforeUnload = function() { return ""; };

/**
 * The window unload hook. Override this method in your Component class 
 * implementation, to handle cleanup of the component once the window
 * will be unloaded (e.g. closed).
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onWindowUnload = function() {  };

/**
 * Calls the function <code>fn</code> once and marks all ManagedObjects
 * created during that call as "owned" by this Component.
 * 
 * Nested calls of this method are supported (e.g. inside a newly created,
 * nested component). The currently active owner Component will be remembered 
 * before executing <code>fn</code> and restored afterwards.
 * @param {function} fn the function to execute
 * @return {any} result of function <code>fn</code>
 * @since 1.25.1
 * @public
 * @experimental
 * 
 */
sap.ui.core.Component.prototype.runAsOwner = function(fn) { return null; };


// ---- sap.ui.core.ComponentContainer --------------------------------------------------------------------------

/**
 * Constructor for a new ComponentContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getUrl url} : sap.ui.core.URI</li>
 * <li>{@link #getSettings settings} : object</li>
 * <li>{@link #getPropagateModel propagateModel} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Component Container
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ComponentContainer = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ComponentContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Id of the element which is the current target of the <code>component</code> association, or null
 * 
 * The component displayed in this ComponentContainer.
 * @return {sap.ui.core.UIComponent}
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getComponent = function() { return new sap.ui.core.UIComponent(); };

/**
 * Getter for property <code>height</code>.
 * Container height in CSS size
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.ui.core.ComponentContainer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.ComponentContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * Component name, the package where the component is contained. The property can only be applied initially.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>propagateModel</code>.
 * Defines whether binding information is propagated to the component.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>propagateModel</code>
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getPropagateModel = function() { return false; };

/**
 * Getter for property <code>settings</code>.
 * The settings object passed to the component when created. The property can only be applied initially.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>settings</code>
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getSettings = function() { return new Object(); };

/**
 * Getter for property <code>url</code>.
 * The URL of the component. The property can only be applied initially.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>url</code>
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getUrl = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>width</code>.
 * Container width in CSS size
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for the associated <code>component</code>.
 * @param {sap.ui.core.UIComponent} oComponent Id of an element which becomes the new target of this component association. Alternatively, an element instance may be given.
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setComponent = function(oComponent) { return new sap.ui.core.ComponentContainer(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setHeight = function(sHeight) { return new sap.ui.core.ComponentContainer(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setName = function(sName) { return new sap.ui.core.ComponentContainer(); };

/**
 * Setter for property <code>propagateModel</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPropagateModel new value for property <code>propagateModel</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setPropagateModel = function(bPropagateModel) { return new sap.ui.core.ComponentContainer(); };

/**
 * Setter for property <code>settings</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oSettings new value for property <code>settings</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setSettings = function(oSettings) { return new sap.ui.core.ComponentContainer(); };

/**
 * Setter for property <code>url</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sUrl new value for property <code>url</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setUrl = function(sUrl) { return new sap.ui.core.ComponentContainer(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setWidth = function(sWidth) { return new sap.ui.core.ComponentContainer(); };


// ---- sap.ui.core.Configuration --------------------------------------------------------------------------

/**
 * Creates a new Configuration object.
 * @class Collects and stores the configuration of the current environment.
 * 
 * The Configuration is initialized once when the {@link sap.ui.core.Core} is created.
 * There are different ways to set the environment configuration (in ascending priority):
 * <ol>
 * <li>System defined defaults
 * <li>Server wide defaults, read from /sap-ui-config.json
 * <li>Properties of the global configuration object window["sap-ui-config"]
 * <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag
 * <li>Individual data-sap-ui-xyz attributes of the bootstrap tag
 * <li>Using URL parameters
 * <li>Setters in this Configuration object (only for some parameters)
 * </ol>
 * 
 * That is, attributes of the DOM reference override the system defaults, URL parameters
 * override the DOM attributes (where empty URL parameters set the parameter back to its
 * system default). Calling setters at runtime will override any previous settings
 * calculated during object creation.
 * 
 * The naming convention for parameters is:
 * <ul>
 * <li>in the URL : sap-ui-<i>PARAMETER-NAME</i>="value"
 * <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME</i>="value"
 * </ul>
 * where <i>PARAMETER-NAME</i> is the name of the parameter in lower case.
 * 
 * Values of boolean parameters are case insensitive where "true" and "x" are interpreted as true.
 * @extends sap.ui.base.Object
 * @constructor
 * @public
 * 
 */
sap.ui.core.Configuration = function() {};
/**
 * Creates a new subclass of class sap.ui.core.Configuration with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns whether the accessibility mode is used or not
 * @return {boolean} whether the accessibility mode is used or not
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAccessibility = function() { return false; };

/**
 * Returns whether the animations are globally used
 * @return {boolean} whether the animations are globally used
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAnimation = function() { return false; };

/**
 * Base URLs to AppCacheBuster Etag-Index files
 * @returns {string[]} array of base URLs
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAppCacheBuster = function() { return new Array(); };

/**
 * Object defining the callback hooks for the AppCacheBuster like e.g. 
 * <code>handleURL</code>, <code>onIndexLoad</code> or <code>onIndexLoaded</code>.
 * @returns {object} object containing the callback functions for the AppCacheBuster
 * @public
 * @experimental Since 1.27.0
 * 
 */
sap.ui.core.Configuration.prototype.getAppCacheBusterHooks = function() { return new Object(); };

/**
 * The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)
 * @returns {string} sync | async
 * @public
 * @experimental Since 1.12.5
 * 
 */
sap.ui.core.Configuration.prototype.getAppCacheBusterMode = function() { return ""; };

/**
 * The name of the application to start or empty
 * @returns {string} name of the application
 * @public
 * @experimental Since 1.13.2
 * @deprecated Since 1.15.1. Please use the rootComponent configuration option {@link sap.ui.core.Configuration#getRootComponent}.
 * 
 */
sap.ui.core.Configuration.prototype.getApplication = function() { return ""; };

/**
 * Returns the used compatibility version for the given feature.
 * @param {string} sFeature the key of desired feature
 * @return {jQuery.sap.Version} the used compatibility version
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getCompatibilityVersion = function(sFeature) { return new jQuery.sap.Version(); };

/**
 * Return whether the controller code is deactivated. During design mode the 
 * @returns {boolean} whether the activation of the controller code is suppressed or not
 * @since 1.26.4
 * @experimental Since 1.26.4
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getControllerCodeDeactivated = function() { return false; };

/**
 * Returns whether the page runs in debug mode
 * @return {boolean} whether the page runs in debug mode
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getDebug = function() { return false; };

/**
 * Return whether the design mode is active or not.
 * @returns {boolean} whether the design mode is active or not.
 * @since 1.13.2
 * @experimental Since 1.13.2 
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getDesignMode = function() { return false; };

/**
 * Returns the format locale string with language and region code. Falls back to 
 * language configuration, in case it has not been explicitly defined.
 * @return {string} the format locale string with language and country code
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getFormatLocale = function() { return ""; };

/**
 * Returns a configuration object that bundles the format settings of UI5.
 * @return {sap.ui.core.Configuration.FormatSettings} A FormatSettings object.
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getFormatSettings = function() { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Returns whether the UI5 control inspector is displayed
 * Has only an effect when the sap-ui-debug module has been loaded
 * @return {boolean} whether the UI5 control inspector is displayed
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getInspect = function() { return false; };

/**
 * Returns the language string with language and country code
 * @return {string} the language string with language and country code
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getLanguage = function() { return ""; };

/**
 * Returns the active locale for the current session. 
 * The locale is derived from the {@link #getLanguage language} property.
 * @return {sap.ui.core.Locale} the locale
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getLocale = function() { return new sap.ui.core.Locale(); };

/**
 * Returns a metadata object for class sap.ui.core.Configuration.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns whether there should be an exception on any duplicate element IDs
 * @return {boolean} whether there should be an exception on any duplicate element IDs
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getNoDuplicateIds = function() { return false; };

/**
 * Returns whether the text origin information is collected
 * @return {boolean} whether the text info is collected
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getOriginInfo = function() { return false; };

/**
 * The name of the root component to start or empty
 * @returns {string} name of the root component
 * @public
 * @experimental Since 1.15.1
 * 
 */
sap.ui.core.Configuration.prototype.getRootComponent = function() { return ""; };

/**
 * Returns whether the page uses the RTL text direction.
 * 
 * If no mode has been explicitly set (neither true nor false),
 * the mode is derived from the current language setting.
 * @return {boolean} whether the page uses the RTL text direction
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getRTL = function() { return false; };

/**
 * Return whether the activation of the controller code is suppressed
 * @returns {boolean} whether the activation of the controller code is suppressed or not
 * @since 1.13.2
 * @experimental Since 1.13.2
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getSuppressDeactivationOfControllerCode = function() { return false; };

/**
 * Returns the theme name
 * @return {string} the theme name
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getTheme = function() { return ""; };

/**
 * Prefix to be used for automatically generated control IDs.
 * Default is a double underscore "__".
 * @returns {string} the prefix to be used
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getUIDPrefix = function() { return ""; };

/**
 * Returns the version of the framework.
 * 
 * Similar to <code>sap.ui.version</code>.
 * @return {jQuery.sap.Version} the version
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getVersion = function() { return new jQuery.sap.Version(); };

/**
 * WEINRE session ID
 * @returns {string} the ID to use for the WEINRE server
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getWeinreId = function() { return ""; };

/**
 * WEINRE server URL
 * @returns {string} the base URL of the WEINRE server
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getWeinreServer = function() { return ""; };

/**
 * Sets a new language tag to be used from now on for language/region dependent 
 * functionality (e.g. formatting, data types, translated texts, ...). 
 * 
 * When the language has changed, the Core will fire its 
 * {@link sap.ui.core.Core#event:localizationChanged localizationChanged} event.
 * 
 * The framework <strong>does not</strong> guarantee that already created, language 
 * dependent objects will be updated by this call. It therefore remains best practice 
 * for applications to switch the language early, e.g. before any language dependent 
 * objects are created. Applications that need to support more dynamic changes of 
 * the language should listen to the <code>localizationChanged</code> event and adapt 
 * all language dependent objects that they use (e.g. by rebuilding their UI).
 * 
 * Currently, the framework notifies the following objects about a change of the
 * localization settings before it fires the <code>localizationChanged</code> event:
 * 
 * <ul>
 * <li>date and number data types that are used in property bindings or composite 
 *     bindings in existing Elements, Controls, UIAreas or Components</li>
 * <li>ResourceModels currently assigned to the Core, an UIArea, Component, 
 *     Element or Control</li>
 * <li>Elements or Controls that implement the <code>onLocalizationChanged</code> hook. 
 * </ul>
 * 
 * It furthermore derives the RTL mode from the new language, if no explicit RTL
 * mode has been set. If the RTL mode changes, the following additional actions will be taken:
 * 
 * <ul>
 * <li>the URLs of already loaded library theme files will be changed</li>
 * <li>the <code>dir</code> attribute of the page will be changed to reflect the new mode.</li> 
 * <li>all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)</li> 
 * </ul>
 * @param {string} sLanguage the new language as a BCP47 compliant language tag; case doesn't matter
 *   and underscores can be used instead of a dashes to separate components (compatibility with Java Locale Ids)
 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
 * @experimental Since 1.11.1 - See method documentation for restrictions.
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.setLanguage = function(sLanguage) { return new sap.ui.core.Configuration(); };


// ---- sap.ui.core.Configuration.FormatSettings --------------------------------------------------------------------------

/**
 * @class Encapsulates configuration settings that are related to data formatting/parsing.
 * 
 * <b>Note:</b> When format configuration settings are modified through this class, 
 * UI5 only ensures that formatter objects created after that point in time will honor
 * the modifications. To be on the safe side, applications should do any modifications 
 * early in their lifecycle or recreate any model/UI that is locale dependent. 
 * @extends sap.ui.base.Object
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings = function() {};
/**
 * Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.FormatSettings.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the currently set date pattern or undefined if no pattern has been defined. 
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getDatePattern = function() {  };

/**
 * Returns the locale to be used for formatting. 
 * 
 * If no such locale has been defined, this method falls back to the language,
 * see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.
 * 
 * If any user preferences for date, time or number formatting have been set,
 * and if no format locale has been specified, then a special private use subtag
 * is added to the locale, indicating to the framework that these user preferences 
 * should be applied. 
 * @return {sap.ui.core.Locale} the format locale 
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getFormatLocale = function() { return new sap.ui.core.Locale(); };

/**
 * Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyDateFormat = function() {  };

/**
 * Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyNumberFormat = function() {  };

/**
 * Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyTimeFormat = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.Configuration.FormatSettings.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.FormatSettings.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getNumberSymbol = function() {  };

/**
 * Returns the currently set time pattern or undefined if no pattern has been defined.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getTimePattern = function() {  };

/**
 * Defines the preferred format pattern for the given date format style. 
 * Calling this method with a null or undefined pattern removes a previously set pattern. 
 * 
 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
 * 
 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
 * 
 * After changing the date pattern, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * @param {string} sStyle must be one of short, medium, long or full.
 * @param {string} sPattern the format pattern to be used in LDML syntax.
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public   
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setDatePattern = function(sStyle,sPattern) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Defines the day used as the first day of the week. 
 * The day is set as an integer value between 0 (Sunday) and 6 (Saturday).
 * Calling this method with a null or undefined symbol removes a previously set value.
 * 
 * If a value is defined, it will be preferred over values derived from the current locale.
 * 
 * Usually in the US the week starts on Sunday while in most European countries on Monday.
 * There are special cases where you want to have the first day of week set independent of the 
 * user locale.
 * 
 * After changing the first day of week, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * @param {number} iValue must be an integer value between 0 and 6
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public   
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setFirstDayOfWeek = function(iValue) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify one of the legacy ABAP date formats. 
 * 
 * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP 
 * format. When called with a null or undefined format id, any previously applied format will be removed.
 * 
 * After changing the legacy date format, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * 
 * Note: those date formats that are not based on the Gregorian calendar (Japanese date formats '7', '8' and '9', 
 * Islamic date formats 'A' and 'B' and Iranian date format 'C') are not yet supported by UI5. They are accepted 
 * by this method for convenience (user settings from ABAP system can be used without filtering), but they are 
 * ignored. Instead, the formats from the current format locale will be used and a warning will be logged.
 * @param {string} sFormatId id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyDateFormat = function(sFormatId) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify one of the legacy ABAP number format.
 * 
 * This method will modify the 'group' and 'decimal' symbols. When called with a null 
 * or undefined format id, any previously applied format will be removed.
 * 
 * After changing the legacy number format, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * @param {string} sFormatId id of the ABAP number format set (one of ' ','X','Y')
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyNumberFormat = function(sFormatId) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify one of the legacy ABAP time formats.
 * 
 * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP 
 * formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called 
 * with a null or undefined format id, any previously applied format will be removed.
 * 
 * After changing the legacy time format, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * @param {string} sFormatId id of the ABAP time format (one of '0','1','2','3','4')
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyTimeFormat = function(sFormatId) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Defines the string to be used for the given number symbol.
 * Calling this method with a null or undefined symbol removes a previously set symbol string.
 * Note that an empty string is explicitly allowed.  
 * 
 * If a symbol is defined, it will be preferred over symbols derived from the current locale.
 * 
 * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
 * 
 * After changing the number symbol, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * @param {string} sStyle must be one of decimal, group, plusSign, minusSign.
 * @param {string} sSymbol will be used to represent the given symbol type
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public   
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setNumberSymbol = function(sStyle,sSymbol) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Defines the preferred format pattern for the given time format style.
 * Calling this method with a null or undefined pattern removes a previously set pattern. 
 * 
 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
 * 
 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
 * 
 * After changing the time pattern, the framework tries to update localization 
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
 * for details and restrictions.
 * @param {string} sStyle must be one of short, medium, long or full.
 * @param {string} sPattern the format pattern to be used in LDML syntax.
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setTimePattern = function(sStyle,sPattern) { return new sap.ui.core.Configuration.FormatSettings(); };


// ---- sap.ui.core.Control --------------------------------------------------------------------------

/**
 * Creates and initializes a new control with the given <code>sId</code> and settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on the concrete
 * subclass and is described there. See {@link sap.ui.core.Element} for a general description of this
 * argument.
 * 
 * The settings supported by Control are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBusy busy} : boolean (default: false)</li>
 * <li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBusy busy} : boolean (default: false)</li>
 * <li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] optional id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new control
 * @public
 * @class Base Class for Controls.
 * @extends sap.ui.core.Element
 * @abstract
 * @version 1.26.9
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Control = function(sId,mSettings) {};
/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 *    .myRedTextButton {
 *       color: red;
 *    }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 * @param {string} sStyleClass the CSS class name to be added
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.addStyleClass = function(sStyleClass) { return new sap.ui.core.Control(); };

/**
 * Defines whether the user can select text inside this control.
 * Defaults to <code>true</code> as long as this method has not been called.
 * 
 * <b>Note:</b>This only works in IE and Safari; for Firefox the element's style must
 * be set to:
 * <pre>
 *   -moz-user-select: none;
 * </pre>
 * in order to prevent text selection.
 * @param {boolean} bAllow whether to allow text selection or not
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.allowTextSelection = function(bAllow) { return new sap.ui.core.Control(); };

/**
 * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles
 * DOM element replacements caused by re-rendering.
 * 
 * IMPORTANT:
 * This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using
 * SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
 * E.g. when working with a sap.ui.commons.Button, always use the Button's "press" event, not the native "click" event, because
 * "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.
 * 
 * In the event handler, "this" refers to the Control - not to the root DOM element like in jQuery. While the DOM element can
 * be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element
 * may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not
 * be done. E.g. use Control.addStyleClass() instead if the modification is of visual nature.
 * 
 * Use detachBrowserEvent() to remove the event handler(s) again.
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] A function to execute each time the event is triggered.
 * @param {object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.attachBrowserEvent = function(sEventType,fnHandler,oListener) { return new sap.ui.core.Control(); };

/**
 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional 
 * internal state.
 * 
 * The additionally cloned information contains:
 * <ul>
 * <li>browser event handlers attached with {@link #attachBrowserEvent}
 * <li>text selection behavior
 * <li>style classes added with {@link #addStyleClass}
 * </ul>
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.core.Element} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.core.Control.prototype.clone = function(sIdSuffix,aLocalIds) { return new sap.ui.core.Element(); };

/**
 * Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.
 * 
 * Note: listeners are only removed, if the same combination of event type, callback function 
 * and context object is given as in the call to <code>attachBrowserEvent</code>.
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] The function that is to be no longer executed.
 * @param {object} [oListener] The context object that was given in the call to attachBrowserEvent.
 * @public
 * 
 */
sap.ui.core.Control.prototype.detachBrowserEvent = function(sEventType,fnHandler,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Control.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>busy</code>.
 * Whether the control is currently in busy state.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>busy</code>
 * @public
 * 
 */
sap.ui.core.Control.prototype.getBusy = function() { return false; };

/**
 * Getter for property <code>busyIndicatorDelay</code>.
 * The delay in milliseconds, after which the busy indicator will show up for this control.
 * 
 * Default value is <code>1000</code>
 * @return {int} the value of property <code>busyIndicatorDelay</code>
 * @public
 * 
 */
sap.ui.core.Control.prototype.getBusyIndicatorDelay = function() { return 0; };

/**
 * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
 * 
 * By default, this is the Id of the control itself.
 * @return {string} Id to be used for the <code>labelFor</code> 
 * @public
 * 
 */
sap.ui.core.Control.prototype.getIdForLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Control.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Control.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a renderer for this control instance.
 * 
 * It is retrieved using the RenderManager as done during rendering.
 * @return {object} a Renderer suitable for this Control instance.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.getRenderer = function() { return new Object(); };

/**
 * Getter for property <code>visible</code>.
 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.core.Control.prototype.getVisible = function() { return false; };

/**
 * Returns true if the given style class string is valid and if this control has this style class set
 * via a previous call to addStyleClass().
 * @param {string} sStyleClass the style to check for
 * @type boolean
 * @return whether the given style has been set before
 * @public
 * 
 */
sap.ui.core.Control.prototype.hasStyleClass = function(sStyleClass) { return false; };

/**
 * Triggers rerendering of this element and its children.
 * 
 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
 * potentially result in rerendering of the whole sub tree.
 * @param {object} oOrigin
 * @protected
 * 
 */
sap.ui.core.Control.prototype.invalidate = function(oOrigin) {  };

/**
 * Check if the control is currently in busy state
 * @public
 * @deprecated Use getBusy instead
 * @return boolean
 * 
 */
sap.ui.core.Control.prototype.isBusy = function() {  };

/**
 * Function is called when the rendering of the control is completed.
 * 
 * Applications must not call this hook method directly, it is called by the framework.
 * 
 * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.onAfterRendering = function() {  };

/**
 * Function is called before the rendering of the control is started.
 * 
 * Applications must not call this hook method directly, it is called by the framework.
 * 
 * Subclasses of Control should override this hook to implement any necessary actions before the rendering.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.onBeforeRendering = function() {  };

/**
 * Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given
 * position (<code>oPosition</code>).
 * 
 * First it is checked whether <code>oRef</code> is a container element / control (has a
 * multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String
 * of such an container.
 * If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea
 * (if it does not yet exist implicitly a new UIArea is created),
 * 
 * The <code>oPosition</code> can be one of the following:
 * 
 * <ul>
 *  <li>"first": The control is added as the first element to the container.</li>
 *  <li>"last": The control is added as the last element to the container (default).</li>
 *  <li>"only": All existing children of the container are removed (not destroyed!) and the control is added as new child.</li>
 *  <li><i>index</i>: The control is added at the specified <i>index</i> to the container.</li>
 * </ul>
 * @param {string|Element|sap.ui.core.Control} oRef container into which the control should be put
 * @param {string|int} oPosition Describes the position where the control should be put into the container
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.placeAt = function(oRef,oPosition) { return new sap.ui.core.Control(); };

/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 * @param {string} sStyleClass the style to be removed
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.removeStyleClass = function(sStyleClass) { return new sap.ui.core.Control(); };

/**
 * Tries to replace its DOM reference by re-rendering.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.rerender = function() {  };

/**
 * Set the controls busy state.
 * @param {boolean} bBusy The new busy state to be set
 * @return {sap.ui.core.Control} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.setBusy = function(bBusy) { return new sap.ui.core.Control(); };

/**
 * Define the delay, after which the busy indicator will show up
 * @public
 * @param {int} iDelay The delay in ms
 * @return {sap.ui.core.Control} <code>this</code> to allow method chaining
 * 
 */
sap.ui.core.Control.prototype.setBusyIndicatorDelay = function(iDelay) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.ui.core.Control} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.setVisible = function(bVisible) { return new sap.ui.core.Control(); };

/**
 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
 * If sStyleClass is null, the call is ignored.
 * 
 * See addStyleClass and removeStyleClass for further documentation.
 * @param {string} sStyleClass the CSS class name to be added or removed
 * @param {boolean} bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present) 
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.toggleStyleClass = function(sStyleClass,bAdd) { return new sap.ui.core.Control(); };


// ---- sap.ui.core.Core --------------------------------------------------------------------------

/**
 * @class Core Class of the SAP UI Library.
 * 
 * This class boots the Core framework and makes it available for the Application
 * via the method <code>sap.ui.getCore()</code>.
 * 
 * Example:<br/>
 * <pre>   var oCore = sap.ui.getCore();</pre><br/>
 * 
 * It provides events where the Application can attach to.<br/>
 * Example:<br/>
 * <pre>
 * oCore.attachInit(function () {
 *   //do the needful, do it lean
 * });
 * </pre><br/>
 * 
 * It registers the Browser Eventing.
 * @extends sap.ui.base.EventProvider
 * @final
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.core.Core = function() {};
/**
 * The 'formatError' event is fired when a value formatting fails. This can happen when a value stored in the model cannot be formatted to be displayed in an element property.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the format error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the format error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the format error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the format error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the format error
 * @public
 * 
 */
sap.ui.core.Core.prototype.formatError = function(oControlEvent) {  };

/**
 * Fired when any of the localization relevant configuration settings has changed
 * (e.g. language, rtl, formatLocale, datePattern, timePattern, numberSymbol, legacy formats).
 * 
 * The parameter <code>changes</code> contains additional information about the change. 
 * It is a plain object that can contain one or more of the following properties 
 * <ul>
 *   <li>language - the language setting has changed</li>
 *   <li>rtl - the character orientation mode (aka 'LTR/RTL mode') has changed</li>
 *   <li>formatLocale - the format locale has changed</li>
 * </ul>
 * (there might be other, currently undocumented settings)
 * 
 * The value for each property will be the new corresponding setting.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {object} oEvent.getParameters.changes a map of the changed localization properties
 * @public
 * 
 */
sap.ui.core.Core.prototype.localizationChanged = function(oEvent) {  };

/**
 * The 'parseError' event is fired when input parsing fails.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the parse error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the parse error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the parse error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the parse error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the parse error
 * @public
 * 
 */
sap.ui.core.Core.prototype.parseError = function(oControlEvent) {  };

/**
 * The 'validationError' event is fired when validation of the input fails.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the validation error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the validation error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the validation error
 * @public
 * 
 */
sap.ui.core.Core.prototype.validationError = function(oControlEvent) {  };

/**
 * The 'validationSuccess' event is fired when a value validation was successfully completed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the successful validation occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the successfull validation occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation)
 * @public
 * 
 */
sap.ui.core.Core.prototype.validationSuccess = function(oControlEvent) {  };

/**
 * Enforces an immediate update of the visible UI (aka "rendering").
 * 
 * In general, applications should avoid calling this method and
 * instead let the framework manage any necessary rendering.
 * @public
 * 
 */
sap.ui.core.Core.prototype.applyChanges = function() {  };

/**
 * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).
 * 
 * By default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]).
 * Different locations can be configured by using the method setThemePath() or by using the second parameter "sThemeBaseUrl" of applyTheme().
 * Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.
 * 
 * sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders
 * are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like
 *    http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css
 * then the URL that needs to be given is:
 *    http://my.server/myapp/resources
 * All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.
 * 
 * If the theme resources are not all either below this base location or  with their respective libraries, then setThemePath must be
 * used to configure individual locations.
 * @param {string} sThemeName the name of the theme to be loaded
 * @param {string} [sThemeBaseUrl] the (optional) base location of the theme
 * @public
 * 
 */
sap.ui.core.Core.prototype.applyTheme = function(sThemeName,sThemeBaseUrl) {  };

/**
 * Registers a listener for control events.
 * @param {function} fnFunction callback to be called for each control event
 * @param {object} [oListener] optional context object to call the callback on.
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachControlEvent = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachFormatError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Attaches a given function to the <code>initEvent</code> event of the core. 
 * 
 * The given callback function will either be called once the Core has been initialized 
 * or, if it has been initialized already, it will be called immediately.
 * @param {function} fnFunction the callback function to be called on event firing.
 * @public
 * @since 1.13.2
 * 
 */
sap.ui.core.Core.prototype.attachInit = function(fnFunction) {  };

/**
 * Attaches a given function to the <code>initEvent</code> event of the core.
 * 
 * This event will only be fired once; you can check if it has been fired already 
 * by calling {@link #isInitialized}.
 * @param {function} fnFunction the function to be called on event firing.
 * @public
 * @deprecated since 1.13.2 Register to the more convenient {@link sap.ui.core.Core#attachInit init event} instead
 * 
 */
sap.ui.core.Core.prototype.attachInitEvent = function(fnFunction) {  };

/**
 * Registers a listener to the central interval timer.
 * @param {function} fnFunction callback to be called periodically
 * @param {object} [oListener] optional context object to call the callback on.
 * @since 1.16.0
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachIntervalTimer = function(fnFunction,oListener) {  };

/**
 * Register a listener for the <code>localizationChanged</code> event.
 * @param {function} fnFunction callback to be called 
 * @param {object} oListener context object to cal lthe function on.
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachLocalizationChanged = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachParseError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachValidationError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachValidationSuccess = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Returns the registered element for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @public
 * 
 */
sap.ui.core.Core.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Creates a component with the provided id and settings.
 * 
 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
 * library will be redirected to the given Url. This is convenience for a call to
 * <pre>
 *   jQuery.sap.registerModulePath(sName, sUrl);
 * </pre>
 * @param {string|object} vComponent name of the component to import or object containing all needed parameters
 * @param {string} [vComponent.name] name of the component to import 
 * @param {string} [vComponent.url] URL to load the component from
 * @param {string} [vComponent.id] ID for the component instance
 * @param {object} [vComponent.settings] settings object for the component
 * @param {string} [vComponent.componentData] user specific data which is available during the whole lifecycle of the component
 * @param {string} [sUrl] the URL to load the component from
 * @param {string} [sId] the ID for the component instance
 * @param {object} [mSettings] the settings object for the component
 * @public
 * 
 */
sap.ui.core.Core.prototype.createComponent = function(vComponent,sUrl,sId,mSettings) {  };

/**
 * Returns a new instance of the RenderManager interface.
 * @return {sap.ui.core.RenderManager} the new instance of the RenderManager interface.
 * @public
 * 
 */
sap.ui.core.Core.prototype.createRenderManager = function() { return new sap.ui.core.RenderManager(); };

/**
 * Creates a new sap.ui.core.UIArea.
 * @param {string|Element} oDomRef a DOM Element or ID string of the UIArea
 * @return {sap.ui.core.UIArea} a new UIArea
 * @public
 * @deprecated Use <code>setRoot()</code> instead!
 * 
 */
sap.ui.core.Core.prototype.createUIArea = function(oDomRef) { return new sap.ui.core.UIArea(); };

/**
 * Unregisters a listener for control events.
 * 
 * A listener will only be unregistered if the same function/context combination
 * is given as in the attachControlEvent call.
 * @param {function} fnFunction function to unregister
 * @param {object} [oListener] context object given during registration
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachControlEvent = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachFormatError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Unregisters a listener for the central interval timer.
 * 
 * A listener will only be unregistered if the same function/context combination
 * is given as in the attachIntervalTimer call.
 * @param {function} fnFunction function to unregister
 * @param {object} [oListener] context object given during registration
 * @since 1.16.0
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachIntervalTimer = function(fnFunction,oListener) {  };

/**
 * Unregister a listener from the <code>localizationChanged</code> event.
 * 
 * The listener will only be unregistered if the same function/context combination 
 * is given as in the call to <code>attachLocalizationListener</code>.
 * @param {function} fnFunction callback to be deregistered
 * @param {object} oListener context object given in a previous call to attachLocalizationChanged.
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachLocalizationChanged = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The callback function to unregister.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachParseError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachValidationError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachValidationSuccess = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Creates a new subclass of class sap.ui.core.Core with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Core.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event formatError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireFormatError = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Fire event parseError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireParseError = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Fire event validationError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireValidationError = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Fire event validationSuccess to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireValidationSuccess = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Returns the instance of the application (if exists).
 * @return {sap.ui.app.Application} instance of the current application
 * @public
 * @deprecated Since 1.15.1. The Component class is enhanced to take care about the Application code.
 * 
 */
sap.ui.core.Core.prototype.getApplication = function() { return new sap.ui.app.Application(); };

/**
 * Returns the registered component for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Component} the component for the given id
 * @public
 * 
 */
sap.ui.core.Core.prototype.getComponent = function(sId) { return new sap.ui.core.Component(); };

/**
 * Returns the Configuration of the Core.
 * @return {sap.ui.core.Configuration} the Configuration of the current Core.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getConfiguration = function() { return new sap.ui.core.Configuration(); };

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @public
 * 
 */
sap.ui.core.Core.prototype.getControl = function(sId) { return new sap.ui.core.Element(); };

/**
 * Returns the Id of the control/element currently in focus.
 * @return {string} the Id of the control/element currently in focus.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getCurrentFocusedControlId = function() { return ""; };

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @public
 * 
 */
sap.ui.core.Core.prototype.getElementById = function(sId) { return new sap.ui.core.Element(); };

/**
 * Returns the event bus.
 * @return {sap.ui.core.EventBus} the event bus
 * @since 1.8.0
 * @public
 * 
 */
sap.ui.core.Core.prototype.getEventBus = function() { return new sap.ui.core.EventBus(); };

/**
 * Retrieves a resource bundle for the given library and locale.
 * 
 * If only one argument is given, it is assumed to be the libraryName. The locale
 * then falls back to the current {@link sap.ui.core.Configuration.prototype.getLanguage session locale}.
 * If no argument is given, the library also falls back to a default: "sap.ui.core".
 * @param {string} [sLibraryName='sap.ui.core'] name of the library to retrieve the bundle for
 * @param {string} [sLocale] locale to retrieve the resource bundle for
 * @return {jQuery.sap.util.ResourceBundle} the best matching resource bundle for the given parameters or undefined
 * @public
 * 
 */
sap.ui.core.Core.prototype.getLibraryResourceBundle = function(sLibraryName,sLocale) { return new jQuery.sap.util.ResourceBundle(); };

/**
 * Returns a map which contains the names of the loaded libraries as keys
 * and some additional information about each library as values.
 * @experimental The details of the 'values' in the returned map are not yet specified!
 * Their structure might change in future versions without notice. So applications
 * can only rely on the set of keys as well as the pure existance of a value.
 * @return {map} map of library names / controls
 * @public
 * 
 */
sap.ui.core.Core.prototype.getLoadedLibraries = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.core.Core.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Core.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get the model with the given model name.
 * 
 * The name can be omitted to reference the default model or it must be a non-empty string.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 * @param {string|undefined} [sName] name of the model to be retrieved
 * @return {sap.ui.model.Model} oModel
 * @public
 * 
 */
sap.ui.core.Core.prototype.getModel = function(sName) { return new sap.ui.model.Model(); };

/**
 * @public
 * @deprecated Since version 0.15.0. Replaced by <code>createRenderManager()</code>
 * 
 */
sap.ui.core.Core.prototype.getRenderManager = function() {  };

/**
 * Returns the instance of the root component (if exists).
 * @return {sap.ui.core.Component} instance of the current root component
 * @public
 * 
 */
sap.ui.core.Core.prototype.getRootComponent = function() { return new sap.ui.core.Component(); };

/**
 * Returns the static, hidden area DOM element belonging to this core instance.
 * 
 * It can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.
 * 
 * If it is not yet available, a DIV is created and appended to the body.
 * @return {Element} the static, hidden area DOM element belonging to this core instance.
 * @throws {Error} an Error if the document is not yet ready
 * @public
 * 
 */
sap.ui.core.Core.prototype.getStaticAreaRef = function() { return null; };

/**
 * Returns the registered template for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Component} the template for the given id
 * @public
 * 
 */
sap.ui.core.Core.prototype.getTemplate = function(sId) { return new sap.ui.core.Component(); };

/**
 * Returns a UIArea if the given ID/Element belongs to one.
 * @public
 * @param {string|Element} o a DOM Element or ID string of the UIArea
 * @return {sap.ui.core.UIArea} a UIArea with a given id or dom ref.
 * 
 */
sap.ui.core.Core.prototype.getUIArea = function(o) { return new sap.ui.core.UIArea(); };

/**
 * Returns <code>true</code> if there are any pending rendering tasks or when 
 * such rendering tasks are currently being executed.
 * @return {boolean} true if there are pending (or executing) rendering tasks.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getUIDirty = function() { return false; };

/**
 * Check if a Model is set to the core
 * @return {boolean} true or false
 * @public
 * 
 */
sap.ui.core.Core.prototype.hasModel = function() { return false; };

/**
 * Includes a library theme into the current page (if a variant is specified it
 * will include the variant library theme)
 * @param {string} sLibName the name of the UI library
 * @param {string} [sVariant] the variant to include (optional)
 * @param {string} [sQuery] to be used only by the Core
 * @public
 * 
 */
sap.ui.core.Core.prototype.includeLibraryTheme = function(sLibName,sVariant,sQuery) {  };

/**
 * Initializes a library for an already loaded library module.
 * 
 * This method is intended to be called only from a library.js (e.g. generated code).
 * It includes the library specific stylesheet into the current page, and creates
 * lazy import stubs for all controls and elements in the library.
 * 
 * As a result, consuming applications don't have to write import statements for the controls or for the enums.
 * 
 * Synchronously loads any libraries that the given library depends on.
 * @param {string|object} vLibInfo name of or info object for the library to import
 * @public
 * 
 */
sap.ui.core.Core.prototype.initLibrary = function(vLibInfo) {  };

/**
 * Returns true if the Core has already been initialized. This means that instances 
 * of RenderManager etc. do already exist and the init event has already been fired 
 * (and will not be fired again).
 * @return {boolean} whether the Core has already been initialized
 * @public
 * 
 */
sap.ui.core.Core.prototype.isInitialized = function() { return false; };

/**
 * Returns the locked state of the <code>sap.ui.core.Core</code>
 * @return {boolean} locked state
 * @public
 * 
 */
sap.ui.core.Core.prototype.isLocked = function() { return false; };

/**
 * Check if the script is running on mobile
 * @return {boolean} true or false
 * @public
 * 
 */
sap.ui.core.Core.prototype.isMobile = function() { return false; };

/**
 * Used to find out whether a certain DOM element is the static area
 * @param {object} oDomRef
 * @return {boolean} whether the given DomRef is the StaticAreaRef
 * @protected
 * 
 */
sap.ui.core.Core.prototype.isStaticAreaRef = function(oDomRef) { return false; };

/**
 * Returns true, if the styles of the current theme are already applied, false otherwise.
 * 
 * This function must not be used before the init event of the Core.
 * If the styles are not yet applied an theme changed event will follow when the styles will be applied.
 * @return {boolean} whether the styles of the current theme are already applied
 * @public
 * 
 */
sap.ui.core.Core.prototype.isThemeApplied = function() { return false; };

/**
 * Synchronously loads the given library and makes it available to the application.
 * 
 * Loads the *.library module, which contains all preload modules (enums, types, content of a shared.js
 * if it exists). The library module will call initLibrary with additional metadata for the library.
 * 
 * As a result, consuming applications can instantiate any control or element from that library
 * without having to write import statements for the controls or for the enums.
 * 
 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
 * library will be redirected to the given Url. This is convenience for a call to
 * <pre>
 *   jQuery.sap.registerModulePath(sLibrary, sUrl);
 * </pre>
 * 
 * When the given library has been loaded already, no further action will be taken.
 * Especially, a given Url will not be honored!
 * 
 * Note: this method does not participate in the supported preload of libraries.
 * @param {string} sLibrary name of the library to import
 * @param {string} [sUrl] URL to load the library from
 * @public
 * 
 */
sap.ui.core.Core.prototype.loadLibrary = function(sLibrary,sUrl) {  };

/**
 * Locks the Core. No browser events are dispatched to the controls.
 * 
 * Lock should be called before and after the dom is modified for rendering, roundtrips...
 * Exceptions might be the case for asynchronous UI behavior
 * @public
 * 
 */
sap.ui.core.Core.prototype.lock = function() {  };

/**
 * Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle
 * will be managed (start and stop).
 * <br/>
 * Plugin object need to implement two methods:
 * <ul>
 *   <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin
 *       should start (as parameter the reference to the Core will be provided</li>
 *   <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li>
 * </ul>
 * @param {object} oPlugin reference to a Plugin object
 * @public
 * 
 */
sap.ui.core.Core.prototype.registerPlugin = function(oPlugin) {  };

/**
 * Sets or unsets a model for the given model name. 
 * 
 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
 * When the name is omitted, the default model is set/unset. 
 * 
 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model 
 * with that name is removed from the Core.
 * 
 * Any change (new model, removed model) is propagated to all existing UIAreas and their descendants
 * as long as a descendant doesn't have its own model set for the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 * @param {sap.ui.model.Model} oModel the model to be set or <code>null</code> or <code>undefined</code>
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.setModel = function(oModel,sName) { return new sap.ui.core.Core(); };

/**
 * Implicitly creates a new <code>UIArea</code> (or reuses an exiting one) for the given DOM reference and
 * adds the given control reference to the UIAreas content (existing content will be removed).
 * @param {string|Element} oDomRef a DOM Element or Id (string) of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be the added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>oControl.placeAt(oDomRef, "only")</code> of <code>sap.ui.core.Control</code> instead.
 * 
 */
sap.ui.core.Core.prototype.setRoot = function(oDomRef,oControl) {  };

/**
 * Defines the root directory from below which UI5 should load the theme with the given name. 
 * Optionally allows restricting the setting to parts of a theme covering specific control libraries.
 * 
 * Example:
 * <code>
 *   core.setThemeRoot("my_theme", "http://mythemeserver.com/allThemes");
 *   core.applyTheme("my_theme");
 * </code>
 * will cause the following file to be loaded:
 * <code>http://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css</code>
 * (and the respective files for all used control libraries, like <code>http://mythemeserver.com/allThemes/sap/ui/commons/themes/my_theme/library.css</code>
 * if the sap.ui.commons library is used)
 * 
 * If parts of the theme are at different locations (e.g. because you provide a standard theme like "sap_goldreflection" for a custom control library and
 * this self-made part of the standard theme is at a different location than the UI5 resources), you can also specify for which control libraries the setting
 * should be used, by giving an array with the names of the respective control libraries as second parameter:
 * <code>core.setThemeRoot("sap_goldreflection", ["my.own.library"], "http://mythemeserver.com/allThemes");</code>
 * This will cause the Gold Reflection theme to be loaded normally from the UI5 location, but the part for styling the "my.own.library" controls will be loaded from:
 * <code>http://mythemeserver.com/allThemes/my/own/library/themes/sap_goldreflection/library.css</code>
 * 
 * If the custom theme should be loaded initially (via bootstrap attribute), the "themeRoots" property of the window["sap-ui-config"] object must be used instead
 * of Core.setThemeRoot(...) in order to configure the theme location early enough.
 * @param {string} sThemeName the name of the theme for which to configure the location
 * @param {string[]} [aLibraryNames] the optional library names to which the configuration should be restricted
 * @param {string} sThemeBaseUrl the base URL below which the CSS file(s) will be loaded from
 * @return {sap.ui.core.Core} the Core, to allow method chaining
 * @since 1.10
 * @public
 * 
 */
sap.ui.core.Core.prototype.setThemeRoot = function(sThemeName,aLibraryNames,sThemeBaseUrl) { return new sap.ui.core.Core(); };

/**
 * Unlocks the Core. 
 * 
 * Browser events are dispatched to the controls again after this method is called.
 * @public
 * 
 */
sap.ui.core.Core.prototype.unlock = function() {  };

/**
 * Unregisters a Plugin out of the <code>sap.ui.core.Core</code>
 * @param {object} oPlugin reference to a Plugin object
 * @public
 * 
 */
sap.ui.core.Core.prototype.unregisterPlugin = function(oPlugin) {  };


// ---- sap.ui.core.CSSColor --------------------------------------------------------------------------


// ---- sap.ui.core.CSSSize --------------------------------------------------------------------------


// ---- sap.ui.core.CSSSizeShortHand --------------------------------------------------------------------------


// ---- sap.ui.core.CustomData --------------------------------------------------------------------------

/**
 * Constructor for a new CustomData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getWriteToDom writeToDom} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Contains a single key/value pair of custom data attached to an Element. See method data().
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.CustomData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.CustomData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.CustomData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>key</code>.
 * The key of the data in this CustomData object.
 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.CustomData.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.CustomData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>value</code>.
 * The data stored in this CustomData object.
 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
 * 
 * Default value is <code>undefined</code>
 * @return {any} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.getValue = function() { return null; };

/**
 * Getter for property <code>writeToDom</code>.
 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
 * If the key is "abc" and the value is "cde", the HTML will look as follows:
 * &lt;SomeTag ... data-abc="cde" ... &gt;
 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
 * ATTENTION: use carefully to not create huge attributes or a large number of them.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>writeToDom</code>
 * @since 1.9.0
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.getWriteToDom = function() { return false; };

/**
 * Setter for property <code>key</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sKey new value for property <code>key</code>
 * @return {sap.ui.core.CustomData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.setKey = function(sKey) { return new sap.ui.core.CustomData(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {any} oValue new value for property <code>value</code>
 * @return {sap.ui.core.CustomData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.setValue = function(oValue) { return new sap.ui.core.CustomData(); };

/**
 * Setter for property <code>writeToDom</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bWriteToDom new value for property <code>writeToDom</code>
 * @return {sap.ui.core.CustomData} <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.setWriteToDom = function(bWriteToDom) { return new sap.ui.core.CustomData(); };


// ---- sap.ui.core.DeclarativeSupport --------------------------------------------------------------------------

/**
 * @class Static class for enabling declarative UI support.  
 * @version 1.26.9
 * @since 1.7.0
 * @public
 * 
 */
sap.ui.core.DeclarativeSupport = function() {};
/**
 * Enhances the given DOM element by parsing the Control and Elements info and creating
 * the SAPUI5 controls for them.
 * @param {Element} oElement the DOM element to compile
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use
 * @param {boolean} [isRecursive] Whether the call of the function is recursive.
 * @public
 * 
 */
sap.ui.core.DeclarativeSupport.compile = function(oElement,oView,isRecursive) {  };


// ---- sap.ui.core.delegate --------------------------------------------------------------------------


// ---- sap.ui.core.delegate.ItemNavigation --------------------------------------------------------------------------

/**
 * Creates an ItemNavigation delegate that can be attached to Controls requiring
 * capabilities for keyboard navigation between items.
 * @class Delegate for the ItemNavigation with the keyboard.
 * 
 * Delegate for the ItemNavigation with
 * arrow keys over a one dimensional list of items.
 * 
 * The ItemNavigation gets a main DOM reference and
 * an array of DOM references that represent the
 * DOM nodes that should be focused.
 * 
 * If there are disabled nodes or not focusable nodes like separators that should be used
 * (e.g. for paging issues) in the ItemNavigation they
 * can be added to the DOM reference array as empty (false) entries. These nodes are
 * not focused by keyboard navigation but are useful because the index of the nodes in the
 * ItemNavigation is the same like in the calling control.
 * 
 * If the DOM references are submitted to the ItemNavigation the TabIndexes of the
 * nodes are adjusted regarding to the Focused Index.
 * 
 * If the ItemNavigation is nested in an other ItemNavigation (e.g. SegmentedButton in Toolbar)
 * the RootDomRef will always have TabIndex -1.
 * 
 * Per default the ItemNavigation cycles over the items.
 * It starts again on the top if arrow down is pressed while
 * the last item has the focus. It starts at the end if arrow up or
 * left is pressed while the first item has the focus.
 * If you like to stop the navigation at the first and last item,
 * call the <code>setCycling</code> method with a value of <code>false</code>.
 * 
 * It is possible to have multiple columns in the item navigation. If multiple columns
 * are used the keyboard navigation changes. Right and left will get to the next or previous
 * node. but up and down will navigate the same way but in vertical direction.
 * 
 * The ItemNavigation helper also allows to set a selected index that is used
 * if the user initially enters the navigated control (for a radio group there
 * is one selected).
 * 
 * This class listens to mousedown event and if it occurs on an item in the
 * list aItemDomRefs, it sets the focus to it.
 * 
 * Remembering the focused item after a server roundtrip or after re-rendering is
 * up to the control that uses this delegate.
 * 
 * When the <code>setPageSize</code> method is called with a value &gt; 0,
 * then page up and down events will be handled.
 * 
 * The <code>BeforeFocus</code> event is fired before the actual item is focused.
 * The control can register to this event and e.g. make the item visible
 * if it is not currently visible.
 * The index of the focused Item and the triggering event are returned.
 * !!! But this is not usable in the moment because not visible items are not reached
 * !!! by keyboard navigation. It is to late to make them visible on this event or it
 * !!! is fired to late.
 * !!! This must be redesigned if the feature is really needed. (e.g. in TabStrip for
 * !!! tabs that are not visible in the moment...)
 * 
 * The <code>AfterFocus</code> event is fired after the actual item is focused.
 * The control can register to this event and react on the focus change.
 * The index of the focused Item and the triggering event are returned.
 * 
 * The <code>BorderReached</code> event is fired if the border of the items is reached and
 * no cycling is used. So an application can react on this.
 * For example if the first item is focused and the LEFT key is pressed.
 * 
 * The <code>FocusAgain</code> event is fired if the current focused item is focused again
 * (e.G. click again on focused item)
 * @extends sap.ui.base.EventProvider
 * @param {Element} oDomRef the DOM element that is focused if the item navigation is started
 * @param {Element[]} aItemDomRefs Array of DOM elements representing the items for the navigation
 * @param {boolean} [bNotInTabChain=false] Whether the selected element should be in the tab chain or not
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation = function(oDomRef,aItemDomRefs,bNotInTabChain) {};
/**
 * Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ItemNavigation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns disabled modifiers 
 * These modifiers will not be handled by ItemNavigation
 * @param {object} oDisabledModifiers
 * @return {object} 
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.getDisabledModifiers = function(oDisabledModifiers) { return new Object(); };

/**
 * returns the array of item dom refs
 * @return {Element[]} array of item dom refs
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.getItemDomRefs = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.core.delegate.ItemNavigation.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ItemNavigation.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * returns the root dom reference surrounding the items
 * @return {Element} root dom reference surrounding the items
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.getRootDomRef = function() { return null; };

/**
 * Check whether given event has disabled modifier or not
 * @param {jQuery.Event} oEvent jQuery event
 * @return {Boolean} 
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.hasDisabledModifier = function(oEvent) { return null; };

/**
 * Sets whether the items are displayed in columns
 * @param {int} iColumns count of columns for the table mode or cycling mode
 * @param {boolean} bNoColumnChange forbid to jump to an other column with up and down keys
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setColumns = function(iColumns,bNoColumnChange) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets whether the ItemNavigation should cycle through the items.
 * @param {boolean} bCycling true if cycling should be done, else false
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setCycling = function(bCycling) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the disabled modifiers 
 * These modifiers will not be handled by ItemNavigation
 * 
 * <pre>
 * Example: Disable shift + up handling of ItemNavigation
 * 
 * oItemNavigation.setDisabledModifiers({
 *     sapnext : ["shift"]
 * });
 * 
 * Possible keys are : "shift", "alt", "ctrl", "meta" 
 * Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
 * </pre>
 * @param {Object} oDisabledModifiers Object that includes event type with disabled keys as an array
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setDisabledModifiers = function(oDisabledModifiers) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets behaviour of HOME and END if columns are used
 * @param {boolean} bStayInRow HOME -> got to first item in row; END -> go to last item in row
 * @param {boolean} bCtrlEnabled HOME/END with CTRL -> go to first/last item of all
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setHomeEndColumnMode = function(bStayInRow,bCtrlEnabled) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the item dom refs as an array the items
 * @param {any[]} aItemDomRefs
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setItemDomRefs = function(aItemDomRefs) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the page size of the item navigation to allow pageup and down keys.
 * @param {int} iPageSize the pagesize, needs to be at least 1
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setPageSize = function(iPageSize) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the root reference surrounding the items
 * @param {object} oDomRef
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setRootDomRef = function(oDomRef) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the selected index if the used control supports selection.
 * @param {int} iIndex the index of the first selected item
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setSelectedIndex = function(iIndex) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets whether the ItemNavigation should use the table mode to navigate through
 * the items (navigation in a grid).
 * @param {boolean} bTableMode true if table mode should be done, else false
 * @param {boolean} [bTableList] this sets a different behaviour for table mode.
 * In this mode we keep using table navigation but there are some differences. e.g.
 * 	- Page-up moves focus to the first row, not first cell like in table mode
 * 	- Page-down moves focus to the last row, not last cell like in table mode
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setTableMode = function(bTableMode,bTableList) { return new sap.ui.core.delegate.ItemNavigation(); };


// ---- sap.ui.core.delegate.ScrollEnablement --------------------------------------------------------------------------

/**
 * Creates a ScrollEnablement delegate that can be attached to Controls requiring
 * capabilities for scrolling of a certain part of their DOM on mobile devices.
 * @class Delegate for touch scrolling on mobile devices
 * 
 * This delegate uses CSS (-webkit-overflow-scrolling) only if supported. Otherwise the desired
 * scrolling library is used. Please also consider the documentation
 * of the library for a proper usage.
 * 
 * Controls that implement ScrollEnablement should additionally provide the getScrollDelegate method that returns
 * the current instance of this delegate object
 * @extends sap.ui.base.Object
 * @experimental Since 1.5.2. This class is experimental and provides only limited functionality. Also the API might be changed in future.
 * @param {sap.ui.core.Control} oControl the Control of which this Scroller is the delegate
 * @param {string} sScrollContentDom the Id of the element within the DOM of the Control which should be scrollable
 * @param {object} oConfig the configuration of the scroll delegate
 * @param {boolean} [oConfig.horizontal=false] Whether the element should be scrollable horizontally
 * @param {boolean} [oConfig.vertical=false] Whether the element should be scrollable vertically
 * @param {boolean} [oConfig.zynga=false] If set, then the Zynga scroller (http://zynga.github.com/scroller/) is used
 * @param {boolean} [oConfig.iscroll=false] If set, then iScroll (http://cubiq.org/iscroll-4) is used
 * @param {boolean} [oConfig.preventDefault=false] If set, the default of touchmove is prevented
 * @param {boolean} [oConfig.nonTouchScrolling=false] If true, the delegate will also be active to allow touch like scrolling with the mouse on non-touch platforms; if set to "scrollbar", there will be normal scrolling with scrollbars and no touch-like scrolling where the content is dragged
 * @version 1.26.9
 * @constructor
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement = function(oControl,sScrollContentDom,oConfig) {};
/**
 * Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ScrollEnablement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.delegate.ScrollEnablement.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ScrollEnablement.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.Design --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Design.toString = function() { return ""; };

// ---- sap.ui.core.Dock --------------------------------------------------------------------------


// ---- sap.ui.core.Element --------------------------------------------------------------------------

/**
 * Constructs and initializes an UI Element with the given <code>sId</code> and settings.
 * 
 * If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal)
 * that defines values for properties, aggregations, associations or events keyed by their name.
 * 
 * <b>Valid Names:</b>
 * 
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the control and its base classes. Note that for  0..n aggregations and associations this
 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 * 
 * If a key name is ambiguous for a specific control class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
 * In that case the keys must be quoted due to the ':'.
 * 
 * Each subclass should document the set of supported names in its constructor documentation.
 * 
 * <b>Valid Values:</b>
 * 
 * <ul>
 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>0..n associations are not supported yet
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 * 
 * Special aggregation "dependents" is connected to the lifecycle management and databinding,
 * but not rendered automatically and can be used for popups or other dependent controls. This allows
 * definition of popup controls in declarative views and enables propagation of model and context
 * information to them.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTooltip tooltip} : sap.ui.core.TooltipBase</li>
 * <li>{@link #getCustomData customData} : sap.ui.core.CustomData[]</li>
 * <li>{@link #getLayoutData layoutData} : sap.ui.core.LayoutData</li>
 * <li>{@link #getDependents dependents} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string} [sId] id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new element
 * @class Base Class for Elements.
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Element = function(sId,mSettings) {};
/**
 * Returns the best suitable DOM node that represents this Element wrapped as jQuery object.
 * I.e. the element returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.
 * 
 * If an ID suffix is given, the ID of this Element is concatenated with the suffix 
 * (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery.
 * This matches the UI5 naming convention for named inner DOM nodes of a control. 
 * @param {string} [sSuffix] ID suffix to get a jQuery object for
 * @return {jQuery} The jQuery wrapped element's DOM reference
 * @protected
 * 
 */
sap.ui.core.Element.prototype.$ = function(sSuffix) { return null; };

/**
 * Adds some customData into the aggregation named <code>customData</code>.
 * @param {sap.ui.core.CustomData}
 *            oCustomData the customData to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Element.prototype.addCustomData = function(oCustomData) { return new sap.ui.core.Element(); };

/**
 * Adds some dependent into the aggregation named <code>dependents</code>.
 * @param {sap.ui.core.Control}
 *            oDependent the dependent to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.addDependent = function(oDependent) { return new sap.ui.core.Element(); };

/**
 * Adds a delegate that listens to the events that are fired on this element (as opposed to events which are fired BY this element).
 * 
 * When this element is cloned, the same delegate will be added to all clones. This behavior is well-suited for applications which want to add delegates
 * that also work with templates in aggregation bindings.
 * For control development the internal "addDelegate" method which does not clone delegates by default may be more suitable, as typically each control instance takes care of its own delegates.
 * 
 * To avoid double registrations, all registrations of the given delegate are first
 * removed and then the delegate is added.
 * @param {object} oDelegate the delegate object
 * @param {object} [oThis] if given, this object will be the "this" context in the listener methods; default is the delegate object itself
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.ui.core.Element.prototype.addEventDelegate = function(oDelegate,oThis) { return new sap.ui.core.Element(); };

/**
 * Applies the focus info.
 * 
 * To be overwritten by the specific control method.
 * @param {object} oFocusInfo
 * @protected
 * 
 */
sap.ui.core.Element.prototype.applyFocusInfo = function(oFocusInfo) {  };

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * If a relative binding path is used, this will be applied whenever the parent context changes.
 * @param {string} sPath the binding path
 * @param {object} [mParameters] map of additional parameters for this binding
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public 
 * 
 */
sap.ui.core.Element.prototype.bindElement = function(sPath,mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Clone delegates
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.base.ManagedObject} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.core.Element.prototype.clone = function(sIdSuffix,aLocalIds) { return new sap.ui.base.ManagedObject(); };

/**
 * Creates a new Element from the given data.
 * 
 * If vData is an Element already, that element is returned.
 * If vData is an object (literal), then a new element is created with vData as settings.
 * The type of the element is either determined by a "Type" entry in the vData or
 * by a type information in the oKeyInfo object
 * @param {sap.ui.core.Element|object} vData the data to create the element from
 * @param {object} [oKeyInfo] an entity information (e.g. aggregation info)
 * @param {string} [oKeyInfo.type] type info for the entity
 * @public
 * @static
 * 
 */
sap.ui.core.Element.create = function(vData,oKeyInfo) {  };

/**
 * Attaches custom data to an Element or retrieves attached data.
 * 
 * Usage:
 *    data("myKey", myData)
 * attaches myData (which can be any JS data type, e.g. a number, a string, an object, or a function) to this element, under the given key "myKey". If the key already exists,the value will be updated.
 * 
 * data("myKey", myData, writeToDom)
 * attaches myData to this element, under the given key "myKey" and (if writeToDom is true) writes key and value to the HTML. If the key already exists,the value will be updated. While oValue can be any JS data type to be attached, it must be a string to be also written to DOM. The key must also be a valid HTML attribute name (it must conform to sap.ui.core.ID and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
 * 
 * data("myKey")
 * retrieves whatever data has been attached to this Element (using the key "myKey") before
 * 
 * data("myKey", null)
 * removes whatever data has been attached to this Element (using the key "myKey") before
 * 
 * data(null)
 * removes all data
 * 
 * data()
 * returns all data, as a map
 * @public
 * 
 */
sap.ui.core.Element.prototype.data = function() {  };

/**
 * Creates metadata for an UI Element by extending the Object Metadata.
 * 
 * In addition to the entries defined by {@link sap.ui.base.Object.defineClass}, the following
 * entries can be specified in the static info object:
 * 
 * <ul>
 * <li>library: {string} name of the library that contains the element/control
 * <li>properties: a map of property info objects, mapped by the property name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the property (redundant to map key)
 *     <li>type {string} type of the property
 *     <li>[defaultValue] {any} default value of the property. Can be omitted
 *     </ul>
 * <li>aggregations: a map of aggregation info objects, mapped by the aggregation name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the aggregation, singular for 0..1, plural for 0..n
 *     <li>type {string} type of the aggregated controls/elements
 *     <li>multiple {boolean}
 *     <li>singularName {string} singular name for 0..n aggregations
 *     </ul>
 * <li>associations: a map of association info objects, mapped by the association name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the association, singular for 0..1, plural for 0..n
 *     <li>type {string} type of the associated controls/elements
 *     <li>multiple {boolean}
 *     <li>singularName {string} singular name for 0..n associations
 *     </ul>
 * <li>events: map from event names to event names
 * </ul>
 * @see sap.ui.core.Object.defineClass
 * @param {string} sClassName name of the class to build the metadata for
 * @param {object} oStaticInfo static information used to build the metadata
 * @param {function} [fnMetaImpl] constructor to be used for the metadata
 * @return {object} the created metadata
 * @static
 * @public
 * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.core.Element.extend})
 * 
 */
sap.ui.core.Element.defineClass = function(sClassName,oStaticInfo,fnMetaImpl) { return new Object(); };

/**
 * Cleans up the resources associated with this element and all its children.
 * 
 * After an element has been destroyed, it can no longer be used in the UI!
 * 
 * Applications should call this method if they don't need the element any longer.
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroy = function(bSuppressInvalidate) {  };

/**
 * Destroys all the customData in the aggregation
 * named <code>customData</code>.
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyCustomData = function() { return new sap.ui.core.Element(); };

/**
 * Destroys all the dependents in the aggregation
 * named <code>dependents</code>.
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyDependents = function() { return new sap.ui.core.Element(); };

/**
 * Destroys the layoutData in the aggregation
 * named <code>layoutData</code>.
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyLayoutData = function() { return new sap.ui.core.Element(); };

/**
 * Destroys the tooltip in the aggregation 
 * named <code>tooltip</code>.
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyTooltip = function() { return new sap.ui.core.Element(); };

/**
 * Allows the parent of a control to enhance the aria information during rendering
 * 
 * This function is called by the RenderManager's writeAccessibilityState method 
 * for the parent of the currently rendered control - if the parent implements it.
 * @param {sap.ui.core.Element} oElement the Control/Element for which aria properties are rendered
 * @param {object} mAriaProps map of aria properties keyed by there name (withour prefix "aria-")
 * @return {object} map of enhanced aria properties
 * @protected
 * @abstract
 * 
 */
sap.ui.core.Element.prototype.enhanceAccessibilityState = function(oElement,mAriaProps) { return new Object(); };

/**
 * Cleans up the element instance before destruction.
 * 
 * Applications must not call this hook method directly, it is called by the framework
 * when the element is {@link #destroy destroyed}.
 * 
 * Subclasses of Element should override this hook to implement any necessary cleanup.
 * @protected
 * 
 */
sap.ui.core.Element.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.Element with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the following:
 * <ul>
 * <li><code>metadata:</code> an (optional) object literal containing meta information about the class.
 * The information in the object literal will be wrapped by an instance of ElementMetadata
 * and might contain the following information:
 * <ul>
 * <li>all values accepted for metadata as documented for the {@link sap.ui.base.Object.extend Object.extend} method</li>
 * <li>library: {string} (optional) name of the library that contains the element/control
 * <li>properties: a map of property info objects, mapped by the property name
 *     Each info object should be a simple object literal and may contain the following information
 *     <ul>
 *     <li>type {string} optional type of the property, defaults to type "string"
 *     <li>[defaultValue] {any} default value of the property. When omitted, defaults to the default value for the type
 *     <li>group {string} optional semantic group of the property. Defaults to "Misc"
 *     </ul>
 *     If the property info object is not an object literal, it is assumed to be a string and
 *     interpreted as the type of the property. All other informations use their default values.
 * <li>aggregations: a map of aggregation info objects, mapped by the aggregation name
 *     By convention, the name should be a singular name for aggregations of cardinality 0..1 and
 *     should be a plural name for aggregations of cardinality 0..n.
 * 
 * The info object should contain the following information
 *     <ul>
 *     <li>type {string} (optional) type of the aggregated controls/elements, defaults to sap.ui.core.Control
 *     <li>altTypes {string[]} (optional) alternative primitive types that the aggregation can have (like string etc.). Defaults to no alternative types.
 *     <li>multiple {boolean} (optional) information about the cardinality, defaults to true (multiple aggregation)
 *     <li>singularName {string} (optional) singular name for 0..n aggregations. If not specified, a singular name is guessed from the plural name.
 *     </ul>
 *     If the aggregation info object is not an object literal, it is assumed to be a string and
 *     interpreted as the type of the aggregation. All other informations use their default values.
 * <li>associations: a map of association info objects, mapped by the association name
 *     By convention, the name should be a singular name for aggregations of cardinality 0..1 and
 *     should be a plural name for aggregations of cardinality 0..n.
 * 
 * The info object should contain the following information
 *     <ul>
 *     <li>type {string} type of the associated controls/elements, defaults to sap.ui.core.Control
 *     <li>multiple {boolean} (optional) information about the cardinality, defaults to false (single aggregation)
 *     <li>singularName {string} (optional) singular name for 0..n aggregations. If not specified, a singular name is guessed from the plural name.
 *     </ul>
 *     If the association info object is not an object literal, it is assumed to be a string and
 *     interpreted as the type of the aggregation. All other informations then use their default values.
 * <li>events: a map of event info objects, mapped by the event name
 *     The info object can contain the following information
 *     <ul>
 *     <li><code>allowPreventDefault:</code> {boolean} whether the control allows to prevent its default behavior for this event (defaults to false) </li>
 *     </ul>
 * </ul>
 * For all properties, aggregations, associations and events, the usual access methods are created and added to the public facade.
 * They don't need to be listed in the publicMethods array.
 * </li>
 * 
 * <li><code>constructor:</code> a function that serves as a constructor function for the new element class.
 * If no constructor function is given, the framework creates a default implementation that delegates all
 * its arguments to the constructor function of the base class.
 * <b>Note:</b> most of the time, subclasses of Element don't need to specify their own constructor function.
 * They should use the symmetric {@link #init} and {@link #exit} hooks instead.
 * </li>
 * 
 * <li><code>renderer:</code> definition of a renderer. This can be any of the following
 * <ul>
 * <li>the class name of a renderer class (a string)</li>
 * <li>a render function with signature <code>function(oRenderManager, oControl)</code> that implements the rendering for the new class</li>
 * <li>an object literal that contains functions/properties that should be mixed into a new render class which is
 * created as a subclass of the renderer of the current class.</li>
 * </ul>
 * <b>Note:</b> usually only controls have a renderer. But to keep the control creation APIs simple and to honor future
 * extensions of the current policy, the definition of a renderer is supported for direct subclasses of Element as well.
 * </li>
 * 
 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
 * make sense to use primitive values here other than to declare public constants.
 * 
 * All methods added this way and whose name is not 'init' nor 'exit' nor does it start with an underscore ('_')
 * nor with the prefix 'on' are assumed to be public methods and are automatically added to the list of public facade methods.
 * </ul>
 * 
 * The prototype object of the newly created class uses the same prototype as instances of the base class
 * (prototype chaining).
 * 
 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
 * itself.
 * 
 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
 * can be specified. Instances of that class will be used to represent metadata for the newly created class
 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
 * metadata for a new class hierarchy they introduce (as done by  {@link sap.ui.core.Element Element}).
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] structured object with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @since 1.3.1
 * 
 */
sap.ui.core.Element.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Searches and returns an array of child elements and controls which are
 * referenced within an aggregation or aggregations of child elements/controls.
 * This can be either done recursive or not.
 * <br>
 * <b>Take care: this operation might be expensive.</b>
 * @param {boolean}
 *          bRecursive true, if all nested children should be returned.
 * @return {sap.ui.core.Element[]} array of child elements and controls
 * @public
 * 
 */
sap.ui.core.Element.prototype.findElements = function(bRecursive) { return new Array(); };

/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 * @param {string} sEventId the event id
 * @param {object} mParameters the parameter map
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Element.prototype.fireEvent = function(sEventId,mParameters) { return new sap.ui.core.Element(); };

/**
 * Sets the focus to the stored focus DOM reference
 * @public
 * 
 */
sap.ui.core.Element.prototype.focus = function() {  };

/**
 * Getter for aggregation <code>customData</code>.<br/>
 * Custom Data, a data structure like a map containing arbitrary key value pairs.
 * @return {sap.ui.core.CustomData[]}
 * @public
 * 
 */
sap.ui.core.Element.prototype.getCustomData = function() { return new Array(); };

/**
 * Getter for aggregation <code>dependents</code>.<br/>
 * Dependents are not rendered, but their databinding context and lifecycle are bound to the aggregating Element.
 * @return {sap.ui.core.Control[]}
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.getDependents = function() { return new Array(); };

/**
 * Returns the best suitable DOM Element that represents this UI5 Element.
 * By default the DOM Element with the same ID as this Element is returned.
 * Subclasses should override this method if the lookup via id is not sufficient.
 * 
 * Note that such a DOM Element does not necessarily exist in all cases.
 * Some elements or controls might not have a DOM representation at all (e.g.
 * a naive FlowLayout) while others might not have one due to their current
 * state (e.g. an initial, not yet rendered control).
 * 
 * If an ID suffix is given, the ID of this Element is concatenated with the suffix 
 * (separated by a single dash) and the DOM node with that compound ID will be returned.
 * This matches the UI5 naming convention for named inner DOM nodes of a control. 
 * @param {string} [sSuffix] ID suffix to get the DOMRef for
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * @protected
 * 
 */
sap.ui.core.Element.prototype.getDomRef = function(sSuffix) { return null; };

/**
 * Get the element binding object for a specific model
 * @param {string} sModelName the name of the model
 * @return {sap.ui.model.Binding} the element binding for the given model name
 * @public
 * 
 */
sap.ui.core.Element.prototype.getElementBinding = function(sModelName) { return new sap.ui.model.Binding(); };

/**
 * Returns the DOM Element that should get the focus.
 * 
 * To be overwritten by the specific control method.
 * @return {Element} Returns the DOM Element that should get the focus
 * @protected
 * 
 */
sap.ui.core.Element.prototype.getFocusDomRef = function() { return null; };

/**
 * Returns an object representing the serialized focus information
 * To be overwritten by the specific control method
 * @type object
 * @return an object representing the serialized focus information
 * @protected
 * 
 */
sap.ui.core.Element.prototype.getFocusInfo = function() { return new Object(); };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.Element.prototype.getInterface = function() {  };

/**
 * Getter for aggregation <code>layoutData</code>.<br/>
 * Defines the layout constraints for this control when it is used inside a Layout.
 * LayoutData classes are typed classes and must match the embedding Layout. 
 * See VariantLayoutData for aggregating multiple alternative LayoutData instances to a single Element.
 * @return {sap.ui.core.LayoutData}
 * @public
 * 
 */
sap.ui.core.Element.prototype.getLayoutData = function() { return new sap.ui.core.LayoutData(); };

/**
 * Returns the runtime metadata for this UI element.
 * 
 * When using the defineClass method, this function is automatically created and returns
 * a runtime representation of the design time metadata.
 * @return {object} runtime metadata
 * @public
 * 
 */
sap.ui.core.Element.prototype.getMetadata = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.core.Element.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Element.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the tooltip for this element if any or an undefined value.
 * The tooltip can either be a simple string or a subclass of
 * {@link sap.ui.core.TooltipBase}.
 * 
 * Callers that are only interested in tooltips of type string (e.g. to render
 * them as a <code>title</code> attribute), should call the convenience method
 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
 * instance) then they could call {@link #getTooltip_Text} instead.
 * @return {string|sap.ui.core.TooltipBase} The tooltip for this Element.
 * @public
 * 
 */
sap.ui.core.Element.prototype.getTooltip = function() { return ""; };

/**
 * Returns the tooltip for this element but only if it is a simple string.
 * Otherwise an undefined value is returned.
 * @return {string} string tooltip or undefined
 * @public
 * 
 */
sap.ui.core.Element.prototype.getTooltip_AsString = function() { return ""; };

/**
 * Returns the main text for the current tooltip or undefined if there is no such text.
 * If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property
 * of that object is returned. Otherwise the object itself is returned (either a string
 * or undefined or null).
 * @return {string} text of the current tooltip or undefined
 * @public
 * 
 */
sap.ui.core.Element.prototype.getTooltip_Text = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.CustomData</code> in the aggregation named <code>customData</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.CustomData}
 *           oCustomData the customData whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.Element.prototype.indexOfCustomData = function(oCustomData) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>dependents</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oDependent the dependent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.indexOfDependent = function(oDependent) { return 0; };

/**
 * Initializes the element instance after creation.
 * 
 * Applications must not call this hook method directly, it is called by the framework
 * while the constructor of an element is executed.
 * 
 * Subclasses of Element should override this hook to implement any necessary initialization.
 * @protected
 * 
 */
sap.ui.core.Element.prototype.init = function() {  };

/**
 * Inserts a customData into the aggregation named <code>customData</code>.
 * @param {sap.ui.core.CustomData}
 *            oCustomData the customData to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the customData should be inserted at; for
 *              a negative value of <code>iIndex</code>, the customData is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the customData is inserted at
 *              the last position
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Element.prototype.insertCustomData = function(oCustomData,iIndex) { return new sap.ui.core.Element(); };

/**
 * Inserts a dependent into the aggregation named <code>dependents</code>.
 * @param {sap.ui.core.Control}
 *            oDependent the dependent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the dependent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the dependent is inserted at
 *              the last position
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.insertDependent = function(oDependent,iIndex) { return new sap.ui.core.Element(); };

/**
 * This function either calls set[sPropertyName] or get[sPropertyName] with the specified property name
 * depending if an <code>oValue</code> is provided or not.
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     [oValue] value to set the property to
 * @return {any|sap.ui.core.Element} Returns <code>this</code> to allow method chaining in case of setter and the property value in case of getter
 * @public
 * 
 */
sap.ui.core.Element.prototype.prop = function(sPropertyName,oValue) { return null; };

/**
 * Removes all the controls in the aggregation named <code>customData</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.CustomData[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeAllCustomData = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>dependents</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeAllDependents = function() { return new Array(); };

/**
 * Removes an customData from the aggregation named <code>customData</code>.
 * @param {int | string | sap.ui.core.CustomData} vCustomData the customDatato remove or its index or id
 * @return {sap.ui.core.CustomData} the removed customData or null
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeCustomData = function(vCustomData) { return new sap.ui.core.CustomData(); };

/**
 * Removes an dependent from the aggregation named <code>dependents</code>.
 * @param {int | string | sap.ui.core.Control} vDependent the dependentto remove or its index or id
 * @return {sap.ui.core.Control} the removed dependent or null
 * @since 1.19
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeDependent = function(vDependent) { return new sap.ui.core.Control(); };

/**
 * Removes the given delegate from this element.
 * 
 * This method will remove all registrations of the given delegate, not only one.
 * @param {object} oDelegate the delegate object
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeEventDelegate = function(oDelegate) { return new sap.ui.core.Element(); };

/**
 * This triggers immediate rerendering of its parent and thus of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
 * rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.
 * @protected
 * 
 */
sap.ui.core.Element.prototype.rerender = function() {  };

/**
 * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints 
 * for this control when it is used inside a layout.
 * @param {sap.ui.core.LayoutData} oLayoutData
 * @public
 * 
 */
sap.ui.core.Element.prototype.setLayoutData = function(oLayoutData) {  };

/**
 * Sets a new tooltip for this object. The tooltip can either be a simple string
 * (which in most cases will be rendered as the <code>title</code> attribute of this
 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
 * 
 * If a new tooltip is set, any previously set tooltip is deactivated.
 * @param {string|sap.ui.core.TooltipBase} oTooltip.
 * @public
 * 
 */
sap.ui.core.Element.prototype.setTooltip = function() {  };

/**
 * Returns a simple string representation of this element.
 * 
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string descripition of this element
 * 
 */
sap.ui.core.Element.prototype.toString = function() { return ""; };

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 * @param {string} sModelName
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.core.Element.prototype.unbindElement = function(sModelName) { return new sap.ui.base.ManagedObject(); };


// ---- sap.ui.core.EnabledPropagator --------------------------------------------------------------------------

/**
 * @class Helper Class for enhancement of a Control with propagation of enabled property.
 * 
 * <b>This constructor should be applied to the prototype of a control</b>
 * 
 * Example:
 * <code>
 * sap.ui.core.EnabledPropagator.call(<i>Some-Control</i>.prototype, <i>Default-value, ...</i>);
 * </code>
 * e.g.
 * <code>
 * sap.ui.core.EnabledPropagator.call(sap.ui.commons.Button.prototype);
 * </code>
 * @version 1.26.9
 * @param {boolean} [bDefault=true] the value that should be used as default value for the enhancement of the control.
 * @param {boolean} [bLegacy=false] whether the introduced property should use the old name 'Enabled' 
 * @public
 * 
 */
sap.ui.core.EnabledPropagator = function(bDefault,bLegacy) {};

// ---- sap.ui.core.EventBus --------------------------------------------------------------------------

/**
 * Creates an instance of EventBus.
 * @class Provides eventing facilities, so subscribe, unsubscribe and publish events.
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.8.0
 * 
 */
sap.ui.core.EventBus = function() {};
/**
 * @see sap.ui.base.Object#destroy
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.EventBus with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.EventBus.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.EventBus.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.EventBus.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Fires the given event and notifies all listeners. Listeners must not change the content of the event.
 * 
 * The channel "sap.ui" is reserved by the UI5 framework. An application might listen to events 
 * on this channel but is not allowed to publish own events there.
 * @param {string}
 *            [sChannelId] The channel of the event; if not given the default channel is used
 * @param {string}
 *            sEventId The identifier of the event
 * @param {object}
 * 			  [oData] the parameter map
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.publish = function(sChannelId,sEventId,oData) {  };

/**
 * Adds an event registration for the given object and given event name.
 * 
 * The channel "sap.ui" is reserved by th UI5 framework. An application might listen to events on this channel but is not allowed to publish own events there.
 * @param {string}
 *            [sChannelId] The channel of the event to subscribe for. If not given the default channel is used.
 * @param {string}
 *            sEventId The identifier of the event to subscribe for
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event bus-instance. This functions might have the following parameters: sChannelId, sEventId, oData.
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.subscribe = function(sChannelId,sEventId,fnFunction,oListener) { return new sap.ui.core.EventBus(); };

/**
 * Removes an event registration for the given object and given event name.
 * 
 * The passed parameters must match those used for registration with {@link #subscribe } beforehand!
 * @param {string}
 *            [sChannelId] The channel of the event to unsubscribe from. If not given the default channel is used.
 * @param {string}
 *            sEventId The identifier of the event to unsubscribe from
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.unsubscribe = function(sChannelId,sEventId,fnFunction,oListener) { return new sap.ui.core.EventBus(); };


// ---- sap.ui.core.format --------------------------------------------------------------------------


// ---- sap.ui.core.format.DateFormat --------------------------------------------------------------------------

/**
 * Constructor for DateFormat - must not be used: To get a DateFormat instance, please use getInstance, getDateTimeInstance or getTimeInstance.
 * @class
 * The DateFormat is a static class for formatting and parsing date and time values according
 * to a set of format options.
 * 
 * Supported format options are pattern based on Unicode LDML Date Format notation.
 * If no pattern is specified a default pattern according to the locale settings is used.
 * @public
 * @see http://unicode.org/reports/tr35/#Date_Field_Symbol_Table
 * 
 */
sap.ui.core.format.DateFormat = function() {};
/**
 * Format a date according to the given format options.
 * @param {Date} oDate the value to format
 * @param {boolean} bUTC whether to use UTC
 * @return {string} the formatted output value
 * @public
 * 
 */
sap.ui.core.format.DateFormat.prototype.format = function(oDate,bUTC) { return ""; };

/**
 * Get a date instance of the DateFormat, which can be used for formatting.
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.pattern] a data pattern in LDML format. It is not verified whether the pattern represents only a date.
 * @param {string} [oFormatOptions.style] either empty or 'short, 'medium' or 'long'. If no pattern is given, a locale dependent default date pattern of that style is used from the LocaleData class.
 * @param {boolean} [oFormatOptions.strictParsing] either empty or 'true' or 'false'. If true, by parsing it is checked if the value is a valid date
 * @param {boolean} [oFormatOptions.relative] either empty or 'true' or 'false'. If true, the date is formatted relatively to todays date if it is within the given day range, e.g. "today", "yesterday", "in 5 days"
 * @param {int[]} [oFormatOptions.relativeRange] the day range used for relative formatting (default [-6, 6], which means only the last 6 days, today and the next 6 days are formatted relatively).
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} date instance of the DateFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.DateFormat.getDateInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.DateFormat(); };

/**
 * Get a datetime instance of the DateFormat, which can be used for formatting.
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.pattern] a datetime pattern in LDML format. It is not verified whether the pattern represents a full datetime.
 * @param {string} [oFormatOptions.style] either empty or 'short, 'medium' or 'long'. If no pattern is given, a locale dependent default datetime pattern of that style is used from the LocaleData class.
 * @param {boolean} [oFormatOptions.strictParsing] either empty or 'true' or 'false'. If true, by parsing it is checked if the value is a valid datetime
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} datetime instance of the DateFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.DateFormat.getDateTimeInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.DateFormat(); };

/**
 * Get a time instance of the DateFormat, which can be used for formatting.
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.pattern] a time pattern in LDML format. It is not verified whether the pattern only represents a time.
 * @param {string} [oFormatOptions.style] either empty or 'short, 'medium' or 'long'. If no pattern is given, a locale dependent default time pattern of that style is used from the LocaleData class.
 * @param {boolean} [oFormatOptions.strictParsing] either empty or 'true' or 'false'. If true, by parsing it is checked if the value is a valid time
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} time instance of the DateFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.DateFormat.getTimeInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.DateFormat(); };

/**
 * Parse a string which is formatted according to the given format options.
 * @param {string} sValue the string containing a formatted date/time value
 * @param {boolean} bUTC whether to use UTC, if no timezone is contained
 * @param {boolean} bStrict to use strict value check
 * @return {Date} the parsed value
 * @public
 * 
 */
sap.ui.core.format.DateFormat.prototype.parse = function(sValue,bUTC,bStrict) { return null; };


// ---- sap.ui.core.format.FileSizeFormat --------------------------------------------------------------------------

/**
 * Constructor for FileSizeFormat - must not be used: To get a FileSizeFormat instance, please use getInstance.
 * @class
 * The FileSizeFormat is a static class for formatting and parsing numeric file size values according
 * to a set of format options.
 * 
 * Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}
 * For format options which are not specified default values according to the type and locale settings are used.
 * 
 * Supported format options (additional to NumberFormat):
 * <ul>
 * <li>binaryFilesize: if true, base 2 is used: 1 Kibibyte = 1024 Byte, ... , otherwise base 10 is used: 1 Kilobyte = 1000 Byte (Default is false)</li>
 * </ul>
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat = function() {};
/**
 * Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.format.FileSizeFormat.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format a filesize (in bytes) according to the given format options.
 * @param {number|string} oValue the number (or hex string) to format
 * @return {string} the formatted output value
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat.prototype.format = function(oValue) { return ""; };

/**
 * Get an instance of the FileSizeFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured 
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used. 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.FileSizeFormat} instance of the FileSizeFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat.getInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.FileSizeFormat(); };

/**
 * Returns a metadata object for class sap.ui.core.format.FileSizeFormat.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.format.FileSizeFormat.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parse a string which is formatted according to the given format options.
 * @param {string} sValue the string containing a formatted filesize value
 * @return {number} the parsed value in bytes
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat.prototype.parse = function(sValue) { return 0.0; };


// ---- sap.ui.core.format.NumberFormat --------------------------------------------------------------------------

/**
 * Constructor for NumberFormat - must not be used: To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.
 * @class
 * The NumberFormat is a static class for formatting and parsing numeric values according
 * to a set of format options.
 * 
 * Supported format options:
 * <ul>
 * <li>minIntegerDigits: minimal number of non-fraction digits</li>
 * <li>maxIntegerDigits: maximum number of non-fraction digits</li>
 * <li>minFractionDigits: minimal number of fraction digits</li>
 * <li>maxFractionDigits: maximum number of fraction digits</li>
 * <li>pattern: CLDR number pattern</li>
 * <li>groupingEnabled: enable grouping (show the grouping separators</li>
 * <li>groupingSeparator: the used grouping separator</li>
 * <li>decimalSeparator: the used decimal separator</li>
 * <li>plusSign: the used plus symbol</li>
 * <li>minusSign: the used minus symbol</li>
 * <li>showMeasure: Show the measure according to the format in the formatted string</li>
 * <li>style: either empty or 'short, 'long' or 'standard' (based on CLDR decimalFormat)</li>
 * <li>roundingMode: specifies a rounding behavior for discarding the digits after the maximum fraction digits defined by maxFractionDigits.
 *  Rounding will only be applied, if the passed value if of type number. This can be assigned by value in 
 *  {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode} or a function which will be used for rounding the number. The function
 *  is called with two parameters: the number and how many decimal digits should be reserved.</li>
 * </ul>
 * For format options which are not specified default values according to the type and locale settings are used.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat = function() {};
/**
 * Creates a new subclass of class sap.ui.core.format.NumberFormat with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.format.NumberFormat.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format a number according to the given format options.
 * @param {number} oValue the number to format
 * @param {string} sMeasure a measure which has an impact on the formatting
 * @return {string} the formatted output value
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.prototype.format = function(oValue,sMeasure) { return ""; };

/**
 * Get a currency instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured 
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used. 
 * 
 * <p>
 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. 
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getCurrencyInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Get a float instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured 
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * <p>
 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. 
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} float instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getFloatInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Get an integer instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured 
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used. 
 * 
 * <p>
 * This instance has TOWARDS_ZERO set as default rounding mode. 
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getIntegerInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Returns a metadata object for class sap.ui.core.format.NumberFormat.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.format.NumberFormat.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get a percent instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured 
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * <p>
 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. 
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getPercentInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Parse a string which is formatted according to the given format options.
 * @param {string} sValue the string containing a formatted numeric value
 * @return {number} the parsed value
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.prototype.parse = function(sValue) { return 0.0; };


// ---- sap.ui.core.format.NumberFormat.RoundingMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.format.NumberFormat.RoundingMode.toString = function() { return ""; };

// ---- sap.ui.core.Fragment --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @classdesc Fragments support the definition of light-weight stand-alone UI control trees.
 * This class acts as factory which returns the UI control tree defined inside the Fragments. When used within declarative Views,
 * the Fragment content is imported and seamlessly integrated into the View.
 * 
 * Fragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their own (they may know one, though),
 * they are not a Control, they are not part of the UI tree and they have no representation in HTML.
 * By default, in contrast to declarative Views, they do not do anything to guarantee ID uniqueness.
 * 
 * But like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for other types can be plugged in),
 * the declaration syntax is the same as in declarative Views and the name and location of the Fragment files is similar to Views. 
 * Controller methods can also be referenced in the declarations, but as Fragments do not have their own controllers, 
 * this requires the Fragments to be used within a View which does have a controller.
 * That controller is used, then.
 * 
 * Do not call the Fragment constructor directly!
 * 
 * 
 * Use-cases for Fragments are e.g.:
 * - Modularization of UIs without fragmenting the controller structure
 * - Re-use of UI parts
 * - 100%-declarative definition of Views
 * @class
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * @public
 * 
 */
sap.ui.core.Fragment = function() {};
/**
 * Returns an Element/Control by its ID in the context of the Fragment with the given ID
 * @param {string} sFragmentId 
 * @param {string} sId
 * @return Element by its ID and Fragment ID
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.byId = function(sFragmentId,sId) {  };

/**
 * Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have
 * @param {string} sFragmentId 
 * @param {string} sId 
 * @return the prefixed ID
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.createId = function(sFragmentId,sId) {  };

/**
 * Creates a new subclass of class sap.ui.core.Fragment with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.Fragment.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>type</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>type</code>
 * @public
 * 
 */
sap.ui.core.Fragment.prototype.getType = function() { return ""; };

/**
 * Registers a new Fragment type
 * @param {string} sType the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.
 * @param {object} oFragmentImpl an object having a property "init" of type "function" which is called on Fragment instantiation with the settings map as argument
 * @public
 * 
 */
sap.ui.core.Fragment.registerType = function(sType,oFragmentImpl) {  };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sType new value for property <code>type</code>
 * @return {sap.ui.core.Fragment} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Fragment.prototype.setType = function(sType) { return new sap.ui.core.Fragment(); };


// ---- sap.ui.core.History --------------------------------------------------------------------------

/**
 * Creates an instance of the History.
 * 
 * Attention: The Web Storage API which is used by this class stores the data on the client.
 * Therefore do not use this API for confidential information. 
 * @class History handles the history of certain controls (e.g. sap.ui.commons.SearchField).
 * @param {string} sId id for the history
 * @param {object} [mSettings] optional map/JSON-object with additional settings
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @protected
 * 
 */
sap.ui.core.History = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.History with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.History.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.History.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.History.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.HorizontalAlign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.HorizontalAlign.toString = function() { return ""; };

// ---- sap.ui.core.HTML --------------------------------------------------------------------------

/**
 * Constructor for a new HTML.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * <li>{@link #getPreferDOM preferDOM} : boolean (default: true)</li>
 * <li>{@link #getSanitizeContent sanitizeContent} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Embeds standard HTML in a SAPUI5 control tree.
 * 
 * Security Hint: By default, the HTML content (property 'content') is not sanitized and therefore 
 * open to XSS attacks. Applications that want to show user defined input in an HTML control, should 
 * either sanitize the content on their own or activate automatic sanitizing through the 
 * {@link #setSanitizeContent sanitizeContent} property.
 * 
 * Although this control inherits the <code>tooltip</code> aggregation/property and the 
 * <code>hasStyleClass</code>, <code>addStyleClass</code>, <code>removeStyleClass</code> and 
 * <code>toggleStyleClass</code> methods from its base class, it doesn't support them. 
 * Instead, the defined HTML content can contain a tooltip (title attribute) or custom CSS classes.
 * 
 * For further hints about usage restrictions for this control, see also the documentation of the 
 * <code>content</code> property.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.HTML = function(sId,mSettings) {};
/**
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control, 
 * then this event will fire, but there won't be a DOM node for this control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.isPreservedDOM Whether the current DOM of the control has been preserved (true) or not (e.g. 
 * rendered from content property or it is an empty HTML control).
 * @public
 * 
 */
sap.ui.core.HTML.prototype.afterRendering = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.HTML</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.HTML</code>.<br> itself.
 * 
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control, 
 * then this event will fire, but there won't be a DOM node for this control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML</code>.<br/> itself.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.attachAfterRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.HTML(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.HTML</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.detachAfterRendering = function(fnFunction,oListener) { return new sap.ui.core.HTML(); };

/**
 * Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.HTML.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterRendering to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'isPreservedDOM' of type <code>boolean</code>Whether the current DOM of the control has been preserved (true) or not (e.g. 
 * rendered from content property or it is an empty HTML control).</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.HTML.prototype.fireAfterRendering = function(mArguments) { return new sap.ui.core.HTML(); };

/**
 * Getter for property <code>content</code>.
 * HTML content to be displayed, defined as a string. 
 * 
 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any 
 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
 * 
 * Some of these restrictions (there might be others!) are:
 * <ul>
 * <li>the content must be enclosed in tags, pure text is not supported. </li>
 * <li>if the content contains script tags, they will be executed but they will not appear in the 
 *     resulting DOM tree. When the contained code tries to find the corresponding script tag, 
 *     it will fail.</li>
 * </ul>
 * 
 * Please consider to consult the jQuery documentation as well.
 * 
 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content 
 * (e.g. setContent("<div/><div/>")), but this is not a guaranteed feature. The accepted content 
 * might be restricted to single root nodes in future versions. To notify applications about this 
 * fact, a warning is written in the log when multiple root nodes are used.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>content</code>
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getContent = function() { return ""; };

/**
 * @param {string} [sSuffix=''] Suffix of the Element to be retrieved or empty
 * @return {Element} The element's DOM reference or null
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getDomRef = function(sSuffix) { return null; };

/**
 * Returns a metadata object for class sap.ui.core.HTML.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.HTML.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>preferDOM</code>.
 * Whether existing DOM content is preferred over the given content string.
 * 
 * There are two scenarios where this flag is relevant (when set to true):
 * <ul>
 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time 
 *     and if the root node of that UIArea contained DOM content with the same id as the HTML 
 *     control, then that content will be used for rendering instead of any specified string 
 *     content</li>
 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later 
 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved 
 *     and not replaced by the string content</li>
 * </ul>
 * 
 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>preferDOM</code>
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getPreferDOM = function() { return false; };

/**
 * Getter for property <code>sanitizeContent</code>.
 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
 * 
 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>sanitizeContent</code>
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getSanitizeContent = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * Specifies whether the control is visible. Invisible controls are not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getVisible = function() { return false; };

/**
 * Setter for property <code>content</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sContent new value for property <code>content</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setContent = function(sContent) { return new sap.ui.core.HTML(); };

/**
 * Sets some new DOM content for this HTML control. The content will replace the existing content
 * after the next rendering. Properties are not modified, but preferDOM should be set to true.
 * @param {Element} oDom the new DOM content
 * @return {sap.ui.core.HTML} <code>this</code> to facilitate method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setDOMContent = function(oDom) { return new sap.ui.core.HTML(); };

/**
 * Setter for property <code>preferDOM</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bPreferDOM new value for property <code>preferDOM</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setPreferDOM = function(bPreferDOM) { return new sap.ui.core.HTML(); };

/**
 * Setter for property <code>sanitizeContent</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSanitizeContent new value for property <code>sanitizeContent</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setSanitizeContent = function(bSanitizeContent) { return new sap.ui.core.HTML(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setVisible = function(bVisible) { return new sap.ui.core.HTML(); };


// ---- sap.ui.core.Icon --------------------------------------------------------------------------

/**
 * Constructor for a new Icon.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColor color} : sap.ui.core.CSSColor</li>
 * <li>{@link #getHoverColor hoverColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getActiveColor activeColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getBackgroundColor backgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getHoverBackgroundColor hoverBackgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getActiveBackgroundColor activeBackgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Icon uses embeded font instead of pixel image. Comparing to image, Icon is easily scalable, color can be altered live and various effects can be added using css.
 * 
 * A set of built in Icons is available and they can be fetched by calling sap.ui.core.IconPool.getIconURI and set this value to the src property on the Icon.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.11.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Icon = function(sId,mSettings) {};
/**
 * This event is fired when icon is pressed/activated by the user.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.Icon.prototype.press = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.core.Icon</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.Icon</code>.<br> itself.
 * 
 * This event is fired when icon is pressed/activated by the user.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Icon</code>.<br/> itself.
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.ui.core.Icon(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.core.Icon</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.detachPress = function(fnFunction,oListener) { return new sap.ui.core.Icon(); };

/**
 * Creates a new subclass of class sap.ui.core.Icon with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Icon.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Icon.prototype.firePress = function(mArguments) { return new sap.ui.core.Icon(); };

/**
 * Getter for property <code>activeBackgroundColor</code>.
 * Background color for Icon in active state.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>activeBackgroundColor</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getActiveBackgroundColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Getter for property <code>activeColor</code>.
 * This color is shown when icon is pressed/activated by the user.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>activeColor</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getActiveColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the Icon in normal state.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>backgroundColor</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getBackgroundColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Getter for property <code>color</code>.
 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>color</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Getter for property <code>decorative</code>.
 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Decorative icons don't have tab stop.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>decorative</code>
 * @since 1.16.4
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getDecorative = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>hoverBackgroundColor</code>.
 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>hoverBackgroundColor</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getHoverBackgroundColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Getter for property <code>hoverColor</code>.
 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>hoverColor</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getHoverColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Returns a metadata object for class sap.ui.core.Icon.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Icon.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>size</code>.
 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>src</code>.
 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with a Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getSrc = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>width</code>.
 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>activeBackgroundColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sActiveBackgroundColor new value for property <code>activeBackgroundColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setActiveBackgroundColor = function(sActiveBackgroundColor) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>activeColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sActiveColor new value for property <code>activeColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setActiveColor = function(sActiveColor) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>backgroundColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sBackgroundColor new value for property <code>backgroundColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>color</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sColor new value for property <code>color</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setColor = function(sColor) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>decorative</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDecorative new value for property <code>decorative</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @since 1.16.4
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setDecorative = function(bDecorative) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setHeight = function(sHeight) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>hoverBackgroundColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sHoverBackgroundColor new value for property <code>hoverBackgroundColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setHoverBackgroundColor = function(sHoverBackgroundColor) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>hoverColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sHoverColor new value for property <code>hoverColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setHoverColor = function(sHoverColor) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>size</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sSize new value for property <code>size</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setSize = function(sSize) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>src</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sSrc new value for property <code>src</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setSrc = function(sSrc) { return new sap.ui.core.Icon(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setWidth = function(sWidth) { return new sap.ui.core.Icon(); };


// ---- sap.ui.core.IconColor --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.IconColor.toString = function() { return ""; };

// ---- sap.ui.core.IconPool --------------------------------------------------------------------------

/**
 * Constructor for IconPool - must not be used: all of the methods that are under IconPool are static methods.
 * @class
 * The IconPool is a static class for retrieving or registering icons.
 * It also provides helping methods for easier consumption of icons.
 * There are already icons registered in IconPool, please follow this link and find the name of the icon:
 * 1. If you use the icon inside existing control, please call sap.ui.core.IconPool.getIconURI and assign the URI to controls which support icon.
 * 2. If you want to support icon and standard image in your own control, please call createControlByURI by giving the URI and a constructor when URI isn't a icon URI. Icon instance or instance created by calling the given constructor is returned.
 * @public
 * 
 */
sap.ui.core.IconPool = function() {};
/**
 * Register an additional icon to the sap.ui.core.IconPool.
 * @param {string} iconName the name of the icon.
 * @param {string} collectionName the name of icon collection. The built in icons are with empty collectionName, so if additional icons need to be registered in IconPool, the collectionName can't be empty.  
 * @param {object} iconInfo the icon info which contains the following properties:
 * @param {string} iconInfo.fontFamily is the name of the font when importing the font using @font-face in CSS
 * @param {string} iconInfo.content is the special code without the prefix, for example "e000"
 * @param {boolean} [iconInfo.overWrite=false] indicates if already registered icons should be overwritten when the same name and collection are given. The built in icons can never be overwritten.
 * @param {boolean} [iconInfo.suppressMirroring=false] indicates whether this icon should NOT be mirrored in RTL (right to left) mode.
 * @return {object} the info object of the registered icon which has the name, collection, uri, fontFamily, content and suppressMirroring properties.
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.addIcon = function(iconName,collectionName,iconInfo) { return new Object(); };

/**
 * Creates an instance of sap.ui.core.Icon if the given URI is an icon URI, otherwise the given constructor is called.
 * The given URI is set to the src property of the control.
 * @param {string|object} setting contains the properties which will be used to instantiate the returned control. It should contain at least a property named src. If it's given with a string type, it will be taken as the value of src property.
 * @param {function} constructor the constructor function which is called when the given URI isn't an icon URI
 * @return {sap.ui.core.Control} either an instance of sap.ui.core.Icon or instance created by calling the given constructor
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.createControlByURI = function(setting,constructor) { return new sap.ui.core.Control(); };

/**
 * Returns all names of registered collections in IconPool
 * @return {array} An array contains all of the registered collections' names. 
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.getIconCollectionNames = function() { return null; };

/**
 * Returns the icon url based on the given mime type
 * @param {string} sMimeType the mime type of a file (e.g. "application/zip")
 * @return {string} the icon url (e.g. "sap-icon://attachment-zip-file")
 * @static
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.IconPool.getIconForMimeType = function(sMimeType) { return ""; };

/**
 * Returns the info object of the icon which has the same given iconName and collectionName.
 * @param {string} iconName the name of the icon.
 * @param {string} collectionName the name of icon collection. The built in icons are with undefined collectionName, so if the built in icons need to be used, just ignore this parameter.
 * @return {object} the info object of the registered icon which has the uri, fontFamily and content properties. 
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.getIconInfo = function(iconName,collectionName) { return new Object(); };

/**
 * Returns all name of icons that are registerd under the given collection.
 * @param {string} collectionName the name of collection where icon names are retrieved.
 * @return {array} An array contains all of the registered icon names under the given collection. 
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.getIconNames = function(collectionName) { return null; };

/**
 * Returns the URI of the icon which has the same given iconName and collectionName.
 * @param {string} iconName the name of the icon.
 * @param {string} collectionName the name of icon collection. The built in icons are with undefined collectionName, so if the built in icons need to be used, just ignore this parameter.
 * @return {string} the URI of the icon. if the icon can't be found in IconPool, undefined is returned. 
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.getIconURI = function(iconName,collectionName) { return ""; };

/**
 * Returns If the given uri is an icon URI.
 * @param {string} uri the icon uri which is in the format "sap-icon://collectionName/iconName"
 * @return {boolean} if the uri follows the icon uri format. 
 * @static
 * @public
 * 
 */
sap.ui.core.IconPool.isIconURI = function(uri) { return false; };


// ---- sap.ui.core.ID --------------------------------------------------------------------------


// ---- sap.ui.core.ImeMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ImeMode.toString = function() { return ""; };

// ---- sap.ui.core.IntervalTrigger --------------------------------------------------------------------------

/**
 * Creates an instance of EventBus.
 * @class Provides a trigger that triggers in a set interval and calls all
 *        registered listeners. If the interval is <= 0 the trigger is
 *        switched off and won't trigger at all.
 * @param {int}
 *            iInterval is the interval the trigger should be used. If the
 *            trigger is >0 triggering starts/runs and if the interval is
 *            set to <=0 triggering stops.
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.11.0
 * 
 */
sap.ui.core.IntervalTrigger = function(iInterval) {};
/**
 * Adds a listener to the list that should be triggered.
 * @public
 * @param {function}
 *            fnFunction is the called function that should be called when
 *            the trigger want to trigger the listener.
 * @param {object}
 *            [oListener] that should be triggered.
 * 
 */
sap.ui.core.IntervalTrigger.prototype.addListener = function(fnFunction,oListener) {  };

/**
 * Destructor method for objects.
 * @public
 * 
 */
sap.ui.core.IntervalTrigger.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.IntervalTrigger with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.IntervalTrigger.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.IntervalTrigger.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.IntervalTrigger.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.IntervalTrigger.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Removes corresponding listener from list.
 * @public
 * @param {function}
 *            fnFunction is the previously registered function
 * @param {object}
 *            [oListener] that should be removed
 * 
 */
sap.ui.core.IntervalTrigger.prototype.removeListener = function(fnFunction,oListener) {  };

/**
 * Sets the trigger interval. If the value is >0 triggering will start if
 * there are any registered listeners. If the interval is set to <=0
 * triggering will stop.
 * @public
 * @param {int}
 *            iInterval sets the interval in milliseconds when a new
 *            triggering should occur.
 * 
 */
sap.ui.core.IntervalTrigger.prototype.setInterval = function(iInterval) {  };


// ---- sap.ui.core.IShrinkable --------------------------------------------------------------------------


// ---- sap.ui.core.Item --------------------------------------------------------------------------

/**
 * Constructor for a new Item.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection</li>
 * <li>{@link #getKey key} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A control base type.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Item = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Item.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>enabled</code>.
 * Enabled items can be selected.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Item.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Item.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>textDirection</code>.
 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Item.prototype.setEnabled = function(bEnabled) { return new sap.ui.core.Item(); };

/**
 * Setter for property <code>key</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sKey new value for property <code>key</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Item.prototype.setKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Item.prototype.setText = function(sText) { return new sap.ui.core.Item(); };

/**
 * Setter for property <code>textDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection new value for property <code>textDirection</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Item.prototype.setTextDirection = function(sTextDirection) { return new sap.ui.core.Item(); };


// ---- sap.ui.core.Label --------------------------------------------------------------------------


// ---- sap.ui.core.LayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new LayoutData.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A layout data base type.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.LayoutData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.LayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.LayoutData.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.LayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.ListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getAdditionalText additionalText} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * An item that is used in lists or list-similar controls such as DropdownBox, for example.
 * The element foresees the usage of additional texts displayed in a second column.
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>additionalText</code>.
 * Some additional text of type string, optionally to be displayed along with this item.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>additionalText</code>
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.getAdditionalText = function() { return ""; };

/**
 * Getter for property <code>icon</code>.
 * The icon belonging to this list item instance.
 * This can be an URI to an image or an icon font URI.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.ListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.ListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for property <code>additionalText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sAdditionalText new value for property <code>additionalText</code>
 * @return {sap.ui.core.ListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.setAdditionalText = function(sAdditionalText) { return new sap.ui.core.ListItem(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sIcon new value for property <code>icon</code>
 * @return {sap.ui.core.ListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.setIcon = function(sIcon) { return new sap.ui.core.ListItem(); };


// ---- sap.ui.core.LocalBusyIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new LocalBusyIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100px)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100px)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The LocalBusyIndicator is a special version of the
 * BusyIndicator. This one doesn't block the whole screen - it just
 * blocks the corresponding control and puts a local animation over the
 * control. To use the functionality of this control the corresponding
 * control needs to be enabled via the 'LocalBusyIndicatorSupport'
 * accordingly to the ListBox control (see the init-function of the
 * ListBox).
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.11.0
 * @deprecated Since version 1.14.2. 
 * The LocalBusyIndicator Control is not needed anymore by the new implementation of the LBI. Hence, it is not used anymore.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.LocalBusyIndicator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.LocalBusyIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.LocalBusyIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>height</code>.
 * This property is the height of the control that has to
 * be covered. With this height the position of the animation can be
 * properly set.
 * 
 * Default value is <code>100px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.ui.core.LocalBusyIndicator.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.LocalBusyIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>width</code>.
 * This property is the width of the control that has to
 * be covered. With this width the position of the animation can be
 * properly set.
 * 
 * Default value is <code>100px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>100px</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.ui.core.LocalBusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.setHeight = function(sHeight) { return new sap.ui.core.LocalBusyIndicator(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100px</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.ui.core.LocalBusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.setWidth = function(sWidth) { return new sap.ui.core.LocalBusyIndicator(); };


// ---- sap.ui.core.Locale --------------------------------------------------------------------------

/**
 * Creates an instance of the Locale.
 * @class Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section
 * @param {string} sLocaleId the locale identifier, in format en-US or en_US.
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.core.Locale = function(sLocaleId) {};
/**
 * Creates a new subclass of class sap.ui.core.Locale with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Locale.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Get the locale extension as a single string or null.
 * 
 * The extension always consists of a singleton character (not 'x'), 
 * a dash '-' and one or more extension token, each separated 
 * again with a dash.
 * 
 * Use {@link #getExtensions} to get the individual extension tokens as an array.
 * @return {string} the extension
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getExtension = function() { return ""; };

/**
 * Get the locale extensions as an array of tokens.
 * 
 * The leading singleton and the separating dashes are not part of the result.
 * If there is no extensions section in the locale tag, an empty array is returned.
 * @return {string[]} the individual extension sections
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getExtensionSubtags = function() { return new Array(); };

/**
 * Get the locale language.
 * 
 * Note that the case might differ from the original script tag 
 * (Lower case is enforced as recommended by BCP47/ISO639).
 * @return {string} the language code
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getLanguage = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Locale.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Locale.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get the locale private use section or null.
 * @return {string} the private use section
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getPrivateUse = function() { return ""; };

/**
 * Get the locale private use section
 * @return {string} the private use section
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getPrivateUseSubtags = function() { return ""; };

/**
 * Get the locale region or null if none was specified.
 * 
 * Note that the case might differ from the original script tag 
 * (Upper case is enforced as recommended by BCP47/ISO3166-1).
 * @return {string} the ISO3166-1 region code (2-letter or 3-digits)
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getRegion = function() { return ""; };

/**
 * Best guess to get a proper SAP Logon Language for this locale.
 * 
 * Conversions taken into account:
 * <ul>
 * <li>use the language part only</li> 
 * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>
 * <li>for Chinese, map 'Traditional Chinese' to SAP proprietary code 'zf'</li>
 * <li>map private extensions x-sap1q and x-sap2q to SAP pseudo languages '1Q' and '2Q'</li>
 * <li>remove ext. language sub tags</li>
 * <li>convert to uppercase</li>
 * </ul>
 * 
 * Note that the conversion also returns a result for languages that are not 
 * supported by the default set of SAP languages. This method has no knowledge 
 * about the concrete languages of any given backend system.
 * @return {string} a language code that should
 * @public
 * @since 1.17.0
 * 
 */
sap.ui.core.Locale.prototype.getSAPLogonLanguage = function() { return ""; };

/**
 * Get the locale script or null if none was specified.
 * 
 * Note that the case might differ from the original language tag
 * (Upper case first letter and lower case reminder enforced as 
 * recommended by BCP47/ISO15924)  
 * @return {string} the script code or null
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getScript = function() { return ""; };

/**
 * Get the locale variants as a single string or null.
 * 
 * Multiple variants are separated by a dash '-'.
 * @return {string} the variant or null
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getVariant = function() { return ""; };

/**
 * Get the locale variants as an array of individual variants.
 * 
 * The separating dashes are not part of the result.
 * If there is no variant section in the locale tag, an empty array is returned.
 * @return {string[]} the individual variant sections 
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getVariantSubtags = function() { return new Array(); };


// ---- sap.ui.core.LocaleData --------------------------------------------------------------------------

/**
 * Creates an instance of the Data.
 * @class Data provides access to locale-specific data, like date formats, number formats, currencies, etc.
 * @param {sap.ui.core.Locale} oLocale the locale
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.core.LocaleData = function(oLocale) {};
/**
 * Creates a new subclass of class sap.ui.core.LocaleData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.LocaleData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the number of digits of the specified currency
 * @param {string} sCurrency ISO 4217 currency code
 * @returns {int} digits of the currency
 * @public
 * @since 1.21.1
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencyDigits = function(sCurrency) { return 0; };

/**
 * Get currency format pattern
 * @returns {string} The pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencyPattern = function() { return ""; };

/**
 * Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code is returned
 * @param {string} sCurrency ISO 4217 currency code
 * @returns {string} the currency symbol
 * @public
 * @since 1.21.1
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencySymbol = function(sCurrency) { return ""; };

/**
 * Get date pattern in style "short", "medium", "long" or "full"
 * @param {string} sStyle the required style for the date pattern
 * @returns {string} the selected date pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDatePattern = function(sStyle) { return ""; };

/**
 * Get datetime pattern in style "short", "medium", "long" or "full"
 * @param {string} sStyle the required style for the datetime pattern
 * @returns {string} the selected datetime pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDateTimePattern = function(sStyle) { return ""; };

/**
 * Get day periods in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the day period names
 * @returns {array} array of day periods (AM, PM)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDayPeriods = function(sWidth) { return null; };

/**
 * Get day names in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the day names
 * @returns {array} array of day names (starting with Sunday)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDays = function(sWidth) { return null; };

/**
 * Get stand alone day names in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the day names
 * @returns {array} array of day names (starting with Sunday)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDaysStandAlone = function(sWidth) { return null; };

/**
 * Returns the short decimal formats (like 1K, 1M....)
 * @param {string} sStyle short or long
 * @param {string} sNumber 1000, 10000 ...
 * @param {string} sPlural one or other (if not exists other is used)
 * @returns {string} decimal format
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getDecimalFormat = function(sStyle,sNumber,sPlural) { return ""; };

/**
 * Get decimal format pattern
 * @returns {string} The pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDecimalPattern = function() { return ""; };

/**
 * Returns the day that usually is regarded as the first day 
 * of a week in the current locale. Days are encoded as integer
 * where sunday=0, monday=1 etc.
 * 
 * 
 * All week data information in the CLDR is provides for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it 
 * contains only a language), then the "likelySubtag" information of the CLDR  
 * is taken into account to guess the "most likely" territory for the locale. 
 * @returns {int} first day of week
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getFirstDayOfWeek = function() { return 0; };

/**
 * Returns the interval format with the given Id (see CLDR documentation for valid Ids)
 * or the fallback format if no interval format with that Id is known.
 * 
 * The empty Id ("") might be used to retrieve the interval format fallback. 
 * @param {string} sId Id of the interval format, e.g. "d-d"
 * @returns {string} interval format string with placeholders {0} and {1}
 * @public
 * @since 1.17.0 
 * 
 */
sap.ui.core.LocaleData.prototype.getIntervalPattern = function(sId) { return ""; };

/**
 * Get locale specific language names
 * @returns {object} map of locale specific language names
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getLanguages = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.core.LocaleData.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.LocaleData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get month names in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the month names
 * @returns {array} array of month names (starting with January)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getMonths = function(sWidth) { return null; };

/**
 * Get stand alone month names in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the month names
 * @returns {array} array of month names (starting with January)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getMonthsStandAlone = function(sWidth) { return null; };

/**
 * Get number symbol "decimal", "group", "plusSign", "minusSign", "percentSign"
 * @param {string} sType the required type of symbol
 * @returns {string} the selected number symbol
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getNumberSymbol = function(sType) { return ""; };

/**
 * Get orientation (left-to-right or right-to-left)
 * @returns {string} character orientation for this locale
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getOrientation = function() { return ""; };

/**
 * Get percent format pattern
 * @returns {string} The pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getPercentPattern = function() { return ""; };

/**
 * Get quarter names in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the quarter names
 * @returns {array} array of quarters
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getQuarters = function(sWidth) { return null; };

/**
 * Get stand alone quarter names in width "narrow", "abbreviated" or "wide"
 * @param {string} sWidth the required width for the quarter names
 * @returns {array} array of quarters
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getQuartersStandAlone = function(sWidth) { return null; };

/**
 * Returns the relative day resource pattern (like "Today", "Yesterday", "{0} days ago") based on the given
 * difference of days (0 means today, 1 means tommorrow, -1 means yesterday, ...).
 * @param {int} iDiff the difference in days
 * @returns {string} the relative day resource pattern
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeDay = function(iDiff) { return ""; };

/**
 * Returns the relative month resource pattern (like "This month", "Last month", "{0} months ago") based on the given
 * difference of months (0 means this month, 1 means next month, -1 means last month, ...).
 * @param {int} iDiff the difference in months
 * @returns {string} the relative month resource pattern
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeMonth = function(iDiff) { return ""; };

/**
 * Returns the relative year resource pattern (like "This year", "Last year", "{0} year ago") based on the given
 * difference of years (0 means this year, 1 means next year, -1 means last year, ...).
 * @param {int} iDiff the difference in years
 * @returns {string} the relative year resource pattern
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeYear = function(iDiff) { return ""; };

/**
 * Get locale specific script names
 * @returns {object} map of locale specific script names
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getScripts = function() { return new Object(); };

/**
 * Get locale specific territory names
 * @returns {object} map of locale specific territory names
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getTerritories = function() { return new Object(); };

/**
 * Get time pattern in style "short", "medium", "long" or "full"
 * @param {string} sStyle the required style for the date pattern
 * @returns {string} the selected time pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getTimePattern = function(sStyle) { return ""; };

/**
 * Returns the last day of a weekend for the given locale. 
 * 
 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
 * 
 * All week data information in the CLDR is provides for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it 
 * contains only a language), then the "likelySubtag" information of the CLDR  
 * is taken into account to guess the "most likely" territory for the locale. 
 * @returns {int} last day of weekend
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getWeekendEnd = function() { return 0; };

/**
 * Returns the first day of a weekend for the given locale. 
 * 
 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
 * 
 * All week data information in the CLDR is provides for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it 
 * contains only a language), then the "likelySubtag" information of the CLDR  
 * is taken into account to guess the "most likely" territory for the locale. 
 * @returns {int} first day of weekend
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getWeekendStart = function() { return 0; };


// ---- sap.ui.core.Message --------------------------------------------------------------------------

/**
 * Constructor for a new Message.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLevel level} : sap.ui.core.MessageType</li>
 * <li>{@link #getReadOnly readOnly} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This element used to provide messages. Rendering must be done within the control that uses this kind of element.
 * 
 * Its default level is none.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Message = function(sId,mSettings) {};
/**
 * Compares the given message with <code>this</code> message. The types of
 * {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
 * "Information" > "None".
 * 
 * See  {@link sap.ui.core.Message.compareByType}
 * @param {sap.ui.core.Message} oOther message to compare with this one
 * @return {int} returns <code>0</code> if both messages are at
 *         the same level. <code>-1</code> if <code>this</code>
 *         message has a lower level. <code>1</code> if <code>this</code>
 *         message has a higher level.
 * @public
 * 
 */
sap.ui.core.Message.prototype.compareByType = function(oOther) { return 0; };

/**
 * Compares two given messages with each other. 
 * 
 * The types of {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
 * "Information" > "None".
 * @param {sap.ui.core.Message} oMessage1 first message to compare 
 * @param {sap.ui.core.Message} oMessage2 second message to compare
 * @return {int} returns <code>0</code> if both messages are at
 *         the same level. <code>-1</code> if <code>this</code>
 *         message has a lower level. <code>1</code> if <code>this</code>
 *         message has a higher level.
 * @static
 * @public
 * 
 */
sap.ui.core.Message.compareByType = function(oMessage1,oMessage2) { return 0; };

/**
 * Creates a new subclass of class sap.ui.core.Message with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Message.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the icon's default URI depending on given size. 
 * 
 * There are default icons for messages available that can be used this way. If no 
 * parameter is given, the size will be 16x16 per default. If larger icons are needed, 
 * the parameter "32x32" might be given.
 * @param {string} sSize
 *         If parameter is not set the default icon's size will be 16x16. If parameter 
 *         is set to "32x32" the icon size will be 32x32.
 * @return {sap.ui.core.URI} URI of the default icon.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Message.prototype.getDefaultIcon = function(sSize) { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>icon</code>.
 * A possible icon URI of the message
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.core.Message.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>level</code>.
 * Setting the message's level.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.MessageType} the value of property <code>level</code>
 * @public
 * 
 */
sap.ui.core.Message.prototype.getLevel = function() { return new sap.ui.core.MessageType(); };

/**
 * Returns a metadata object for class sap.ui.core.Message.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Message.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>readOnly</code>.
 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>readOnly</code>
 * @since 1.19.0
 * @public
 * 
 */
sap.ui.core.Message.prototype.getReadOnly = function() { return false; };

/**
 * Getter for property <code>text</code>.
 * Message text
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.Message.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>timestamp</code>.
 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * 
 */
sap.ui.core.Message.prototype.getTimestamp = function() { return ""; };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Message.prototype.setIcon = function(sIcon) { return new sap.ui.core.Message(); };

/**
 * Setter for property <code>level</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.MessageType} sLevel new value for property <code>level</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Message.prototype.setLevel = function(sLevel) { return new sap.ui.core.Message(); };

/**
 * Setter for property <code>readOnly</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bReadOnly new value for property <code>readOnly</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @since 1.19.0
 * @public
 * 
 */
sap.ui.core.Message.prototype.setReadOnly = function(bReadOnly) { return new sap.ui.core.Message(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Message.prototype.setText = function(sText) { return new sap.ui.core.Message(); };

/**
 * Setter for property <code>timestamp</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTimestamp new value for property <code>timestamp</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Message.prototype.setTimestamp = function(sTimestamp) { return new sap.ui.core.Message(); };


// ---- sap.ui.core.MessageType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.MessageType.toString = function() { return ""; };

// ---- sap.ui.core.mvc --------------------------------------------------------------------------


// ---- sap.ui.core.mvc.Controller --------------------------------------------------------------------------

/**
 * Instantiates a (MVC-style) Controller. Consumers should call the constructor only in the
 * typed controller scenario. In the generic controller use case, they should use
 * {@link sap.ui.controller} instead.
 * @class A generic controller implementation for the UI5 Model View controller concept.
 * 
 * Can either be used as a generic controller which is enriched on the fly with methods
 * and properties (see {@link sap.ui.controller}) or  as a base class for typed controllers.
 * @param {string|object[]} sName The name of the Controller to instantiate. If a Controller is defined as real sub-class,
 *                                   the "arguments" of the sub-class constructor should be given instead.
 * @public
 * 
 */
sap.ui.core.mvc.Controller = function(sName) {};
/**
 * Returns an Element of the connected view with the given local Id.
 * 
 * Views automatically prepend their own id as a prefix to created Elements
 * to make the ids unique even in the case of multiple view instances.
 * This method helps to find an element by its local id only.
 * 
 * If no view is connected or if the view doesn't contain an element with
 * the given local id, undefined is returned.
 * @param {string} sId The view-local id
 * @return {sap.ui.core.Element} Element by its (view local) id
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Converts a view local id to a globally unique one by prepending
 * the view id.
 * 
 * If no view is connected, undefined is returned.
 * @param {string} sId The view-local id
 * @return {string} The prefixed id
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.createId = function(sId) { return ""; };

/**
 * Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.Controller.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.Controller.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.Controller.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets the component of the Controllers view
 * 
 * If there is no Component connected to the view or the view is not connected to the controller,
 * undefined is returned.
 * @return {sap.ui.core.Component} The Component instance
 * @since 1.23.0
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.getOwnerComponent = function() { return new sap.ui.core.Component(); };

/**
 * Returns the view associated with this controller or undefined.
 * @return {sap.ui.core.mvc.View} View connected to this controller.
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.getView = function() { return new sap.ui.core.mvc.View(); };


// ---- sap.ui.core.mvc.HTMLView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/HTMLView.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A view defined/constructed by declarative HTML.
 * @extends sap.ui.core.mvc.View
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.HTMLView = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.mvc.HTMLView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.HTMLView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.HTMLView.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.HTMLView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.JSONView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/JSONView.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A View defined using JSON.
 * @extends sap.ui.core.mvc.View
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.JSONView = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSONView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.JSONView.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSONView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.JSView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/JSView.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A View defined/constructed by JavaScript code.
 * @extends sap.ui.core.mvc.View
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.JSView = function(sId,mSettings) {};
/**
 * A method to be implemented by JSViews, returning the View UI.
 * While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file,
 * JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement.
 * The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.
 * @return {sap.ui.core.Control} a control or (typically) tree of controls representing the View user interface
 * @public
 * 
 */
sap.ui.core.mvc.JSView.prototype.createContent = function() { return new sap.ui.core.Control(); };

/**
 * Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * A method to be implemented by JSViews, returning the flag whether to prefix 
 * the IDs of controls automatically or not if the controls are created inside
 * the {@link sap.ui.core.mvc.JSView#createContent} function. By default this 
 * feature is not activated. 
 * 
 * You can overwrite this function and return true to activate the automatic
 * prefixing.
 * @since 1.15.1
 * @experimental Since 1.15.1. This feature might be changed in future.
 * @return {boolean} true, if the controls IDs should be prefixed automatically
 * @protected
 * 
 */
sap.ui.core.mvc.JSView.prototype.getAutoPrefixId = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.JSView.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.TemplateView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/TemplateView.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A view defined in a template.
 * @extends sap.ui.core.mvc.View
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.TemplateView = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.mvc.TemplateView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.TemplateView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.TemplateView.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.TemplateView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.View --------------------------------------------------------------------------

/**
 * Constructor for a new View.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getViewName viewName} : string</li>
 * <li>{@link #getDisplayBlock displayBlock} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterInit afterInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeExit beforeExit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class A base class for Views. 
 * 
 * Introduces the relationship to a Controller, some basic visual appearance settings like width and height 
 * and provides lifecycle events. 
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.View = function(sId,mSettings) {};
/**
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.afterInit = function(oControlEvent) {  };

/**
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.afterRendering = function(oControlEvent) {  };

/**
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.beforeExit = function(oControlEvent) {  };

/**
 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.beforeRendering = function(oControlEvent) {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.addContent = function(oContent) { return new sap.ui.core.mvc.View(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterInit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br> itself.
 * 
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachAfterInit = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br> itself.
 * 
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachAfterRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeExit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br> itself.
 * 
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachBeforeExit = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br> itself.
 * 
 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachBeforeRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Returns an Element by its id in the context of the View.
 * @param {string} sId view local Id of the Element
 * @return {sap.ui.core.Element} Element by its id or undefined 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Override clone method to avoid conflict between generic cloning of content
 * and content creation as defined by the UI5 Model View Controller lifecycle.
 * 
 * For more details see the development guide section about Model View Controller in UI5.
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.core.Element} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.clone = function(sIdSuffix,aLocalIds) { return new sap.ui.core.Element(); };

/**
 * Convert the given view local Element id to a globally unique id 
 * by prefixing it with the view Id.
 * @param {string} sId view local Id of the Element
 * @return {string} prefixed id
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.createId = function(sId) { return ""; };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.destroyContent = function() { return new sap.ui.core.mvc.View(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterInit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachAfterInit = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachAfterRendering = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeExit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachBeforeExit = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachBeforeRendering = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.View.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterInit to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireAfterInit = function(mArguments) { return new sap.ui.core.mvc.View(); };

/**
 * Fire event afterRendering to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireAfterRendering = function(mArguments) { return new sap.ui.core.mvc.View(); };

/**
 * Fire event beforeExit to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireBeforeExit = function(mArguments) { return new sap.ui.core.mvc.View(); };

/**
 * Fire event beforeRendering to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireBeforeRendering = function(mArguments) { return new sap.ui.core.mvc.View(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * Child Controls of the view
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getContent = function() { return new Array(); };

/**
 * Returns the view's Controller instance or null for a controller-less View.
 * @return {object} Controller of this view.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.View.prototype.getController = function() { return new Object(); };

/**
 * An (optional) method to be implemented by Views.
 * When no controller instance is given at View instantiation time AND this method exists and returns the (package and class) name of a controller,
 * the View tries to load and instantiate the controller and to connect it to itself.
 * @return {string} the name of the controller
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getControllerName = function() { return ""; };

/**
 * Getter for property <code>displayBlock</code>.
 * Whether the CSS display should be set to "block".
 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>displayBlock</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getDisplayBlock = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * The height
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.ui.core.mvc.View.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.View.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns user specific data object
 * @return object viewData
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getViewData = function() {  };

/**
 * Getter for property <code>viewName</code>.
 * Name of the View
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>viewName</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getViewName = function() { return ""; };

/**
 * Getter for property <code>width</code>.
 * The width
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.insertContent = function(oContent,iIndex) { return new sap.ui.core.mvc.View(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>displayBlock</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisplayBlock new value for property <code>displayBlock</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setDisplayBlock = function(bDisplayBlock) { return new sap.ui.core.mvc.View(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setHeight = function(sHeight) { return new sap.ui.core.mvc.View(); };

/**
 * Setter for property <code>viewName</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sViewName new value for property <code>viewName</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setViewName = function(sViewName) { return new sap.ui.core.mvc.View(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setWidth = function(sWidth) { return new sap.ui.core.mvc.View(); };


// ---- sap.ui.core.mvc.ViewType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.mvc.ViewType.toString = function() { return ""; };

// ---- sap.ui.core.mvc.XMLView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/XMLView.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A View defined using (P)XML and HTML markup.
 * @extends sap.ui.core.mvc.View
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.XMLView = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.XMLView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.XMLView.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.XMLView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.OpenState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.OpenState.toString = function() { return ""; };

// ---- sap.ui.core.Orientation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Orientation.toString = function() { return ""; };

// ---- sap.ui.core.Percentage --------------------------------------------------------------------------


// ---- sap.ui.core.Popup --------------------------------------------------------------------------

/**
 * Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup,
 * visually appearing in front of other controls.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Events
 * <ul>
 * <li>{@link #event:opened opened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * @class Popup Class is a helper class for controls that want themselves or
 * parts of themselves or even other aggregated or composed controls
 * or plain HTML content to popup on the screen like menues, dialogs, drop down boxes.
 * 
 * It allows the controls to be aligned to other dom elements
 * using the {@link sap.ui.core.Popup.Dock.html} method. With it you can define where
 * the popup should be docked. One can dock the popup to the top bottom left or right side
 * of a dom ref.
 * 
 * In the case that the popup has no space to show itself in the view port
 * of the current window it tries to open itself to
 * the inverted direction.
 * 
 * <strong>Since 1.12.3</strong> it is possible to add further DOM-element-ids that can get the focus
 * when 'autoclose' is enabled. E.g. the RichTextEditor with running TinyMCE uses this method to
 * be able to focus the Popups of the TinyMCE if the RichTextEditor runs within a Popup/Dialog etc.
 * 
 * To provide an additional DOM-element that can get the focus the following should be done:
 * 	// create an object with the corresponding DOM-id
 * 	var oObject = {
 * 		id : "this_is_the_most_valuable_id_of_the_DOM_element"
 * 	};
 * 
 * // add the event prefix for adding an element to the ID of the corresponding Popup
 * 	var sEventId = "sap.ui.core.Popup.addFocusableContent-" + oPopup.getId();
 * 
 * // fire the event with the created event-id and the object with the DOM-id
 * 	sap.ui.getCore().getEventBus().publish("sap.ui", sEventId, oObject);
 * @param {sap.ui.core.Control | sap.ui.core.Element | DOMNode} oContent the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
 * @param {boolean} [bModal=false] whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.
 * @param {boolean} [bShadow=true] whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)
 * @param {boolean} [bAutoClose=false] whether the popup should automatically close when the focus moves out of the popup
 * @constructor
 * @public
 * 
 */
sap.ui.core.Popup = function(oContent,bModal,bShadow,bAutoClose) {};
/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.Popup.prototype.closed = function(oControlEvent) {  };

/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.Popup.prototype.opened = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.core.Popup</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.Popup</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code>.<br/> itself.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.attachClosed = function(oData,fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'opened' event of this <code>sap.ui.core.Popup</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.Popup</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code>.<br/> itself.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.attachOpened = function(oData,fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * Closes the popup.
 * 
 * If the Popup is already closed or in the process of closing, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous,
 * may lead to inconsistent behavior and is thus not recommended and may even be removed.
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast".  For iDuration == 0 the closing happens synchronously without animation.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.close = function(iDuration) {  };

/**
 * Closes and destroys this instance of Popup.
 * Does not destroy the hosted content.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.destroy = function() {  };

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.core.Popup</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.detachClosed = function(fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'opened' event of this <code>sap.ui.core.Popup</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.detachOpened = function(fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * When the Popup is being destroyed all corresponding references should be
 * deleted as well to prevent any memory leeks.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.Popup with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Popup.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event closed to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Popup.prototype.fireClosed = function(mArguments) { return new sap.ui.core.Popup(); };

/**
 * Fire event opened to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Popup.prototype.fireOpened = function(mArguments) { return new sap.ui.core.Popup(); };

/**
 * Determines whether the pop-up should auto closes or not.
 * @returns {boolean}
 * @since 1.16
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getAutoClose = function() { return false; };

/**
 * Returns this Popup's content.
 * @return {sap.ui.core.Control | DOMRef } the content that has been set previously (if any)
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * This returns true/false if the default followOf method should be used. If a separate followOf-handler was previously added
 * the correspodning function is returned.
 * @returns {boolean | function} if a function was set it is returned otherwise a boolean value whether the follow of is activated
 * @since 1.13.0
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getFollowOf = function() { return false; };

/**
 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
 * @returns {Number}
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getLastZIndex = function() { return null; };

/**
 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
 * @returns {Number}
 * @public
 * 
 */
sap.ui.core.Popup.getLastZIndex = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.core.Popup.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Popup.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value if a Popup is of modal type
 * @return {boolean] bModal whether the Popup is of modal type
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getModal = function() {  };

/**
 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
 * @returns {Number} the next z-index on top of the Popup stack
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getNextZIndex = function() { return null; };

/**
 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
 * @returns {Number} the next z-index on top of the Popup stack
 * @public
 * 
 */
sap.ui.core.Popup.getNextZIndex = function() { return null; };

/**
 * Returns whether the Popup is currently open, closed, or transitioning between these states.
 * @returns {sap.ui.core.OpenState} whether the Popup is opened
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getOpenState = function() { return new sap.ui.core.OpenState(); };

/**
 * Returns whether the Popup is currently open (this includes opening and closing animations).
 * @returns {boolean} whether the Popup is opened (or currently being opened or closed)
 * @public
 * 
 */
sap.ui.core.Popup.prototype.isOpen = function() { return false; };

/**
 * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
 * Content must be capable of being positioned via "position:absolute;"
 * All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.
 * 
 * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.
 * @param {sap.ui.core.Popup.Dock} [my=sap.ui.core.Popup.Dock.CenterCenter] the popup content's reference position for docking
 * @param {sap.ui.core.Popup.Dock} [at=sap.ui.core.Popup.Dock.CenterCenter] the "of" element's reference point for docking to
 * @param {string | sap.ui.core.Element | DOMRef | jQuery | jQuery.Event} [of=document] specifies the reference element to which the given content should dock to
 * @param {string} [offset='0 0'] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @param {string} [collision='flip'] defines how the position of an element should be adjusted in case it overflows the window in some direction.
 * @param {boolean} [followOf=false] defines whether the popup should follow the dock reference when the reference changes its position.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.open = function(iDuration,my,at,of,offset,collision,followOf) {  };

/**
 * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function.
 * When called, the animation functions receive three parameters:
 * - the jQuery object wrapping the DomRef of the popup
 * - the requested animation duration
 * - a function that MUST be called once the animation has completed
 * @param {function} fnOpen
 * @param {function} fnClose
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setAnimations = function(fnOpen,fnClose) { return new sap.ui.core.Popup(); };

/**
 * Used to specify whether the Popup should close as soon as
 * - for non-touch environment: the focus leaves
 * - for touch environment: user clicks the area which is outside the popup itself, the dom elemnt which popup aligns to (except document),
 *  and one of the autoCloseAreas set by calling setAutoCloseAreas.
 * @param {boolean} bAutoClose whether the Popup should close as soon as the focus leaves
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setAutoClose = function(bAutoClose) { return new sap.ui.core.Popup(); };

/**
 * Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled.
 * - non-touch environment: if the focus leaves the Popup but immediately enters one of these areas, the Popup does NOT close.
 * - touch environment: if user clicks one of these areas, the Popup does NOT close.
 * @param {DomRef[]} aAutoCloseAreas an array containing DOM elements considered part of the Popup; a value of null removes all previous areas
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setAutoCloseAreas = function(aAutoCloseAreas) { return new sap.ui.core.Popup(); };

/**
 * Sets the content this instance of the Popup should render.
 * Content must be capable of being positioned via position:absolute;
 * @param {sap.ui.core.Control | DOMRef } oContent
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setContent = function(oContent) { return new sap.ui.core.Popup(); };

/**
 * Sets the durations for opening and closing animations.
 * Null values and values < 0 are ignored.
 * A duration of 0 means no animation.
 * Default value is "fast" which is the jQuery constant for "200 ms".
 * @param {int} iOpenDuration in milliseconds
 * @param {int} iCloseDuration in milliseconds
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setDurations = function(iOpenDuration,iCloseDuration) { return new sap.ui.core.Popup(); };

/**
 * This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf should
 * be set the corresponding listener will be attached.
 * @param {boolean | function | null} followOf a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given.
 * null deletes all followOf settings.
 * @since 1.13.0
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setFollowOf = function(followOf) {  };

/**
 * Sets the ID of the element that should be focused once the popup opens.
 * If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control).
 * If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
 * @param {string} sId the ID of the DOM element to focus
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setInitialFocusId = function(sId) {  };

/**
 * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and
 * prevent attempts to put the focus outside/below the popup.
 * Setting this while the popup is open will change "block layer" immediately.
 * @param {boolean} bModal whether the Popup is of modal type
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setModal = function(bModal,sModalCSSClass) { return new sap.ui.core.Popup(); };

/**
 * Sets the position of the Popup (if you refer to a Control as anchor then do not
 * use the DOMRef of the control which might change after re-renderings).
 * Optional parameters can only be omitted when all subsequent parameters are omitted as well.
 * @param {sap.ui.core.Popup.Dock} my specifies which point of the given Content should be aligned
 * @param {sap.ui.core.Popup.Dock | {left: sap.ui.core.CSSSize, top: sap.ui.core.CSSSize}} at specifies the point of the reference element to which the given Content should be aligned
 * @param {string | sap.ui.core.Element | DOMRef | jQuery | jQuery.Event} [of=document] specifies the reference element to which the given content should be aligned as specified in the other parameters
 * @param {string} [offset='0 0'] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @param {string} [collision] defines how the position of an element should be adjusted in case it overflows the window in some direction. The valid values that refer to jQuery-UI's position parameters are "flip", "fit" and "none".
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setPosition = function(my,at,of,offset,collision) { return new sap.ui.core.Popup(); };

/**
 * Determines whether the Popup should have a shadow (in supporting browsers).
 * This also affects a currently open popup.
 * @param {boolean} bShowShadow whether to show a shadow
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setShadow = function(bShowShadow) { return new sap.ui.core.Popup(); };


// ---- sap.ui.core.Popup.Dock --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Popup.Dock.toString = function() { return ""; };

// ---- sap.ui.core.PopupInterface --------------------------------------------------------------------------


// ---- sap.ui.core.Renderer --------------------------------------------------------------------------

/**
 * Provides some 'extends' functionality for Renderers.<br/> Creates a new
 * object (i.e. static class) that knows its parent (accessible from
 * <code>this._super</code>) and initially forwards method calls to the
 * parents methods.<br/> Methods can be overwritten afterwards as known from
 * JavaScript.
 * @param {object}
 *            oParentClass the definition of the class that should be extended.
 * @return a new class definition that can be enriched.
 * @type object
 * @public
 * 
 * @memberof sap.ui.core.Renderer
 */
sap.ui.core.Renderer.extend = function(oParentClass) { return new Object(); };


// ---- sap.ui.core.RenderManager --------------------------------------------------------------------------

/**
 * Creates an instance of the RenderManager.
 * @class RenderManager that will take care for rendering Controls.
 * 
 * The RenderManager will be available from the sap.ui.core.Core instance (available via <code>sap.ui.getCore()</code>).<br/>It
 * can be used to render Controls and Control-Trees.
 * 
 * The convention for renderers belonging to some controls is the following:
 * <ul>
 * <li>for a Control e.g. <code>sap.ui.controls.InputField</code> there shall be </li>
 * <li>a renderer named <code>sap.ui.controls.InputFieldRenderer</code></li>
 * <ul>
 * @see sap.ui.core.Core
 * @see sap.ui.getCore()
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.core.RenderManager = function() {};
/**
 * Adds a class to the class collection if the name is not empty or null.
 * The class collection is flushed if it is written to the buffer using {@link #writeClasses}
 * @param {string} sName name of the class to be added; null values are ignored
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0|XSS} Classes are written to HTML without validation
 * 
 */
sap.ui.core.RenderManager.prototype.addClass = function(sName) { return new sap.ui.core.RenderManager(); };

/**
 * Adds a style property to the style collection if the value is not empty or null
 * The style collection is flushed if it is written to the buffer using {@link #writeStyle}
 * @param {string} sName name of the CSS property to write
 * @param {string|float|int} value value to write
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0 1|XSS} Styles are written to HTML without validation
 * 
 */
sap.ui.core.RenderManager.prototype.addStyle = function(sName,value) { return new sap.ui.core.RenderManager(); };

/**
 * Cleans up the rendering state of the given control with rendering it.
 * 
 * A control is responsible for the rendering of all its child controls.
 * But in some cases it makes sense that a control does not render all its
 * children based on a filter condition. For example a Carousel control only renders
 * the current visible parts (and maybe some parts before and after the visible area)
 * for performance reasons.
 * If a child was rendered but should not be rendered anymore because the filter condition
 * does not apply anymore this child must be cleaned up correctly (e.g deregistering eventhandlers, ...).
 * 
 * The following example shows how renderControl and cleanupControlWithoutRendering should
 * be used:
 * 
 * render = function(rm, ctrl){
 *   //...
 *   var aAggregatedControls = //...
 *   for(var i=0; i<aAgrregatedControls.length; i++){
 *   	if(//... some filter expression){
 *         rm.renderControl(aAggregatedControls[i]);
 *      }else{
 *         rm.cleanupControlWithoutRendering(aAggregatedControls[i]);
 *      }
 *   }
 *   //...
 * }
 * 
 * Note:
 * The method does not remove DOM of the given control. The callee of this method has to take over the
 * responsibility to cleanup the DOM of the control afterwards.
 * For parents which are rendered with the normal mechanism as shown in the example above this requirement
 * is fulfilled, because the control is not added to the rendering buffer (renderControl is not called) and
 * the DOM is replaced when the rendering cycle is finalized.
 * @param {sap.ui.core.Control} oControl the control that should be cleaned up
 * @public
 * @since 1.22.9
 * 
 */
sap.ui.core.RenderManager.prototype.cleanupControlWithoutRendering = function(oControl) {  };

/**
 * Cleans up the resources associated with this instance.
 * After the instance has been destroyed, it must not be used anymore.
 * Applications should call this function if they don't need the instance any longer.
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.RenderManager with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Searches "to-be-preserved" nodes for the given control id.
 * @param {string} sId control id to search content for.
 * @return {jQuery} a jQuery collection representing the found content
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.findPreservedContent = function(sId) { return null; };

/**
 * Renders the content of the rendering buffer into the provided DOMNode.
 * 
 * This function must not be called within control renderers.
 * 
 * Usage:
 * <pre>
 * // Create a new instance of the RenderManager
 * var rm = sap.ui.getCore().createRenderManager();
 * // Use the writer API to fill the buffers
 * rm.write(...);
 * rm.renderControl(oControl);
 * rm.write(...);
 * ...
 * // Finally flush the buffer into the provided DOM node (The current content is removed)
 * rm.flush(oDomNode);
 * // If the instance is not needed anymore, destroy it
 * rm.destroy();
 * </pre>
 * @param {Element} oTargetDomNode The node in the dom where the buffer should be flushed into.
 * @param {boolean} bDoNotPreserve flag, whether to not preserve (true) the content or to preserve it (false).
 * @param {boolean|int} vInsert flag, whether to append (true) or replace (false) the buffer of the target dom node or to insert at a certain position (int)
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.flush = function(oTargetDomNode,bDoNotPreserve,vInsert) {  };

/**
 * Returns the configuration object
 * Shortcut for <code>sap.ui.getCore().getConfiguration()</code>
 * @return {sap.ui.core.Configuration} the configuration object
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.getConfiguration = function() { return new sap.ui.core.Configuration(); };

/**
 * Renders the given {@link sap.ui.core.Control} and finally returns
 * the content of the rendering buffer.
 * Ensures the buffer is restored to the state before calling this method.
 * @param {sap.ui.core.Control}
 *            oControl the Control whose HTML should be returned.
 * @return {string} the resulting HTML of the provided control
 * @deprecated Since version 0.15.0. Use <code>flush()</code> instead render content outside the rendering phase.
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.getHTML = function(oControl) { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.RenderManager.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the hidden area reference belonging to this window instance.
 * @return {Element} the hidden area reference belonging to this core instance.
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.getPreserveAreaRef = function() { return null; };

/**
 * Returns the renderer class for a given control instance
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @return the renderer class for a given control instance
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.getRenderer = function(oControl) {  };

/**
 * Returns the renderer class for a given control instance
 * @param {sap.ui.core.Control}
 *            oControl the control that should be rendered
 * @type function
 * @return the renderer class for a given control instance
 * @static
 * @public
 * 
 */
sap.ui.core.RenderManager.getRenderer = function(oControl) { return function() {}; };

/**
 * Collects descendants of the given root node that need to be preserved before the root node
 * is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
 * 
 * A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code>
 * attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true,
 * then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute
 * is set automatically. This option is used by UIAreas when they render for the first time and
 * simplifies the handling of predefined HTML content in a web page.
 * 
 * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve'
 * area in the order that they are found. So for direct siblings the order should be stable.
 * @param {Element} oRootNode to search for "to-be-preserved" nodes
 * @param {boolean} [bPreserveRoot=false] whether to preserve the root itself
 * @param {boolean} [bPreserveNodesWithId=false] whether to preserve nodes with an id as well
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.preserveContent = function(oRootNode,bPreserveRoot,bPreserveNodesWithId) {  };

/**
 * Renders the given control to the provided DOMNode.
 * 
 * If to control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control
 * is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended
 * to the provided DOMNode.
 * 
 * This function must not be called within control renderers.
 * @param {sap.ui.core.Control} oControl the Control that should be rendered.
 * @param {Element} oTargetDomNode The node in the dom where the result of the rendering should be inserted.
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.render = function(oControl,oTargetDomNode) {  };

/**
 * Turns the given control into its HTML representation and appends it to the
 * rendering buffer.
 * 
 * If the given control is undefined or null, then nothing is rendered.
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.renderControl = function(oControl) {  };

/**
 * @param {string} sKey
 * @deprecated Not implemented - DO NOT USE
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.translate = function(sKey) {  };

/**
 * Write the given texts to the buffer
 * @param {...string|number} sText (can be a number too)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {*|XSS}
 * 
 */
sap.ui.core.RenderManager.prototype.write = function(sText) { return new sap.ui.core.RenderManager(); };

/**
 * @deprecated Not implemented - DO NOT USE
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeAcceleratorKey = function() { return new sap.ui.core.RenderManager(); };

/**
 * Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML
 * based on the element's properties and associations.
 * 
 * The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.
 * 
 * The following properties/values to ARIA attribute mappings are done (if the element does have such properties):
 * <code>editable===false</code> => <code>aria-readonly="true"</code>
 * <code>enabled===false</code> => <code>aria-disabled="true"</code>
 * <code>visible===false</code> => <code>aria-hidden="true"</code>
 * <code>required===true</code> => <code>aria-required="true"</code>
 * <code>selected===true</code> => <code>aria-selected="true"</code>
 * <code>checked===true</code> => <code>aria-checked="true"</code>
 * 
 * Additionally the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write
 * the id lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.
 * 
 * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
 * have to check whether it fullfills their requirements. In case of problems (for example the RadioButton has a
 * <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated
 * result of this function can be influenced via the parameter <code>mProps</code> as described below.
 * 
 * The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or
 * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys
 * (Exception: Attribute 'role' does not get the prefix 'aria-').
 * 
 * Examples:
 * <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the precense or absence of
 * the visibility property.
 * <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the precense
 * or absence of the visibility property.
 * The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>.
 * To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes
 * the following format can be used:
 * <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb"
 * is the auto-generated part based on the association <code>ariaDescribedBy</code>).
 * @param {sap.ui.core.Element}
 *            [oElement] the element whose accessibility state should be rendered
 * @param {Object}
 *            [mProps] a map of properties that should be added additionally or changed.
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeAccessibilityState = function(oElement,mProps) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the attribute and its value into the HTML
 * @param {string} sName the name of the attribute
 * @param {string | number | boolean} value the value of the attribute
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0 1|XSS} Attributes are written to HTML without validation
 * 
 */
sap.ui.core.RenderManager.prototype.writeAttribute = function(sName,value) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the attribute and its value into the HTML
 * 
 * The value is properly escaped to avoid XSS attacks.
 * @param {string} sName the name of the attribute
 * @param {any} vValue the value of the attribute
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0|XSS}
 * 
 */
sap.ui.core.RenderManager.prototype.writeAttributeEscaped = function(sName,vValue) { return new sap.ui.core.RenderManager(); };

/**
 * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush).
 * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are
 * added by default from the currently rendered control. If an oElement is given, this Element's custom style
 * classes are added instead. If oElement === false, no custom style classes are added.
 * @param {sap.ui.core.Element | boolean} [oElement] an Element from which to add custom style classes (instead of adding from the control itself)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeClasses = function(oElement) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the controls data into the HTML.
 * Control Data consists at least of the id of a control
 * @param {sap.ui.core.Control} oControl the control whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeControlData = function(oControl) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the elements data into the HTML.
 * Element Data consists at least of the id of a element
 * @param {sap.ui.core.Element} oElement the element whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeElementData = function(oElement) { return new sap.ui.core.RenderManager(); };

/**
 * Escape text for HTML and write it to the buffer
 * @param {string} sText
 * @param {boolean} bLineBreaks Whether to convert linebreaks into <br> tags
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeEscaped = function(sText,bLineBreaks) { return new sap.ui.core.RenderManager(); };

/**
 * Writes and flushes the style collection
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeStyles = function() { return new sap.ui.core.RenderManager(); };


// ---- sap.ui.core.ResizeHandler --------------------------------------------------------------------------

/**
 * Deregisters the registered handler for resize events with the given ID.
 * @param {string} sId Registration ID
 * @public
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.deregister = function(sId) {  };

/**
 * Creates a new subclass of class sap.ui.core.ResizeHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.ResizeHandler.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Registers the given handler for resize events on the given
 * DOM reference or Control.
 * In case the core is not initialized yet, the timer cannot be registered and this method
 * will return null. Please use sap.ui.getCore().attachInit() with a callback as parameter 
 * that calls ResizeHandler.register().
 * @param {Element|sap.ui.core.Control} oRef the Control or the DOM reference for which the given handler should be registered (beside the window)
 * @param {function} fHandler the handler which should be called on a resize event
 * @return {string} Registration ID which can be used for deregistering
 * @public
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.register = function(oRef,fHandler) { return ""; };


// ---- sap.ui.core.routing.HashChanger --------------------------------------------------------------------------

/**
 * @class Class for manipulating and receiving changes of the browserhash with the hasher framework.
 * Fires a "hashChanged" event if the browser hash changes.
 * @extends sap.ui.base.EventProvider
 * @public
 * 
 */
sap.ui.core.routing.HashChanger = function() {};
/**
 * Cleans the event registration
 * @see sap.ui.base.Object.prototype.destroy
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.routing.HashChanger with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.HashChanger.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires the hashchanged event, may be extended to modify the hash before fireing the event
 * @param {string} newHash the new hash of the browser
 * @param {string} oldHash - the previous hash
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.fireHashChanged = function(newHash,oldHash) {  };

/**
 * Gets the current hash
 * @return {string} the current hash
 * @public
 * 
 */
sap.ui.core.routing.HashChanger.prototype.getHash = function() { return ""; };

/**
 * Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked for the first time.
 * @public
 * @static
 * 
 */
sap.ui.core.routing.HashChanger.getInstance = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.routing.HashChanger.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.HashChanger.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Will start listening to hashChanges with the parseHash function.
 * This will also fire a hashchanged event with the initial hash.
 * @public
 * @return false if it was initialized before, true if it was initialized the first time
 * 
 */
sap.ui.core.routing.HashChanger.prototype.init = function() {  };

/**
 * Replaces the hash to a certain value. When using the replace function no browser history is written. 
 * If you want to have an entry in the browser history, please use set setHash function.
 * @param {string} sHash the hash
 * @public
 * 
 */
sap.ui.core.routing.HashChanger.prototype.replaceHash = function(sHash) {  };

/**
 * Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the new one
 * @param {sap.ui.core.routing.HashChanger} oHashChanger the new instance for the global singleton
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.replaceHashChanger = function(oHashChanger) {  };

/**
 * Sets the hash to a certain value. When using the set function a browser history  entry is written. 
 * If you do not want to have an entry in the browser history, please use set replaceHash function.
 * @param {string} sHash the hash
 * @public
 * 
 */
sap.ui.core.routing.HashChanger.prototype.setHash = function(sHash) {  };


// ---- sap.ui.core.routing.History --------------------------------------------------------------------------

/**
 * Used to determine the {@link sap.ui.core.HistoryDirection} of the current or a future navigation,
 * done with a {@link sap.ui.core.routing.Router} or {@link sap.ui.core.routing.HashChanger}.
 * 
 * <strong>ATTENTION:</strong> this class will not be accurate if someone does hash-replacement without the named classes above
 * If you are manipulating the hash directly this class is not supported anymore.
 * @param {sap.ui.core.routing.HashChanger} oHashChanger required, without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.
 * @public
 * @class
 * 
 */
sap.ui.core.routing.History = function(oHashChanger) {};
/**
 * Determines what the navigation direction for a newly given hash would be
 * It will say Unknown if there is a history foo - bar (current history) - foo
 * If you now ask for the direction of the hash "foo" you get Unknown because it might be backwards or forwards.
 * For hash replacements, the history stack will be replaced at this position for the history.
 * @param {string} [sNewHash] optional, if this parameter is not passed the last hashChange is taken.
 * @returns {sap.ui.core.routing.HistoryDirection} or undefined, if no navigation has taken place yet.
 * @public
 * 
 */
sap.ui.core.routing.History.prototype.getDirection = function(sNewHash) { return new sap.ui.core.routing.HistoryDirection(); };

/**
 * @public 
 * @returns { sap.ui.core.routing.History } a global singleton that gets created as soon as the sap.ui.core.routing.History is required
 * 
 */
sap.ui.core.routing.History.getInstance = function() { return new sap.ui.core.routing.History(); };

/**
 * gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned
 * @returns {string} or undefined
 * @public
 * 
 */
sap.ui.core.routing.History.prototype.getPreviousHash = function() { return ""; };


// ---- sap.ui.core.routing.HistoryDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.routing.HistoryDirection.toString = function() { return ""; };

// ---- sap.ui.core.routing.Route --------------------------------------------------------------------------

/**
 * Instantiates a SAPUI5 Route
 * @class
 * @param {sap.ui.core.routing.Router} The router instance, the route will be added to.
 * @param {object} oConfig configuration object for the route
 * @param {string} [oConfig.pattern] the url pattern where it needs to match again. A pattern may consist of the following:
 * <ul>
 * <li>
 * hardcoded parts: "pattern" : "product/settings" - this pattern will only match if the hash of the browser is product/settings and no arguments will be passed to the events of the route.</br>
 * </li>
 * <li>
 * mandatory parameters: "pattern" : "product/{id}" - {id} is a mandatory parameter, e. g. the following hashes would match: product/5, product/3. The pattenMatched event will get 5 or 3 passed as id in its arguments.The hash product/ will not match.</br>
 * </li>
 * <li>
 * optional parameters: "pattern" : "product/{id}/detail/:detailId:" - :detailId: is an optional parameter, e. g. the following hashes would match: product/5/detail, product/3/detail/2</br>
 * </li>
 * <li>
 * query parameters: "pattern" : "product{?query}" // {?query} allows you to pass queries with any parameters, e. g. the following hashes would match: product?first=firstValue, product?first=firstValue&second=secondValue</br>
 * </li>
 * <li>
 * rest as string parameters: "pattern" : ":all*:" - this pattern will define an optional variable that will pass the whole hash as string to the routing events. It may be used to define a catchall route, e. g. the following hashes would match: foo, product/5/3, product/5/detail/3/foo. You can also combine it with the other variables but make sure a variable with a * is the last one.</br>
 * </ul>
 * @param {string} oConfig.name the name of the route - it will be used to retrieve the route from the router, it needs to be unique per router instance.</li>
 * @param {string} [oConfig.view] The name of a view that will be created, the first time this route will be matched. To place the view into a Control use the targetAggregation and targetControl. Views will only be created once per Router.</li>
 * @param {string} [oConfig.viewType] The type of the view that is going to be created. eg: "XML", "JS"</li>
 * @param {string} [oConfig.viewPath] A prefix that will be prepended in front of the view eg: view is set to "myView" and viewPath is set to "myApp" - the created view will be "myApp.myView".</li>
 * @param {string} [oConfig.targetParent] the id of the parent of the targetControl - This should be the id view your targetControl is located in. By default, this will be the view created by a component, or if the Route is a subroute the view of the parent route is taken. You only need to specify this, if you are not using a router created by a component on your top level routes.</li>
 * @param {string} [oConfig.targetControl] Views will be put into a container Control, this might be a {@link sap.ui.ux3.Shell} control or a {@link sap.m.NavContainer} if working with mobile, or any other container. The id of this control has to be put in here.</li>
 * @param {string} [oConfig.targetAggregation] The name of an aggregation of the targetControl, that contains views. Eg: a {@link sap.m.NavContainer} has an aggregation "pages", another Example is the {@link sap.ui.ux3.Shell} it has "content".</li>
 * @param {boolean} [oConfig.clearTarget] Defines a boolean that can be passed to specify if the aggregation should be cleared before adding the View to it. When using a {@link sap.ui.ux3.Shell} this should be true. For a {@link sap.m.NavContainer} it should be false.</li>
 * @param {sap.ui.core.routing.Route} [oParent] The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent(if provided).
 * @public
 * 
 */
sap.ui.core.routing.Route = function(The,oConfig,oParent) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.attachMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.attachPatternMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.detachMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.detachPatternMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Creates a new subclass of class sap.ui.core.routing.Route with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Route.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.routing.Route.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Route.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Return the pattern of the route. If there are multiple patterns, the first pattern is returned
 * @return {string} the routes pattern
 * @public
 * 
 */
sap.ui.core.routing.Route.prototype.getPattern = function() { return ""; };

/**
 * Returns the URL for the route and replaces the placeholders with the values in oParameters
 * @param {object} oParameters Parameters for the route
 * @return {string} the unencoded pattern with interpolated arguments
 * @public
 * 
 */
sap.ui.core.routing.Route.prototype.getURL = function(oParameters) { return ""; };


// ---- sap.ui.core.routing.Router --------------------------------------------------------------------------

/**
 * Instantiates a SAPUI5 Router
 * @class
 * @extends sap.ui.base.EventProvider
 * @param {object|array} [oRoutes] may contain many Route configurations as @see sap.ui.core.routing.Route#constructor.<br/>
 * Each of the routes contained in the array/object will be added to the router.<br/>
 * The name attribute of a route is special - it may also be a key of the route. Eg a route with the name "RouteName" : { RouteName : { pattern : "ThePattern" } , AnotherRouteName : {...}}
 * 
 * The values that may be provided are the same as in @see sap.ui.core.routing.Route#constructor
 * @param {object} [oConfig] Default values for route configuration - also takes the same parameters as @see sap.ui.core.routing.Route#constructor<br/>
 * Eg: the config object specifies : { viewType : "XML" }<br/>
 * The Routes look like this: [ { name : "xmlRoute" }, { name : "jsRoute" , viewType : "JS" } ]<br/>
 * <br/>
 * Then the effective config will look like this: <br/>
 * [ { name : "xmlRoute" , viewType : "XML" }, { name : "jsRoute" , viewType : "JS" } ]<br/>
 * <br/>
 * Since the xmlRoute does not specify its viewType, XML is taken from the config object. The jsRoute is specifying it, so the viewType will be JS.
 * @param {sap.ui.core.UIComponent} [oOwner] the owner of all the views that will be created by this Router.
 * @public
 * 
 */
sap.ui.core.routing.Router = function(oRoutes,oConfig,oOwner) {};
/**
 * Adds a route to the router
 * @param {object} oConfig configuration object for the route @see sap.ui.core.routing.Route#constructor
 * @param {sap.ui.core.routing.Route} oParent the parent of the route
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.addRoute = function(oConfig,oParent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachRouteMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachRoutePatternMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'viewCreated' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachViewCreated = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Removes the router from the hash changer @see sap.ui.core.routing.HashChanger
 * @public
 * @returns { sap.ui.core.routing.Router } this for chaining.
 * 
 */
sap.ui.core.routing.Router.prototype.destroy = function() { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachRouteMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachRoutePatternMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'viewCreated' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachViewCreated = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Creates a new subclass of class sap.ui.core.routing.Router with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Router.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event routeMatched to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireRouteMatched = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Fire event routePatternMatched to attached listeners.
 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireRoutePatternMatched = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Fire event viewCreated to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireViewCreated = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Returns a metadata object for class sap.ui.core.routing.Router.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Router.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the Route with a name, if no route is found undefined is returned
 * @param {string} sName Name of the route
 * @return {sap.ui.core.routing.Route} the route with the provided name or undefined.
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Router.prototype.getRoute = function(sName) { return new sap.ui.core.routing.Route(); };

/**
 * Get a registered router
 * @param {string} sName Name of the router
 * @return {sap.ui.core.routing.Router} The router with the specified name, else undefined
 * @public
 * 
 */
sap.ui.core.routing.Router.getRouter = function(sName) { return new sap.ui.core.routing.Router(); };

/**
 * Returns the URL for the route and replaces the placeholders with the values in oParameters
 * @param {string} sName Name of the route
 * @param {object} oParameters Parameters for the route
 * @return {string} the unencoded pattern with interpolated arguments
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.getURL = function(sName,oParameters) { return ""; };

/**
 * Returns a cached view for a given name or creates it if it does not yet exists
 * @param {string} sViewName Name of the view
 * @param {string} sViewType Type of the view
 * @param {string} sViewId Optional view id
 * @return {sap.ui.core.mvc.View} the view instance
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.getView = function(sViewName,sViewType,sViewId) { return new sap.ui.core.mvc.View(); };

/**
 * Attaches the router to the hash changer @see sap.ui.core.routing.HashChanger
 * @public
 * @returns {sap.ui.core.routing.Router} this for chaining.
 * 
 */
sap.ui.core.routing.Router.prototype.initialize = function() { return new sap.ui.core.routing.Router(); };

/**
 * Navigates to a specific route defining a set of parameters. The Parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be encoded.
 * @param {string} sName Name of the route
 * @param {object} oParameters Parameters for the route
 * @param {boolean} bReplace Defines if the hash should be replaced (no browser history entry) or set (browser history entry)
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.navTo = function(sName,oParameters,bReplace) {  };

/**
 * Will trigger routing events + place targets for routes matching the string
 * @param {string} sNewHash a new hash
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.parse = function(sNewHash) {  };

/**
 * Registers the router to access it from another context. Use sap.ui.routing.Router.getRouter() to receive the instance
 * @param {string} sName Name of the router
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.register = function(sName) {  };

/**
 * Adds or overwrites a view in the viewcache of the router, the viewname serves as a key
 * @param {string} sViewName Name of the view
 * @param {sap.ui.core.mvc.View} oView the view instance
 * @since 1.22
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.setView = function(sViewName,oView) {  };

/**
 * Stops to listen to the hashChange of the browser.</br>
 * If you want the router to start again, call initialize again.
 * @returns { sap.ui.core.routing.Router } this for chaining.
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.stop = function() { return new sap.ui.core.routing.Router(); };


// ---- sap.ui.core.ScrollBar --------------------------------------------------------------------------

/**
 * Constructor for a new ScrollBar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVertical vertical} : boolean (default: true)</li>
 * <li>{@link #getScrollPosition scrollPosition} : int</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentSize contentSize} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSteps steps} : int</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:scroll scroll} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ScrollBar control can be used for virtual scrolling of a certain area.
 * This means: to simulate a very large scrollable area when technically the area is small and the control takes care of displaying the respective part only. E.g. a Table control can take care of only rendering the currently visible rows and use this ScrollBar control to make the user think he actually scrolls through a long list.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar = function(sId,mSettings) {};
/**
 * Scroll event.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.ScrollBarAction} oControlEvent.getParameters.action Actions are: Click on track, button, drag of thumb, or mouse wheel click.
 * @param {boolean} oControlEvent.getParameters.forward Direction of scrolling: back (up) or forward (down).
 * @param {int} oControlEvent.getParameters.newScrollPos Current Scroll position either in pixels or in steps.
 * @param {int} oControlEvent.getParameters.oldScrollPos Old Scroll position - can be in pixels or in steps.
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.scroll = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'scroll' event of this <code>sap.ui.core.ScrollBar</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.ScrollBar</code>.<br> itself.
 * 
 * Scroll event.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar</code>.<br/> itself.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.attachScroll = function(oData,fnFunction,oListener) { return new sap.ui.core.ScrollBar(); };

/**
 * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
 * @param {string} oOwnerDomRef
 *         Dom ref of the control that uses the scrollbar
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.bind = function(oOwnerDomRef) {  };

/**
 * Detach event handler <code>fnFunction</code> from the 'scroll' event of this <code>sap.ui.core.ScrollBar</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.detachScroll = function(fnFunction,oListener) { return new sap.ui.core.ScrollBar(); };

/**
 * Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ScrollBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event scroll to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'action' of type <code>sap.ui.core.ScrollBarAction</code>Actions are: Click on track, button, drag of thumb, or mouse wheel click.</li>
 * <li>'forward' of type <code>boolean</code>Direction of scrolling: back (up) or forward (down).</li>
 * <li>'newScrollPos' of type <code>int</code>Current Scroll position either in pixels or in steps.</li>
 * <li>'oldScrollPos' of type <code>int</code>Old Scroll position - can be in pixels or in steps.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ScrollBar.prototype.fireScroll = function(mArguments) { return new sap.ui.core.ScrollBar(); };

/**
 * Getter for property <code>contentSize</code>.
 * Size of the scrollable content (in pixels).
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentSize</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getContentSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.ui.core.ScrollBar.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.ScrollBar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>scrollPosition</code>.
 * Scroll position in steps or pixels.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>scrollPosition</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getScrollPosition = function() { return 0; };

/**
 * Getter for property <code>size</code>.
 * Size of the Scrollbar (in pixels).
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>steps</code>.
 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>steps</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getSteps = function() { return 0; };

/**
 * Getter for property <code>vertical</code>.
 * Orientation. Defines if the Scrollbar is vertical or horizontal.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getVertical = function() { return false; };

/**
 * Page Down is used to scroll one page forward.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.pageDown = function() {  };

/**
 * Page Up is used to scroll one page back.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.pageUp = function() {  };

/**
 * Setter for property <code>contentSize</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentSize new value for property <code>contentSize</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setContentSize = function(sContentSize) { return new sap.ui.core.ScrollBar(); };

/**
 * Setter for property <code>scrollPosition</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iScrollPosition new value for property <code>scrollPosition</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setScrollPosition = function(iScrollPosition) { return new sap.ui.core.ScrollBar(); };

/**
 * Setter for property <code>size</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sSize new value for property <code>size</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setSize = function(sSize) { return new sap.ui.core.ScrollBar(); };

/**
 * Setter for property <code>steps</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iSteps new value for property <code>steps</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setSteps = function(iSteps) { return new sap.ui.core.ScrollBar(); };

/**
 * Setter for property <code>vertical</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVertical new value for property <code>vertical</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setVertical = function(bVertical) { return new sap.ui.core.ScrollBar(); };

/**
 * Unbinds the mouse wheel scroll event of the control that has the scrollbar
 * @param {string} oOwnerDomRef
 *         Dom ref of the Control that uses the scrollbar
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.unbind = function(oOwnerDomRef) {  };


// ---- sap.ui.core.ScrollBarAction --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ScrollBarAction.toString = function() { return ""; };

// ---- sap.ui.core.Scrolling --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Scrolling.toString = function() { return ""; };

// ---- sap.ui.core.search.OpenSearchProvider --------------------------------------------------------------------------

/**
 * Constructor for a new search/OpenSearchProvider.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSuggestUrl suggestUrl} : sap.ui.core.URI</li>
 * <li>{@link #getSuggestType suggestType} : string (default: json)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.search.SearchProvider#constructor sap.ui.core.search.SearchProvider}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A SearchProvider which uses the OpenSearch protocol (either JSON or XML).
 * @extends sap.ui.core.search.SearchProvider
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.search.OpenSearchProvider = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.search.OpenSearchProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.search.OpenSearchProvider.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.search.OpenSearchProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>suggestType</code>.
 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
 * 
 * Default value is <code>json</code>
 * @return {string} the value of property <code>suggestType</code>
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.getSuggestType = function() { return ""; };

/**
 * Getter for property <code>suggestUrl</code>.
 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>suggestUrl</code>
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.getSuggestUrl = function() { return new sap.ui.core.URI(); };

/**
 * Setter for property <code>suggestType</code>.
 * 
 * Default value is <code>json</code>.
 * @param {string} sSuggestType new value for property <code>suggestType</code>
 * @return {sap.ui.core.search.OpenSearchProvider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.setSuggestType = function(sSuggestType) { return new sap.ui.core.search.OpenSearchProvider(); };

/**
 * Setter for property <code>suggestUrl</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sSuggestUrl new value for property <code>suggestUrl</code>
 * @return {sap.ui.core.search.OpenSearchProvider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.setSuggestUrl = function(sSuggestUrl) { return new sap.ui.core.search.OpenSearchProvider(); };

/**
 * Call this function to get suggest values from the search provider.
 * The given callback function is called with the suggest value (type 'string', 1st parameter)
 * and an array of the suggestions (type '[string]', 2nd parameter).
 * @param {string} sValue The value for which suggestions are requested.
 * @param {function} fCallback The callback function which is called when the suggestions are available.
 * @type void
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.suggest = function(sValue,fCallback) { return null; };


// ---- sap.ui.core.search.SearchProvider --------------------------------------------------------------------------

/**
 * Constructor for a new search/SearchProvider.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Abstract base class for all SearchProviders which can be e.g. attached to a SearchField. Do not create instances of this class, but use a concrete sub class instead.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.search.SearchProvider = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.search.SearchProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>icon</code>.
 * Icon of the Search Provider
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.core.search.SearchProvider.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.search.SearchProvider.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.search.SearchProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sIcon new value for property <code>icon</code>
 * @return {sap.ui.core.search.SearchProvider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.search.SearchProvider.prototype.setIcon = function(sIcon) { return new sap.ui.core.search.SearchProvider(); };

/**
 * Call this function to get suggest values from the search provider.
 * The given callback function is called with the suggest value (type 'string', 1st parameter)
 * and an array of the suggestions (type '[string]', 2nd parameter).
 * @param {string} sValue The value for which suggestions are requested.
 * @param {function} fnCallback The callback function which is called when the suggestions are available.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.search.SearchProvider.prototype.suggest = function(sValue,fnCallback) {  };


// ---- sap.ui.core.SeparatorItem --------------------------------------------------------------------------

/**
 * Constructor for a new SeparatorItem.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item, sap.ui.core.Element,
 * sap.ui.base.EventProvider, and sap.ui.base.Object.
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.SeparatorItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.SeparatorItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.SeparatorItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.SeparatorItem.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.support.Support.EventType --------------------------------------------------------------------------


// ---- sap.ui.core.TextAlign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.TextAlign.toString = function() { return ""; };

// ---- sap.ui.core.TextDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.TextDirection.toString = function() { return ""; };

// ---- sap.ui.core.theming --------------------------------------------------------------------------


// ---- sap.ui.core.theming.Parameters --------------------------------------------------------------------------

/**
 * Returns the current value for the given CSS parameter.
 * If no parameter is given, a map containing all parameters is returned. This map is a copy, so changing values in the map does not have any effect.
 * For any other input or an undefined parameter name, the result is undefined.
 * @param {string} sName the CSS parameter name
 * @returns {any} the CSS parameter value
 * @public
 * 
 * @memberof sap.ui.core.theming.Parameters
 */
sap.ui.core.theming.Parameters.get = function(sName) { return null; };

/**
 * Resets the CSS parameters which finally will reload the parameters
 * the next time they are queried via the method <code>get</code>.
 * @public
 * 
 * @memberof sap.ui.core.theming.Parameters
 */
sap.ui.core.theming.Parameters.reset = function() {  };


// ---- sap.ui.core.Title --------------------------------------------------------------------------

/**
 * Constructor for a new Title.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLevel level} : sap.ui.core.TitleLevel</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Represents a title element that can be used for aggregation with other controls
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Title = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.Title with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Title.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>emphasized</code>.
 * If set the title is displayed emphasized.
 * This feature is nor supported by all controls using the Title.control.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>emphasized</code>
 * @public
 * 
 */
sap.ui.core.Title.prototype.getEmphasized = function() { return false; };

/**
 * Getter for property <code>icon</code>.
 * Defines the URL for icon display
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.core.Title.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>level</code>.
 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
 * 
 * Currently not all controls using the Title.control supporting this property.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TitleLevel} the value of property <code>level</code>
 * @public
 * 
 */
sap.ui.core.Title.prototype.getLevel = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Returns a metadata object for class sap.ui.core.Title.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.Title.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * Defines the title text
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.Title.prototype.getText = function() { return ""; };

/**
 * Setter for property <code>emphasized</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEmphasized new value for property <code>emphasized</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Title.prototype.setEmphasized = function(bEmphasized) { return new sap.ui.core.Title(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Title.prototype.setIcon = function(sIcon) { return new sap.ui.core.Title(); };

/**
 * Setter for property <code>level</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TitleLevel} sLevel new value for property <code>level</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Title.prototype.setLevel = function(sLevel) { return new sap.ui.core.Title(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Title.prototype.setText = function(sText) { return new sap.ui.core.Title(); };


// ---- sap.ui.core.TitleLevel --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.TitleLevel.toString = function() { return ""; };

// ---- sap.ui.core.tmpl.DOMAttribute --------------------------------------------------------------------------

/**
 * Constructor for a new tmpl/DOMAttribute.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Represents a DOM attribute of a DOM element.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @experimental Since version 1.15. 
 * The templating might be changed in future versions.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMAttribute = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMAttribute.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.DOMAttribute.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMAttribute.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * Name of the DOM attribute
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>value</code>.
 * Value of the DOM attribute
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.getValue = function() { return ""; };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.ui.core.tmpl.DOMAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.setName = function(sName) { return new sap.ui.core.tmpl.DOMAttribute(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue new value for property <code>value</code>
 * @return {sap.ui.core.tmpl.DOMAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.setValue = function(sValue) { return new sap.ui.core.tmpl.DOMAttribute(); };


// ---- sap.ui.core.tmpl.DOMElement --------------------------------------------------------------------------

/**
 * Constructor for a new tmpl/DOMElement.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTag tag} : string (default: span)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.ui.core.tmpl.DOMAttribute[]</li>
 * <li>{@link #getElements elements} : sap.ui.core.tmpl.DOMElement[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @experimental Since version 1.15. 
 * The templating might be changed in future versions.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMElement = function(sId,mSettings) {};
/**
 * Adds some attribute into the aggregation named <code>attributes</code>.
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *            oAttribute the attribute to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.addAttribute = function(oAttribute) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Adds some element into the aggregation named <code>elements</code>.
 * @param {sap.ui.core.tmpl.DOMElement}
 *            oElement the element to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.addElement = function(oElement) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only. 
 * When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute. 
 * In this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.
 * @param {string} sName
 *         The name of the DOM attribute.
 * @param {string} sValue
 *         The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.
 * @return {any} value of attribute or <code>this</code> when called as a setter
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.attr = function(sName,sValue) { return null; };

/**
 * Destroys all the attributes in the aggregation
 * named <code>attributes</code>.
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.destroyAttributes = function() { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Destroys all the elements in the aggregation
 * named <code>elements</code>.
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.destroyElements = function() { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMElement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * DOM attributes which are rendered as part of the DOM element and bindable
 * @return {sap.ui.core.tmpl.DOMAttribute[]}
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getAttributes = function() { return new Array(); };

/**
 * Getter for aggregation <code>elements</code>.<br/>
 * Nested DOM elements to support nested bindable structures
 * @return {sap.ui.core.tmpl.DOMElement[]}
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getElements = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.DOMElement.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMElement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>tag</code>.
 * The HTML-tag of the DOM element which contains the text
 * 
 * Default value is <code>span</code>
 * @return {string} the value of property <code>tag</code>
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getTag = function() { return ""; };

/**
 * Getter for property <code>text</code>.
 * The text content of the DOM element
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getText = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute</code> in the aggregation named <code>attributes</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *           oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.tmpl.DOMElement</code> in the aggregation named <code>elements</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.tmpl.DOMElement}
 *           oElement the element whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.indexOfElement = function(oElement) { return 0; };

/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Inserts a element into the aggregation named <code>elements</code>.
 * @param {sap.ui.core.tmpl.DOMElement}
 *            oElement the element to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the element should be inserted at; for
 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the element is inserted at
 *              the last position
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.insertElement = function(oElement,iIndex) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.tmpl.DOMAttribute[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>elements</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.tmpl.DOMElement[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAllElements = function() { return new Array(); };

/**
 * Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.
 * @param {string} sName
 *         The name of the DOM attribute.
 * @return {sap.ui.core.tmpl.DOMElement}
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAttr = function(sName) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 * @param {int | string | sap.ui.core.tmpl.DOMAttribute} vAttribute the attributeto remove or its index or id
 * @return {sap.ui.core.tmpl.DOMAttribute} the removed attribute or null
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAttribute = function(vAttribute) { return new sap.ui.core.tmpl.DOMAttribute(); };

/**
 * Removes an element from the aggregation named <code>elements</code>.
 * @param {int | string | sap.ui.core.tmpl.DOMElement} vElement the elementto remove or its index or id
 * @return {sap.ui.core.tmpl.DOMElement} the removed element or null
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeElement = function(vElement) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Setter for property <code>tag</code>.
 * 
 * Default value is <code>span</code>.
 * @param {string} sTag new value for property <code>tag</code>
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.setTag = function(sTag) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.setText = function(sText) { return new sap.ui.core.tmpl.DOMElement(); };


// ---- sap.ui.core.tmpl.HandlebarsTemplate --------------------------------------------------------------------------

/**
 * Creates and initializes a new handlebars template with the given <code>sId</code> 
 * and settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. 
 * @param {string}
 *            [sId] optional id for the new template; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * @class The class for Handlebars Templates.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.26.9
 * @experimental Since 1.15.0. The Template concept is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.tmpl.HandlebarsTemplate = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.HandlebarsTemplate.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.HandlebarsTemplate.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.HandlebarsTemplate.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.tmpl.Template --------------------------------------------------------------------------

/**
 * Creates and initializes a new template with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. 
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string}
 *            [sId] optional id for the new template; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * @class Base Class for Template.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.26.9
 * @experimental Since 1.15.0. The Template concept is still under construction, so some implementation details can be changed in future.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.Template = function(sId,mSettings) {};
/**
 * Creates an anonymous TemplateControl for the Template.
 * @param {string} sId the control ID
 * @param {object} [oContext] the context for the renderer/templating
 * @param {sap.ui.core.mvc.View} oView
 * @return {sap.ui.core.tmpl.TemplateControl} the created control instance
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.createControl = function(sId,oContext,oView) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Declares a new control based on this template and returns the created 
 * class / constructor function. The class is based on the information coming 
 * from the abstract functions <code>createMetadata</code> and 
 * <code>createRenderer</code>.
 * @param {string} sControl the fully qualified name of the control
 * @return {function} the created class / constructor function
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.declareControl = function(sControl) { return function() {}; };

/**
 * Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.Template.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>content</code>.
 * The Template definition as a String.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>content</code>
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.getContent = function() { return ""; };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.Template.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.Template.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * parses the given path and extracts the model and path
 * @param {string} sPath the path
 * @return {object} the model and the path 
 * @protected
 * @static
 * 
 */
sap.ui.core.tmpl.Template.parsePath = function(sPath) { return new Object(); };

/**
 * Creates an anonymous TemplateControl for the Template and places the control 
 * into the specified DOM element.
 * @param {string|DomRef} oRef the id or the DOM reference where to render the template
 * @param {object} [oContext] The context to use to evaluate the Template. It will be applied as value for the context property of the created control.
 * @param {string|int} [vPosition] Describes the position where the control should be put into the container
 * @param {boolean} bInline
 * @return {sap.ui.core.tmpl.TemplateControl} the created control instance
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.placeAt = function(oRef,oContext,vPosition,bInline) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Setter for property <code>content</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sContent new value for property <code>content</code>
 * @return {sap.ui.core.tmpl.Template} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.setContent = function(sContent) { return new sap.ui.core.tmpl.Template(); };


// ---- sap.ui.core.tmpl.TemplateControl --------------------------------------------------------------------------

/**
 * Constructor for a new tmpl/TemplateControl.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContext context} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This is the base class for all template controls. Template controls are declared based on templates.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @experimental Since version 1.15. 
 * The templating might be changed in future versions.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.TemplateControl = function(sId,mSettings) {};
/**
 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.afterRendering = function(oControlEvent) {  };

/**
 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.beforeRendering = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br> itself.
 * 
 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/> itself.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.attachAfterRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br> itself.
 * 
 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/> itself.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.attachBeforeRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Creates a pseudo binding for a aggregation to get notified once the property 
 * changes to invalidate the control and trigger a re-rendering.
 * @param {string} sPath the binding path
 * @return {any} the value of the path
 * @protected 
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.bindList = function(sPath) { return null; };

/**
 * Creates a pseudo binding for a property to get notified once the property 
 * changes to invalidate the control and trigger a re-rendering.
 * @param {string} sPath the binding path
 * @return {any} the value of the path
 * @protected 
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.bindProp = function(sPath) { return null; };

/**
 * compiles (creates and registers) a new control
 * @param {object} mSettings the settings for the new control
 * @param {string} [sParentPath] the parent path for the control
 * @param {boolean} [bDoNotAdd] if true, then the control will not be 
 *          added to the _controls aggregation
 * @param {sap.ui.core.mvc.View} oView
 * @return {sap.ui.core.Control} new control instance 
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.createControl = function(mSettings,sParentPath,bDoNotAdd,oView) { return new sap.ui.core.Control(); };

/**
 * compiles (creates and registers) a new DOM element
 * @param {object} mSettings the settings for the new DOM element
 * @param {string} [sParentPath] the parent path for the DOM element
 * @param {boolean} [bDoNotAdd] if true, then the control will not be 
 *          added to the _controls aggregation
 * @return {sap.ui.core.Control} new DOM element instance 
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.createDOMElement = function(mSettings,sParentPath,bDoNotAdd) { return new sap.ui.core.Control(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.detachAfterRendering = function(fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.detachBeforeRendering = function(fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.TemplateControl.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterRendering to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.fireAfterRendering = function(mArguments) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Fire event beforeRendering to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.fireBeforeRendering = function(mArguments) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Getter for property <code>context</code>.
 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>context</code>
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.getContext = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.TemplateControl.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.TemplateControl.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Id of the element which is the current target of the <code>template</code> association, or null
 * 
 * The template on which the template control is based on.
 * @return {sap.ui.core.tmpl.Template}
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.getTemplate = function() { return new sap.ui.core.tmpl.Template(); };

/**
 * Returns the instance specific renderer for an anoymous template control.
 * @return {function} the instance specific renderer function
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.getTemplateRenderer = function() { return function() {}; };

/**
 * checks whether the control is inline or not
 * @return {boolean} flag, whether to control is inline or not
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.isInline = function() { return false; };

/**
 * Setter for property <code>context</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oContext new value for property <code>context</code>
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.setContext = function(oContext) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Setter for the associated <code>template</code>.
 * @param {sap.ui.core.tmpl.Template} oTemplate Id of an element which becomes the new target of this template association. Alternatively, an element instance may be given.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.setTemplate = function(oTemplate) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Sets the instance specific renderer for an anoymous template control.
 * @param {function} fnRenderer the instance specific renderer function
 * @return {sap.ui.core.tmpl.Template} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.setTemplateRenderer = function(fnRenderer) { return new sap.ui.core.tmpl.Template(); };


// ---- sap.ui.core.Toolbar --------------------------------------------------------------------------


// ---- sap.ui.core.TooltipBase --------------------------------------------------------------------------

/**
 * Constructor for a new TooltipBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getOpenDuration openDuration} : int (default: 200)</li>
 * <li>{@link #getCloseDuration closeDuration} : int (default: 200)</li>
 * <li>{@link #getMyPosition myPosition} : sap.ui.core.Dock (default: begin top)</li>
 * <li>{@link #getAtPosition atPosition} : sap.ui.core.Dock (default: begin bottom)</li>
 * <li>{@link #getOffset offset} : string (default: 10 3)</li>
 * <li>{@link #getCollision collision} : sap.ui.core.Collision (default: flip)</li>
 * <li>{@link #getOpenDelay openDelay} : int (default: 500)</li>
 * <li>{@link #getCloseDelay closeDelay} : int (default: 100)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip Control is based on it. It provides the opening/closing behavior and the main "text" property.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.TooltipBase = function(sId,mSettings) {};
/**
 * This event is fired when the Tooltip has been closed
 * @event
 * @since 1.11.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.closed = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.core.TooltipBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.ui.core.TooltipBase</code>.<br> itself.
 * 
 * This event is fired when the Tooltip has been closed
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.TooltipBase</code>.<br/> itself.
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.0
 * 
 */
sap.ui.core.TooltipBase.prototype.attachClosed = function(oData,fnFunction,oListener) { return new sap.ui.core.TooltipBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.core.TooltipBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @since 1.11.0
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.detachClosed = function(fnFunction,oListener) { return new sap.ui.core.TooltipBase(); };

/**
 * Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.TooltipBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event closed to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.11.0
 * 
 */
sap.ui.core.TooltipBase.prototype.fireClosed = function(mArguments) { return new sap.ui.core.TooltipBase(); };

/**
 * Getter for property <code>atPosition</code>.
 * Optional. At position defines which position on the target control to align the positioned tooltip.
 * 
 * Default value is <code>begin bottom</code>
 * @return {sap.ui.core.Dock} the value of property <code>atPosition</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getAtPosition = function() { return new sap.ui.core.Dock(); };

/**
 * Getter for property <code>closeDelay</code>.
 * Closing delay of the tooltip in milliseconds
 * 
 * Default value is <code>100</code>
 * @return {int} the value of property <code>closeDelay</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getCloseDelay = function() { return 0; };

/**
 * Getter for property <code>closeDuration</code>.
 * Optional. Close Duration in milliseconds.
 * 
 * Default value is <code>200</code>
 * @return {int} the value of property <code>closeDuration</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getCloseDuration = function() { return 0; };

/**
 * Getter for property <code>collision</code>.
 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
 * 
 * Default value is <code>flip</code>
 * @return {sap.ui.core.Collision} the value of property <code>collision</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getCollision = function() { return new sap.ui.core.Collision(); };

/**
 * Returns a metadata object for class sap.ui.core.TooltipBase.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.TooltipBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>myPosition</code>.
 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
 * 
 * Default value is <code>begin top</code>
 * @return {sap.ui.core.Dock} the value of property <code>myPosition</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getMyPosition = function() { return new sap.ui.core.Dock(); };

/**
 * Getter for property <code>offset</code>.
 * Optional. Offset adds these left-top values to the calculated position.
 * Example: "10 3".
 * 
 * Default value is <code>10 3</code>
 * @return {string} the value of property <code>offset</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getOffset = function() { return ""; };

/**
 * Getter for property <code>openDelay</code>.
 * Opening delay of the tooltip in milliseconds
 * 
 * Default value is <code>500</code>
 * @return {int} the value of property <code>openDelay</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getOpenDelay = function() { return 0; };

/**
 * Getter for property <code>openDuration</code>.
 * Optional. Open Duration in milliseconds.
 * 
 * Default value is <code>200</code>
 * @return {int} the value of property <code>openDuration</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getOpenDuration = function() { return 0; };

/**
 * Getter for property <code>text</code>.
 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getText = function() { return ""; };

/**
 * Setter for property <code>atPosition</code>.
 * 
 * Default value is <code>begin bottom</code>.
 * @param {sap.ui.core.Dock} sAtPosition new value for property <code>atPosition</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setAtPosition = function(sAtPosition) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>closeDelay</code>.
 * 
 * Default value is <code>100</code>.
 * @param {int} iCloseDelay new value for property <code>closeDelay</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setCloseDelay = function(iCloseDelay) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>closeDuration</code>.
 * 
 * Default value is <code>200</code>.
 * @param {int} iCloseDuration new value for property <code>closeDuration</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setCloseDuration = function(iCloseDuration) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>collision</code>.
 * 
 * Default value is <code>flip</code>.
 * @param {sap.ui.core.Collision} sCollision new value for property <code>collision</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setCollision = function(sCollision) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>myPosition</code>.
 * 
 * Default value is <code>begin top</code>.
 * @param {sap.ui.core.Dock} sMyPosition new value for property <code>myPosition</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setMyPosition = function(sMyPosition) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>offset</code>.
 * 
 * Default value is <code>10 3</code>.
 * @param {string} sOffset new value for property <code>offset</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setOffset = function(sOffset) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>openDelay</code>.
 * 
 * Default value is <code>500</code>.
 * @param {int} iOpenDelay new value for property <code>openDelay</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setOpenDelay = function(iOpenDelay) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>openDuration</code>.
 * 
 * Default value is <code>200</code>.
 * @param {int} iOpenDuration new value for property <code>openDuration</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setOpenDuration = function(iOpenDuration) { return new sap.ui.core.TooltipBase(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setText = function(sText) { return new sap.ui.core.TooltipBase(); };


// ---- sap.ui.core.UIArea --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getDependents dependents} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @class An area in a page that hosts a tree of UI elements.
 * 
 * Provides means for event-handling, rerendering, etc.
 * 
 * Special aggregation "dependents" is connected to the lifecycle management and databinding,
 * but not rendered automatically and can be used for popups or other dependent controls. This allows
 * definition of popup controls in declarative views and enables propagation of model and context
 * information to them.
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * @param {sap.ui.core.Core} oCore internal API of the <core>Core</code> that manages this UIArea
 * @param {object} [oRootNode] reference to the Dom Node that should be 'hosting' the UI Area.
 * @public
 * 
 */
sap.ui.core.UIArea = function(oCore,oRootNode) {};
/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.addContent = function(oContent) { return new sap.ui.core.UIArea(); };

/**
 * Adds some dependent into the aggregation named <code>dependents</code>.
 * @param {sap.ui.core.Control}
 *            oDependent the dependent to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.addDependent = function(oDependent) { return new sap.ui.core.UIArea(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.destroyContent = function() { return new sap.ui.core.UIArea(); };

/**
 * Destroys all the dependents in the aggregation
 * named <code>dependents</code>.
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.destroyDependents = function() { return new sap.ui.core.UIArea(); };

/**
 * Creates a new subclass of class sap.ui.core.UIArea with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.UIArea.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Provide getBindingContext, as UIArea can be parent of an element.
 * @return {null} Always returns null.
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.getBindingContext = function() { return null; };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content that is displayed in the UIArea.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getContent = function() { return new Array(); };

/**
 * Getter for aggregation <code>dependents</code>.<br/>
 * Dependent objects whose lifecycle is bound to the UIarea but which are not automatically rendered by the UIArea.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getDependents = function() { return new Array(); };

/**
 * Returns the Core as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events. 
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.getEventingParent = function() { return new sap.ui.base.EventProvider(); };

/**
 * Returns this <code>UIArea</code>'s id (as determined from provided RootNode).
 * @return {string|null} id of this UIArea
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.UIArea.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.UIArea.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the content control of this <code>UIArea</code> at the specified index.
 * If no index is given the first content control is returned.
 * @param {int} idx index of the control in the content of this <code>UIArea</code>
 * @return {sap.ui.core.Control} the content control of this <code>UIArea</code> at the specified index.
 * @public
 * @deprecated use function <code>getContent</code> instead
 * 
 */
sap.ui.core.UIArea.prototype.getRootControl = function(idx) { return new sap.ui.core.Control(); };

/**
 * Returns the Root Node hosting this instance of <code>UIArea</code>.
 * @return {Element} the Root Node hosting this instance of <code>UIArea</code>.
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getRootNode = function() { return null; };

/**
 * Returns this UI area. Needed to stop recursive calls from an element to its parent.
 * @return {sap.ui.core.UIArea} this
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.getUIArea = function() { return new sap.ui.core.UIArea(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>dependents</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oDependent the dependent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.indexOfDependent = function(oDependent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.insertContent = function(oContent,iIndex) { return new sap.ui.core.UIArea(); };

/**
 * Inserts a dependent into the aggregation named <code>dependents</code>.
 * @param {sap.ui.core.Control}
 *            oDependent the dependent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the dependent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the dependent is inserted at
 *              the last position
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.insertDependent = function(oDependent,iIndex) { return new sap.ui.core.UIArea(); };

/**
 * Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of
 * the UIAreas content.
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.invalidate = function() {  };

/**
 * Checks whether the control is still valid (is in the DOM)
 * @return {boolean} True if the control is still in the active DOM
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.isActive = function() { return false; };

/**
 * Returns whether rerendering is currently suppressed on this UIArea
 * @return boolean
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.isInvalidateSuppressed = function() {  };

/**
 * Returns the locked state of the <code>sap.ui.core.UIArea</code>
 * @return {boolean} locked state
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.isLocked = function() { return false; };

/**
 * Locks this instance of UIArea.
 * 
 * Rerendering and eventing will not be active as long as no
 * {@link #unlock} is called.
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.lock = function() {  };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>dependents</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeAllDependents = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes an dependent from the aggregation named <code>dependents</code>.
 * @param {int | string | sap.ui.core.Control} vDependent the dependentto remove or its index or id
 * @return {sap.ui.core.Control} the removed dependent or null
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeDependent = function(vDependent) { return new sap.ui.core.Control(); };

/**
 * Sets the root control to be displayed in this UIArea.
 * 
 * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent
 * relationship to this UIArea will be cut off). Then the parent relationship for the new
 * content control (if not empty) will be set to this UIArea and finally, the UIArea will
 * be marked for re-rendering.
 * 
 * The real re-rendering happens whenever the re-rendering is called. Either implicitly
 * at the end of any control event or by calling sap.ui.getCore().applyChanges().
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oRootControl the Control that should be the Root for this <code>UIArea</code>.
 * @public
 * @deprecated use functions <code>removeAllContent</code> and <code>addContent</code> instead
 * 
 */
sap.ui.core.UIArea.prototype.setRootControl = function(oRootControl) {  };

/**
 * Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that
 * will be used as Id for this instance of <code>UIArea</code>.
 * @param {object}
 *            oRootNode the hosting Dom Ref for this instance of <code>UIArea</code>.
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.setRootNode = function(oRootNode) {  };

/**
 * Un-Locks this instance of UIArea.
 * 
 * Rerendering and eventing will now be enabled again.
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.unlock = function() {  };


// ---- sap.ui.core.UIComponent --------------------------------------------------------------------------

/**
 * Creates and initializes a new UI component with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
 * for a general description of this argument.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Component#constructor sap.ui.core.Component}
 * can be used as well.
 * @param {string}
 *            [sId] optional id for the new control; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * @class Base Class for UI Component.
 * @extends sap.ui.core.Component
 * @abstract
 * @version 1.26.9
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.UIComponent = function(sId,mSettings) {};
/**
 * Returns an Element by its id in the context of the Component
 * @param {string} sId
 * @return {sap.ui.core.Element} Element by its id
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * The method to create the Content (UI Control Tree) of the Component. 
 * This method has to be overwritten in the implementation of the component
 * if the root view is not declared in the component metadata.
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.createContent = function() {  };

/**
 * Creates an id for an Element prefixed with the component id
 * @param {string} sId
 * @return {string} prefixed id
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.createId = function(sId) { return ""; };

/**
 * Creates a new subclass of class sap.ui.core.UIComponent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.UIComponent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * A method to be implemented by UIComponents, returning the flag whether to prefix 
 * the IDs of controls automatically or not if the controls are created inside
 * the {@link sap.ui.core.UIComponent#createContent} function. By default this 
 * feature is not activated. 
 * 
 * You can overwrite this function and return true to activate the automatic
 * prefixing.
 * @since 1.15.1
 * @return {boolean} true, if the controls IDs should be prefixed automatically
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.getAutoPrefixId = function() { return false; };

/**
 * @see sap.ui.base.EventProvider#getEventingParent
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.getEventingParent = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.UIComponent.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.UIComponent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the reference to the router instance which has been created by
 * the UIComponent once the routes in the routing metadata has been defined.
 * @since 1.16.1
 * @return {sap.ui.core.routing.Router} the router instance
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.getRouter = function() { return new sap.ui.core.routing.Router(); };

/**
 * Returns the reference to the router instance. The passed controller or view
 * have to be created in the context of a UIComponent to return the router 
 * instance. Otherwise this function will return undefined.
 * You may define the routerClass property in the config section of the routing to make the Component create your router extension.
 * eg: 
 * routing: {
 * 	config: {
 * 		routerClass : myAppNamespace.MyRouterClass
 * 		...
 * }
 * ...
 * @param {sap.ui.core.mvc.View|sap.ui.core.mvc.Controller} oControllerOrView either a view or controller
 * @return {sap.ui.core.routing.Router} the router instance
 * @since 1.16.1
 * @public
 * 
 */
sap.ui.core.UIComponent.getRouterFor = function(oControllerOrView) { return new sap.ui.core.routing.Router(); };

/**
 * Returns the reference to the UIArea of the container.
 * @return {sap.ui.core.UIArea} reference to the UIArea of the container
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.getUIArea = function() { return new sap.ui.core.UIArea(); };

/**
 * Initializes the Component instance after creation.
 * 
 * Applications must not call this hook method directly, it is called by the
 * framework while the constructor of an Component is executed.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * initialization. <b>When overriding this function make sure to invoke the
 * init function of the UIComponent as well!</b> 
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.init = function() {  };

/**
 * Function is called when the rendering of the Component Container is completed.
 * 
 * Applications must not call this hook method directly, it is called from ComponentContainer.
 * 
 * Subclasses of UIComponent override this hook to implement any necessary actions after the rendering.
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.onAfterRendering = function() {  };

/**
 * Function is called when the rendering of the Component Container is started.
 * 
 * Applications must not call this hook method directly, it is called from ComponentContainer.
 * 
 * Subclasses of UIComponent override this hook to implement any necessary actions before the rendering.
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.onBeforeRendering = function() {  };

/**
 * Renders the the root control of the UIComponent.
 * @param {sap.ui.core.RenderManager} oRenderManager a RenderManager instance
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.render = function(oRenderManager) {  };

/**
 * Sets the reference to the ComponentContainer - later required for the 
 * determination of the UIArea for the UIComponent.
 * @param {sap.ui.core.ComponentContainer} oContainer reference to a ComponentContainer
 * @return {sap.ui.core.UIComponent} reference to this instance to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.setContainer = function(oContainer) { return new sap.ui.core.UIComponent(); };


// ---- sap.ui.core.URI --------------------------------------------------------------------------


// ---- sap.ui.core.util.Export --------------------------------------------------------------------------

/**
 * Constructor for a new Export.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getExportType exportType} : sap.ui.core.util.ExportType</li>
 * <li>{@link #getColumns columns} : sap.ui.core.util.ExportColumn[]</li>
 * <li>{@link #getRows rows} : sap.ui.core.util.ExportRow[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Export provides the possibility to generate a list of data in a specific format / type, e.g. CSV to use it in other programs / applications.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @since 1.22.0
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.Export = function(sId,mSettings) {};
/**
 * Adds some column into the aggregation named <code>columns</code>.
 * @param {sap.ui.core.util.ExportColumn}
 *            oColumn the column to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.addColumn = function(oColumn) { return new sap.ui.core.util.Export(); };

/**
 * Adds some row into the aggregation named <code>rows</code>.
 * @param {sap.ui.core.util.ExportRow}
 *            oRow the row to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.addRow = function(oRow) { return new sap.ui.core.util.Export(); };

/**
 * Binder for aggregation <code>columns</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.bindColumns = function(oBindingInfo) { return new sap.ui.core.util.Export(); };

/**
 * Binder for aggregation <code>rows</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.bindRows = function(oBindingInfo) { return new sap.ui.core.util.Export(); };

/**
 * Destroys all the columns in the aggregation
 * named <code>columns</code>.
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.destroyColumns = function() { return new sap.ui.core.util.Export(); };

/**
 * Destroys the exportType in the aggregation
 * named <code>exportType</code>.
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.destroyExportType = function() { return new sap.ui.core.util.Export(); };

/**
 * Destroys all the rows in the aggregation
 * named <code>rows</code>.
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.destroyRows = function() { return new sap.ui.core.util.Export(); };

/**
 * Creates a new subclass of class sap.ui.core.util.Export with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.Export.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Generates the file content and returns a Promise
 * with the instance as context (this).<br>
 * The promise will be resolved with the generated content
 * as a string.
 * 
 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
 * Please use only the standard methods 'then' and 'catch'!</b></p>
 * @return {Promise} Promise object
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.generate = function() { return null; };

/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns for the Export.
 * @return {sap.ui.core.util.ExportColumn[]}
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.getColumns = function() { return new Array(); };

/**
 * Getter for aggregation <code>exportType</code>.<br/>
 * Type that generates the content.
 * @return {sap.ui.core.util.ExportType}
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.getExportType = function() { return new sap.ui.core.util.ExportType(); };

/**
 * Returns a metadata object for class sap.ui.core.util.Export.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.Export.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for aggregation <code>rows</code>.<br/>
 * Rows of the Export.
 * @return {sap.ui.core.util.ExportRow[]}
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.getRows = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.ui.core.util.ExportColumn</code> in the aggregation named <code>columns</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.util.ExportColumn}
 *           oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.util.ExportRow</code> in the aggregation named <code>rows</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.util.ExportRow}
 *           oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.indexOfRow = function(oRow) { return 0; };

/**
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.ui.core.util.ExportColumn}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.insertColumn = function(oColumn,iIndex) { return new sap.ui.core.util.Export(); };

/**
 * Inserts a row into the aggregation named <code>rows</code>.
 * @param {sap.ui.core.util.ExportRow}
 *            oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the row should be inserted at; for
 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the row is inserted at
 *              the last position
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.insertRow = function(oRow,iIndex) { return new sap.ui.core.util.Export(); };

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.util.ExportColumn[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.util.ExportRow[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeAllRows = function() { return new Array(); };

/**
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.ui.core.util.ExportColumn} vColumn the columnto remove or its index or id
 * @return {sap.ui.core.util.ExportColumn} the removed column or null
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeColumn = function(vColumn) { return new sap.ui.core.util.ExportColumn(); };

/**
 * Removes an row from the aggregation named <code>rows</code>.
 * @param {int | string | sap.ui.core.util.ExportRow} vRow the rowto remove or its index or id
 * @return {sap.ui.core.util.ExportRow} the removed row or null
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeRow = function(vRow) { return new sap.ui.core.util.ExportRow(); };

/**
 * Generates the file content, triggers a download / save action and
 * returns a Promise with the instance as context (this).<br>
 * The promise will be resolved with the generated content
 * as a string.
 * <p><b>For information about browser support, see <code>sap.ui.core.util.File.save</code></b></p>
 * 
 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
 * Please use only the standard methods 'then' and 'catch'!</b></p>
 * @param {string} [sFileName] file name, defaults to 'data'
 * @return {Promise} Promise object
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.saveFile = function(sFileName) { return null; };

/**
 * Setter for the aggregated <code>exportType</code>.
 * @param {sap.ui.core.util.ExportType} oExportType the exportType to set
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.setExportType = function(oExportType) { return new sap.ui.core.util.Export(); };

/**
 * Unbinder for aggregation <code>columns</code>.
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.unbindColumns = function() { return new sap.ui.core.util.Export(); };

/**
 * Unbinder for aggregation <code>rows</code>.
 * @return {sap.ui.core.util.Export} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.unbindRows = function() { return new sap.ui.core.util.Export(); };


// ---- sap.ui.core.util.ExportCell --------------------------------------------------------------------------

/**
 * Constructor for a new ExportCell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Contains content that can be used to export data. Used in {@link sap.ui.core.util.ExportColumn ExportColumn} / {@link sap.ui.core.util.Export Export}.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @since 1.22.0
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportCell = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.util.ExportCell with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportCell.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>content</code>.
 * Cell content.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>content</code>
 * @public
 * 
 */
sap.ui.core.util.ExportCell.prototype.getContent = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportCell.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportCell.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for property <code>content</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sContent new value for property <code>content</code>
 * @return {sap.ui.core.util.ExportCell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportCell.prototype.setContent = function(sContent) { return new sap.ui.core.util.ExportCell(); };


// ---- sap.ui.core.util.ExportColumn --------------------------------------------------------------------------

/**
 * Constructor for a new ExportCell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTemplate template} : sap.ui.core.util.ExportCell</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Can have a name and a cell template.
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * @since 1.22.0
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportColumn = function(sId,mSettings) {};
/**
 * Destroys the template in the aggregation
 * named <code>template</code>.
 * @return {sap.ui.core.util.ExportColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.destroyTemplate = function() { return new sap.ui.core.util.ExportColumn(); };

/**
 * Creates a new subclass of class sap.ui.core.util.ExportColumn with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportColumn.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportColumn.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportColumn.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * Column name.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.getName = function() { return ""; };

/**
 * Getter for aggregation <code>template</code>.<br/>
 * Cell template for column.
 * @return {sap.ui.core.util.ExportCell}
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.getTemplate = function() { return new sap.ui.core.util.ExportCell(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.ui.core.util.ExportColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.setName = function(sName) { return new sap.ui.core.util.ExportColumn(); };

/**
 * Setter for the aggregated <code>template</code>.
 * @param {sap.ui.core.util.ExportCell} oTemplate the template to set
 * @return {sap.ui.core.util.ExportColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.setTemplate = function(oTemplate) { return new sap.ui.core.util.ExportColumn(); };


// ---- sap.ui.core.util.ExportRow --------------------------------------------------------------------------

/**
 * Constructor for a new ExportRow.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.ui.core.util.ExportCell[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Internally used in {@link sap.ui.core.util.Export Export}.
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * @since 1.22.0
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportRow = function(sId,mSettings) {};
/**
 * Adds some cell into the aggregation named <code>cells</code>.
 * @param {sap.ui.core.util.ExportCell}
 *            oCell the cell to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.util.ExportRow} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.addCell = function(oCell) { return new sap.ui.core.util.ExportRow(); };

/**
 * Destroys all the cells in the aggregation
 * named <code>cells</code>.
 * @return {sap.ui.core.util.ExportRow} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.destroyCells = function() { return new sap.ui.core.util.ExportRow(); };

/**
 * Creates a new subclass of class sap.ui.core.util.ExportRow with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportRow.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>cells</code>.<br/>
 * Cells for the Export.
 * @return {sap.ui.core.util.ExportCell[]}
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.getCells = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportRow.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportRow.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.util.ExportCell</code> in the aggregation named <code>cells</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.util.ExportCell}
 *           oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.indexOfCell = function(oCell) { return 0; };

/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 * @param {sap.ui.core.util.ExportCell}
 *            oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the cell should be inserted at; for
 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the cell is inserted at
 *              the last position
 * @return {sap.ui.core.util.ExportRow} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.insertCell = function(oCell,iIndex) { return new sap.ui.core.util.ExportRow(); };

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.util.ExportCell[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.removeAllCells = function() { return new Array(); };

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 * @param {int | string | sap.ui.core.util.ExportCell} vCell the cellto remove or its index or id
 * @return {sap.ui.core.util.ExportCell} the removed cell or null
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.removeCell = function(vCell) { return new sap.ui.core.util.ExportCell(); };


// ---- sap.ui.core.util.ExportType --------------------------------------------------------------------------

/**
 * Constructor for a new ExportType.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFileExtension fileExtension} : string</li>
 * <li>{@link #getMimeType mimeType} : string</li>
 * <li>{@link #getCharset charset} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Base export type. Subclasses can be used for {@link sap.ui.core.util.Export Export}.
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * @since 1.22.0
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportType = function(sId,mSettings) {};
/**
 * Handles the generation process of the file.<br>
 * @param {sap.ui.core.util.Export} oExport export instance
 * @return {string} content
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype._generate = function(oExport) { return ""; };

/**
 * Creates a cell "generator" (inspired by ES6 Generators)
 * @return {Generator} generator
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.cellGenerator = function() { return null; };

/**
 * Creates a column "generator" (inspired by ES6 Generators)
 * @return {Generator} generator
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.columnGenerator = function() { return null; };

/**
 * Creates a new subclass of class sap.ui.core.util.ExportType with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Generates the file content.<br>
 * Should be implemented by the individual types!
 * @return {string} content
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.generate = function() { return ""; };

/**
 * Getter for property <code>charset</code>.
 * Charset.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>charset</code>
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getCharset = function() { return ""; };

/**
 * Returns the number of columns.
 * @return {int} count
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.getColumnCount = function() { return 0; };

/**
 * Getter for property <code>fileExtension</code>.
 * File extension.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>fileExtension</code>
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getFileExtension = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportType.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportType.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>mimeType</code>.
 * MIME type.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>mimeType</code>
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getMimeType = function() { return ""; };

/**
 * Returns the number of rows.
 * @return {int} count
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.getRowCount = function() { return 0; };

/**
 * Creates a row "generator" (inspired by ES6 Generators)
 * @return {Generator} generator
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.rowGenerator = function() { return null; };

/**
 * Setter for property <code>charset</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sCharset new value for property <code>charset</code>
 * @return {sap.ui.core.util.ExportType} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setCharset = function(sCharset) { return new sap.ui.core.util.ExportType(); };

/**
 * Setter for property <code>fileExtension</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sFileExtension new value for property <code>fileExtension</code>
 * @return {sap.ui.core.util.ExportType} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setFileExtension = function(sFileExtension) { return new sap.ui.core.util.ExportType(); };

/**
 * Setter for property <code>mimeType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sMimeType new value for property <code>mimeType</code>
 * @return {sap.ui.core.util.ExportType} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setMimeType = function(sMimeType) { return new sap.ui.core.util.ExportType(); };


// ---- sap.ui.core.util.ExportTypeCSV --------------------------------------------------------------------------

/**
 * Constructor for a new ExportTypeCSV.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSeparatorChar separatorChar} : string (default: ,)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.util.ExportType#constructor sap.ui.core.util.ExportType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * CSV export type. Can be used for {@link sap.ui.core.util.Export Export}.<br>
 * <br>
 * Please note that there could issues with the separator char depending on the user's system language in some programs such as Microsoft Excel.<br>
 * To prevent those issues use the data-import functionality which enables the possibility to explicitly set the separator char that should be used.<br>
 * This way the content will be displayed correctly.
 * @extends sap.ui.core.util.ExportType
 * @version 1.26.9
 * @since 1.22.0
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportTypeCSV = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.util.ExportTypeCSV with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.ExportType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportTypeCSV.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Generates the file content.
 * @return {string} content
 * @protected
 * 
 */
sap.ui.core.util.ExportTypeCSV.prototype.generate = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportTypeCSV.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportTypeCSV.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>separatorChar</code>.
 * Separator char.
 * 
 * Value needs to be exactly one character or empty for default.
 * 
 * Default value is <code>,</code>
 * @return {string} the value of property <code>separatorChar</code>
 * @public
 * 
 */
sap.ui.core.util.ExportTypeCSV.prototype.getSeparatorChar = function() { return ""; };

/**
 * Setter for property <code>separatorChar</code>.
 * 
 * Value needs to be exactly one character or empty for default. Default value is ','.
 * @param {string} sSeparatorChar  new value for property <code>separatorChar</code>
 * @return {sap.ui.core.util.ExportTypeCSV} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportTypeCSV.prototype.setSeparatorChar = function(sSeparatorChar) { return new sap.ui.core.util.ExportTypeCSV(); };


// ---- sap.ui.core.util.File --------------------------------------------------------------------------

/**
 * <p>Triggers a download / save action of the given file.</p>
 * 
 * <p>There are limitations for this feature in some browsers:<p>
 * 
 * <p><b>Internet Explorer 8 / 9</b><br>
 * Some file extensions on some operating systems are not working due to a bug in IE.
 * Therefore 'txt' will be used as file extension if the problem is occurring.</p>
 * 
 * <p><b>Safari 6 / 7 (OS X)</b><br>
 * A new window/tab will be opened. The user has to manually save the file (CMD + S), choose "page source" and specify a filename.</p>
 * 
 * <p><b>Mobile Safari (iOS)</b><br>
 * Not supported</p>
 * 
 * <p><b>Android Browser</b><br>
 * Not supported</p>
 * @param {string} sData file content
 * @param {string} sFileName file name
 * @param {string} sFileExtension file extension
 * @param {string} sMimeType file mime-type
 * @param {string} sCharset file charset
 * @public
 * 
 * @memberof sap.ui.core.util.File
 */
sap.ui.core.util.File.save = function(sData,sFileName,sFileExtension,sMimeType,sCharset) {  };


// ---- sap.ui.core.util.MockServer --------------------------------------------------------------------------

/**
 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
 * changing the application code. This class can also be used for qunit tests.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRootUri rootUri} : string</li>
 * <li>{@link #getRequests requests} : object[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string} [sId] id for the new server object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
 * @class Class to mock a server
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.26.9
 * @public
 * 
 */
sap.ui.core.util.MockServer = function(sId,mSettings,oScope) {};
/**
 * Cleans up the resources associated with this object and all its aggregated children.
 * 
 * After an object has been destroyed, it can no longer be used in!
 * 
 * Applications should call this method if they don't need the object any longer.
 * @see sap.ui.base.ManagedObject#destroy
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.destroy = function(bSuppressInvalidate) {  };

/**
 * Creates a new subclass of class sap.ui.core.util.MockServer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.MockServer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.MockServer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.MockServer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>requests</code>.
 * 
 * Default value is <code>[]</code>
 * @return {object[]} the value of property <code>rootUri</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.getRequests = function() { return new Array(); };

/**
 * Getter for property <code>rootUri</code>.
 * 
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>rootUri</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.getRootUri = function() { return ""; };

/**
 * Returns whether the server is started or not.
 * @return {boolean} whether the server is started or not.
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.isStarted = function() { return false; };

/**
 * Setter for property <code>requests</code>.
 * 
 * Default value is is <code>[]</code>
 * 
 * Each array entry should consist of an array with the following properties / values:
 * 
 * <ul>
 * <li><b>method <string>: "GET"|"POST"|"DELETE|"PUT"</b>
 * <br>
 * (any HTTP verb)
 * </li>
 * <li><b>path <string>: "/path/to/resource"</b>
 * <br> 
 * The path is converted to a regular expression, so it can contain normal regular expression syntax.
 * All regular expression groups are forwarded as arguments to the <code>response</code> function.
 * In addition to this, parameters can be written in this notation: <code>:param</code>. These placeholder will be replaced by regular expression groups.
 * </li>
 * <li><b>response <function>: function(xhr, param1, param2, ...) { }</b>
 * <br>
 * The xhr object can be used to respond on the request. Supported methods are:
 * <br>
 * <code>xhr.respond(iStatusCode, mHeaders, sBody)</code>
 * <br>
 * <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)</code>. By default a JSON header is set for response header
 * <br>
 * <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)</code>. By default a XML header is set for response header
 * <br>
 * <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)</code>. By default the mime type of the file is set for response header
 * </li>
 * </ul>
 * @param {object[]} requests new value for property <code>requests</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.setRequests = function(requests) {  };

/**
 * Setter for property <code>rootUri</code>. All request path URI are prefixed with this root URI if set.
 * 
 * Default value is empty/<code>undefined</code>
 * @param {string} rootUri new value for property <code>rootUri</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.setRootUri = function(rootUri) {  };

/**
 * Simulates an existing OData service by sepcifiying the metadata URL and the base URL for the mockdata. The server
 * configures the request handlers depending on the service metadata. The mockdata needs to be stored individually for
 * each entity type in a separate JSON file. The name of the JSON file needs to match the name of the entity type. If
 * no base url for the mockdata is specified then the mockdata are generated from the metadata
 * @param {string} sMetadataUrl url to the service metadata document
 * @param {string|object} [vMockdataSettings] (optional) base url which contains the path to the mockdata, or an object which contains the following properties: sMockdataBaseUrl, bGenerateMissingMockData. See below for descriptions of these parameters. Ommit this parameter to produce random mock data based on the service metadata. 
 * @param {string} [vMockdataSettings.sMockdataBaseUrl] base url which contains the mockdata as single .json files or the .json file containing the complete mock data
 * @param {boolean} [vMockdataSettings.bGenerateMissingMockData] true for the MockServer to generate mock data for missing .json files that are not found in sMockdataBaseUrl. Default value is false.
 * @since 1.13.2
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.simulate = function(sMetadataUrl,vMockdataSettings) {  };

/**
 * Starts the server.
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.start = function() {  };

/**
 * Stops the server.
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.stop = function() {  };


// ---- sap.ui.core.util.serializer.delegate.Delegate --------------------------------------------------------------------------

/**
 * Abstract serializer delegate class. All delegates must extend from this class and implement the abstract methods.
 * @public
 * @abstract
 * @class Abstract serializer delegate class.
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @experimental Since 1.15.1. The abstract serializer delegate is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.delegate.Delegate = function() {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.Delegate with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.delegate.Delegate.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.delegate.Delegate.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.delegate.Delegate.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.util.serializer.delegate.HTML --------------------------------------------------------------------------

/**
 * HTML serializer delegate class. Called by the serializer instance.
 * @param {function} [fnGetControlId] delegate function which returns the control id
 * @param {function} [fnGetEventHandlerName] delegate function which returns the event handler name
 * @public
 * @class HTML serializer delegate class.
 * @extends sap.ui.core.util.serializer.delegate.Delegate
 * @version 1.26.9
 * @experimental Since 1.15.1. The HTML serializer delegate is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.delegate.HTML = function(fnGetControlId,fnGetEventHandlerName) {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.HTML with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.delegate.HTML.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.delegate.HTML.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.delegate.HTML.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.util.serializer.delegate.XML --------------------------------------------------------------------------

/**
 * XML serializer delegate class. Called by the serializer instance.
 * @param {string} [sDefaultXmlNamespace] defines the default XML namespace
 * @param {function} [fnGetControlId] delegate function which returns the control id
 * @param {function} [fnGetEventHandlerName] delegate function which returns the event handler name
 * @param {function} [fnMemorizePackage] a delegate function to memorize the control packages
 * @public
 * @class XML serializer delegate class.
 * @extends sap.ui.core.util.serializer.delegate.Delegate
 * @version 1.26.9
 * @experimental Since 1.15.1. The XML serializer delegate is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.delegate.XML = function(sDefaultXmlNamespace,fnGetControlId,fnGetEventHandlerName,fnMemorizePackage) {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.XML with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.delegate.XML.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.delegate.XML.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.delegate.XML.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.util.serializer.HTMLViewSerializer --------------------------------------------------------------------------

/**
 * HTML view serializer class. Serializes a given view.
 * @param {sap.ui.core.mvc.HTMLView} oView the view to serialize
 * @param {object} [oWindow=window] the window object. Default is the window object the instance of the serializer is running in
 * @param {function} fnGetControlId delegate function which returns the control id
 * @param {function} fnGetEventHandlerName delegate function which returns the event handler name
 * @public
 * @class HTMLViewSerializer class.
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @experimental Since 1.15.1. The HTMLViewSerializer is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.HTMLViewSerializer = function(oView,oWindow,fnGetControlId,fnGetEventHandlerName) {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.HTMLViewSerializer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.HTMLViewSerializer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.HTMLViewSerializer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.HTMLViewSerializer.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.util.serializer.Serializer --------------------------------------------------------------------------

/**
 * Serializer class. Iterates over all controls and call a given serializer delegate.
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oRootControl the root control to serialize
 * @param {object} serializeDelegate the serializer delegate. Has to implement start/middle/end methods.
 * @param {boolean} bSkipRoot whether to skip the root node or not
 * @param {booolean} fnSkipAggregations whether to skip aggregations
 * @public
 * @class Serializer class.
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @experimental Since 1.15.1. The Serializer is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.Serializer = function(oRootControl,serializeDelegate,bSkipRoot,fnSkipAggregations) {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.Serializer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.Serializer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.Serializer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.Serializer.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.util.serializer.ViewSerializer --------------------------------------------------------------------------

/**
 * View serializer class. Iterates over all controls and serializes all found views by calling the corresponding view type serializer.
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oRootControl the root control to serialize
 * @param {object} [oWindow=window] the window object. Default is the window object the instance of the serializer is running in.
 * @param {string} [sDefaultXmlNamespace] defines the default xml namespace
 * @public
 * @class ViewSerializer class.
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @experimental Since 1.15.1. The ViewSerializer is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.ViewSerializer = function(oRootControl,oWindow,sDefaultXmlNamespace) {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.ViewSerializer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.ViewSerializer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.ViewSerializer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.ViewSerializer.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.util.serializer.XMLViewSerializer --------------------------------------------------------------------------

/**
 * XML view serializer class. Serializes a given view.
 * @param {sap.ui.core.mvc.XMLView} oView the view to serialize
 * @param {object} [oWindow=window] the window object. Default is the window object the instance of the serializer is running in
 * @param {string} [sDefaultXmlNamespace] defines the default XML namespace
 * @param {function} fnGetControlId delegate function which returns the control id
 * @param {function} fnGetEventHandlerName delegate function which returns the event handler name
 * @public
 * @class XMLViewSerializer class.
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @experimental Since 1.15.1. The XMLViewSerializer is still under construction, so some implementation details can be changed in future.
 * 
 */
sap.ui.core.util.serializer.XMLViewSerializer = function(oView,oWindow,sDefaultXmlNamespace,fnGetControlId,fnGetEventHandlerName) {};
/**
 * Creates a new subclass of class sap.ui.core.util.serializer.XMLViewSerializer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.XMLViewSerializer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.serializer.XMLViewSerializer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.util.serializer.XMLViewSerializer.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.ValueState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ValueState.toString = function() { return ""; };

// ---- sap.ui.core.VariantLayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new VariantLayoutData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMultipleLayoutData multipleLayoutData} : sap.ui.core.LayoutData[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Allows to add multiple LayoutData to one control in case that a easy switch of layouts (e.g. in a Form) is needed.
 * @extends sap.ui.core.LayoutData
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.VariantLayoutData = function(sId,mSettings) {};
/**
 * Adds some multipleLayoutData into the aggregation named <code>multipleLayoutData</code>.
 * @param {sap.ui.core.LayoutData}
 *            oMultipleLayoutData the multipleLayoutData to add; to add; if empty, nothing is inserted
 * @return {sap.ui.core.VariantLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.addMultipleLayoutData = function(oMultipleLayoutData) { return new sap.ui.core.VariantLayoutData(); };

/**
 * Destroys all the multipleLayoutData in the aggregation
 * named <code>multipleLayoutData</code>.
 * @return {sap.ui.core.VariantLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.destroyMultipleLayoutData = function() { return new sap.ui.core.VariantLayoutData(); };

/**
 * Creates a new subclass of class sap.ui.core.VariantLayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.VariantLayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.VariantLayoutData.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.VariantLayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for aggregation <code>multipleLayoutData</code>.<br/>
 * Allows multiple LayoutData.
 * @return {sap.ui.core.LayoutData[]}
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.getMultipleLayoutData = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.ui.core.LayoutData</code> in the aggregation named <code>multipleLayoutData</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.LayoutData}
 *           oMultipleLayoutData the multipleLayoutData whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.indexOfMultipleLayoutData = function(oMultipleLayoutData) { return 0; };

/**
 * Inserts a multipleLayoutData into the aggregation named <code>multipleLayoutData</code>.
 * @param {sap.ui.core.LayoutData}
 *            oMultipleLayoutData the multipleLayoutData to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the multipleLayoutData should be inserted at; for
 *              a negative value of <code>iIndex</code>, the multipleLayoutData is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the multipleLayoutData is inserted at
 *              the last position
 * @return {sap.ui.core.VariantLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.insertMultipleLayoutData = function(oMultipleLayoutData,iIndex) { return new sap.ui.core.VariantLayoutData(); };

/**
 * Removes all the controls in the aggregation named <code>multipleLayoutData</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.LayoutData[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.removeAllMultipleLayoutData = function() { return new Array(); };

/**
 * Removes an multipleLayoutData from the aggregation named <code>multipleLayoutData</code>.
 * @param {int | string | sap.ui.core.LayoutData} vMultipleLayoutData the multipleLayoutDatato remove or its index or id
 * @return {sap.ui.core.LayoutData} the removed multipleLayoutData or null
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.removeMultipleLayoutData = function(vMultipleLayoutData) { return new sap.ui.core.LayoutData(); };


// ---- sap.ui.core.VerticalAlign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.VerticalAlign.toString = function() { return ""; };

// ---- sap.ui.core.Wrapping --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Wrapping.toString = function() { return ""; };

// ---- sap.ui.core.ws.ReadyState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ws.ReadyState.toString = function() { return ""; };

// ---- sap.ui.core.ws.SapPcpWebSocket --------------------------------------------------------------------------

/**
 * Creates a new WebSocket connection and uses the pcp-protocol for communication.
 * @param {string} sUrl relative or absolute URL for WebSocket connection.
 * @param {array} [aProtocols] array of protocols as strings, a single protocol as a string.
 * Protocol(s) should be selected from {@link sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS}.
 * @public
 * @class WebSocket class implementing the pcp-protocol
 * @extends sap.ui.core.ws.WebSocket
 * @version 1.26.9
 * 
 */
sap.ui.core.ws.SapPcpWebSocket = function(sUrl,aProtocols) {};
/**
 * The 'message' event is fired, when a message was received.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.data Received data from the server.
 * @param {string} oControlEvent.getParameters.pcpFields Received pcpFields as a key-value map.
 * @public
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.message = function(oControlEvent) {  };

/**
 * Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event 'message' to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.data] Received data from the server.
 * @param {string} [mArguments.pcpFields] Received pcpFields as a key-value map.
 * @return {sap.ui.core.ws.SapPcpWebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.fireMessage = function(mArguments) { return new sap.ui.core.ws.SapPcpWebSocket(); };

/**
 * Returns a metadata object for class sap.ui.core.ws.SapPcpWebSocket.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sends a message and optional pcp-header-fields using the pcp-protocol.<br>
 * <br>
 * If the connection is not yet opened, the message will be queued and sent
 * when the connection is established.
 * @param {string|blob|arraybuffer} message message to send
 * @param {object} [oPcpFields] additional pcp-fields as key-value map
 * @return {sap.ui.core.ws.SapPcpWebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.send = function(message,oPcpFields) { return new sap.ui.core.ws.SapPcpWebSocket(); };


// ---- sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS.toString = function() { return ""; };

// ---- sap.ui.core.ws.WebSocket --------------------------------------------------------------------------

/**
 * Creates a new WebSocket connection.
 * @param {string} sUrl relative or absolute URL for WebSocket connection.
 * @param {array} [aProtocols] array of protocols as strings, a single protocol as a string
 * @public
 * @class Basic WebSocket class
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * 
 */
sap.ui.core.ws.WebSocket = function(sUrl,aProtocols) {};
/**
 * The 'close' event is fired, when the connection was closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.code Close code provided by the server.
 * @param {string} oControlEvent.getParameters.reason Reason from server for closing the connection.
 * @param {string} oControlEvent.getParameters.wasClean Indicates whether the connection was cleanly closed or not.
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.close = function(oControlEvent) {  };

/**
 * The 'error' event is fired, when an error occurred.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.error = function(oControlEvent) {  };

/**
 * The 'message' event is fired, when a message was received.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.data Received data from the server.
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.message = function(oControlEvent) {  };

/**
 * The 'open' event is fired, when the connection was successfully opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.open = function(oControlEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachError = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachMessage = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachOpen = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Closes the connection.
 * @param {int} [iCode] Status code that explains why the connection is closed. Must be either 1000, or between 3000 and 4999 (default 1000)
 * @param {string} [sReason] Closing reason as a string
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.close = function(iCode,sReason) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachClose = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachError = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachMessage = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachOpen = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ws.WebSocket.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event 'close' to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.code] Close code provided by the server.
 * @param {string} [mArguments.reason] Reason from server for closing the connection.
 * @param {string} [mArguments.wasClean] Indicates whether the connection was cleanly closed or not.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireClose = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Fire event 'error' to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireError = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Fire event 'message' to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.data] Received data from the server.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireMessage = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Fire event 'open' to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireOpen = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.ws.WebSocket.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.core.ws.WebSocket.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for the protocol selected by the server once the connection is open.
 * @returns {string} protocol
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.getProtocol = function() { return ""; };

/**
 * Getter for WebSocket readyState.
 * @returns {sap.ui.core.ws.ReadyState} readyState
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.getReadyState = function() { return new sap.ui.core.ws.ReadyState(); };

/**
 * Sends a message.<br>
 * <br>
 * If the connection is not yet opened, the message will be queued and sent
 * when the connection is established.
 * @param {string} sMessage Message to send
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.send = function(sMessage) { return new sap.ui.core.ws.WebSocket(); };


// ---- sap.ui.Device --------------------------------------------------------------------------


// ---- sap.ui.Device.browser --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.browser.toString = function() { return ""; };

// ---- sap.ui.Device.browser.BROWSER --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.browser.BROWSER.toString = function() { return ""; };

// ---- sap.ui.Device.media --------------------------------------------------------------------------

/**
 * Registers the given handler to the range change event, which is fired when a new range of the set is entered.
 * 
 * The handler has one map parameter <code>mParams</code>:
 * <ul>
 * <li>mParams.from: the range start value</li>
 * <li>mParams.to: the range end value, not defined for the last range (INFINITY)</li>
 * <li>mParams.unit: the used unit, e.g. px</li>
 * <li>mParams.name: the range name if defined</li>
 * </ul>
 * @param {Function} fnFunction The function to call, when the range change event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @param {String} sName The name of the range set to listen to.
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.prototype.attachHandler = function(fnFunction,oListener,sName) {  };

/**
 * Deregisters a previously registered handler from the range change event.
 * @param {Function} fnFunction The function to call, when the range change event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @param {String} sName The name of the range set to listen to.
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.prototype.detachHandler = function(fnFunction,oListener,sName) {  };

/**
 * Returns information about the current active range of the range set with the given name.
 * @param {String} sName The name of the range set.
 * @return {Map} the information about the current active range (same structure like the handler parameters (@see sap.ui.Device.media#attachHandler))
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.prototype.getCurrentRange = function(sName) { return null; };

/**
 * Returns whether a range set with the given name is initialized.
 * @param {String} sName The name of the range set.
 * @return {boolean}
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.prototype.hasRangeSet = function(sName) { return false; };

/**
 * Initializes a Screen width media query range set.
 * 
 * This function can either be called only with the name parameter to initialize a predefined range set,
 * e.g. <code>sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS)</code>.
 * 
 * Or it is possible to define a custom range set as in the following example:
 * <code>sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"])</code> defines 3 ranges:
 * <ul>
 * <li>0px-199.999px with name "Small"</li>
 * <li>200px-399.999px with name "Medium"</li>
 * <li>400px-INFINITY with name "Large"</li>
 * </ul>
 * 
 * The range names are optional. If they are specified also a CSS class (e.g. sapUiMedia-MyRangeSet-Small) is added to the document root
 * depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses</code>.
 * @param {String} sName The name of the range set. Either a predefined or custom one. The name must be a valid id (consist of letters and digits).
 * @param {int[]} aRangeBorders The range borders
 * @param {String} [sUnit] The unit which should be used. Allowed values are px (default), em or rem.
 * @param {String[]} [aRangeNames] The names of the ranges. The names must be a valid id (consist of letters and digits).
 * @param {boolean} [bSuppressClasses] Whether writing CSS classes to the document root should be suppressed
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.prototype.initRangeSet = function(sName,aRangeBorders,sUnit,aRangeNames,bSuppressClasses) {  };

/**
 * Removes a previously initialized range set and detaches all registered handlers.
 * 
 * Initialized predefined range sets (@see sap.ui.Device.media#RANGESETS) cannot be removed.
 * @param {String} sName The name of the range set.
 * @protected
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.prototype.removeRangeSet = function(sName) {  };


// ---- sap.ui.Device.media.RANGESETS --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.media.RANGESETS.toString = function() { return ""; };

// ---- sap.ui.Device.orientation --------------------------------------------------------------------------

/**
 * Registers the given handler to the orientation change event.
 * 
 * The handler has one map parameter <code>mParams</code>:
 * <ul>
 * <li>mParams.landscape: whether the orientation is currently landscape</li>
 * </ul>
 * @param {Function} fnFunction The function to call, when the orientation change event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @public
 * 
 * @memberof sap.ui.Device.orientation
 */
sap.ui.Device.orientation.prototype.attachHandler = function(fnFunction,oListener) {  };

/**
 * Deregisters a previously registered handler from the orientation change event.
 * @param {Function} fnFunction The function to call, when the orientation change event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @public
 * 
 * @memberof sap.ui.Device.orientation
 */
sap.ui.Device.orientation.prototype.detachHandler = function(fnFunction,oListener) {  };


// ---- sap.ui.Device.os --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.os.toString = function() { return ""; };

// ---- sap.ui.Device.os.OS --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.os.OS.toString = function() { return ""; };

// ---- sap.ui.Device.resize --------------------------------------------------------------------------

/**
 * Registers the given handler to the resize event.
 * 
 * The handler has one map parameter <code>mParams</code>:
 * <ul>
 * <li>mParams.height: new height of the window</li>
 * <li>mParams.width: new width of the window</li>
 * </ul>
 * @param {Function} fnFunction The function to call, when the resize event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @public
 * 
 * @memberof sap.ui.Device.resize
 */
sap.ui.Device.resize.prototype.attachHandler = function(fnFunction,oListener) {  };

/**
 * Deregisters a previously registered handler from the resize event.
 * @param {Function} fnFunction The function to call, when the resize event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @public
 * 
 * @memberof sap.ui.Device.resize
 */
sap.ui.Device.resize.prototype.detachHandler = function(fnFunction,oListener) {  };


// ---- sap.ui.Device.support --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.support.toString = function() { return ""; };

// ---- sap.ui.Device.system --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.system.toString = function() { return ""; };

// ---- sap.ui.Device.system.SYSTEMTYPE --------------------------------------------------------------------------


// ---- sap.ui.model --------------------------------------------------------------------------


// ---- sap.ui.model.analytics --------------------------------------------------------------------------

/**
 * If called on an instance of an ODataModel it will enrich it with analytics capabilities.
 * @experimental This module is only for experimental use!
 * @protected
 * 
 * @memberof sap.ui.model.analytics
 */
sap.ui.model.analytics.ODataModelAdapter = function() {  };

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the 
 * tree structure in list based controls.
 * @experimental This module is only for experimental use!
 * @protected
 * 
 * @memberof sap.ui.model.analytics
 */
sap.ui.model.analytics.TreeBindingAdapter = function() {  };


// ---- sap.ui.model.analytics.AnalyticalBinding --------------------------------------------------------------------------

/**
 * @class 
 * Tree binding implementation for client models
 * 
 * Handling of different count modes:
 * The AnalyticalBinding always uses the OData $inlinecount system query option to determine the total 
 * count of matching entities. It ignores the default count mode set in the ODataModel instance and the 
 * count mode specified in the binding parameters. If the default count mode is None, a warning is added
 * to the log to remind the application that OData requests generated by the AnalyticalBinding will include 
 * a $inlinecount. If a count mode has been specified in the binding parameters, an error message will be
 * logged if it is None, because the binding will still add the $inlinecount to OData requests. If a 
 * binding count mode is set to Request or Both, a warning will be logged to remind the application that 
 * the OData requests generated by the AnalyticalBinding will include a $inlinecount. 
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath the path pointing to the tree / array that should be bound
 * @param {object} [oContext=null] the context object for this databinding (optional)
 * @param {array} [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object} [mParameters=null] additional model specific parameters (optional) 
 * @throws Will throw an error if no QueryResult object could be retrieved, either from an explicitly
 *         given EntitySet (via optional mParameters.entitySet argument), or by default implicitly from 
 *         the binding path (see mandatory sPath argument).
 * @extends sap.ui.model.TreeBinding
 * @experimental This module is only for experimental use!
 * @protected
 * 
 */
sap.ui.model.analytics.AnalyticalBinding = function(oModel,sPath,oContext,aFilters,mParameters) {};
/**
 * Check whether this Binding would provide new values and in case it changed, inform interested parties about this.
 * @param {boolean}
 *            bForceUpdate
 * @param {object} mChangedEntities
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.checkUpdate = function(bForceUpdate,mChangedEntities) {  };

/**
 * Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the tree according to the filter definitions.
 * @public
 * @param {sap.ui.model.Filter[]}
 *            aFilter Array of sap.ui.model.Filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.filter = function(aFilter,sFilterType) { return new sap.ui.model.ListBinding(); };

/**
 * @public
 * @returns {Array} The names of the filterable properties in the given entity set.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getFilterablePropertyNames = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.model.analytics.AnalyticalBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * @public
 * @param {string} sPropertyName
 * @returns {string} The property.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getProperty = function(sPropertyName) { return ""; };

/**
 * @public
 * @param {string} sPropertyName
 * @returns {string} The heading maintained for the given property.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getPropertyHeading = function(sPropertyName) { return ""; };

/**
 * @public
 * @param {string} sPropertyName
 * @returns {string} The label maintained for the given property.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getPropertyLabel = function(sPropertyName) { return ""; };

/**
 * @public
 * @param {string} sPropertyName
 * @returns {string} The quick info maintained for the given property.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getPropertyQuickInfo = function(sPropertyName) { return ""; };

/**
 * @public
 * @returns {Array} The names of the sortable properties in the given entity set.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getSortablePropertyNames = function() { return null; };

/**
 * @protected
 * @param {string} sPropertyName
 * @returns {boolean} true, if the given property is a measure
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.isMeasure = function(sPropertyName) { return false; };

/**
 * @public
 * @param {Object}
 *            oGroupIdRanges Property names are group IDs to be loaded via the model. Property values are arrays of { startIndex, length,
 *            threshold } describing the index ranges to be fetched.
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.loadGroups = function(oGroupIdRanges) {  };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch
 * the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter
 * bForceUpdate.
 * @param {boolean}
 *            [bForceUpdate] Update the bound control even if no data has been changed
 * @param {object}
 *            [mChangedEntities]
 * @param {object}
 *            [mEntityTypes]
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.refresh = function(bForceUpdate,mChangedEntities,mEntityTypes) {  };

/**
 * Sorts the tree.
 * @public
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]}
 *            aSorter the Sorter or an array of sorter objects object which define the sort order
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.sort = function(aSorter) { return new sap.ui.model.ListBinding(); };


// ---- sap.ui.model.analytics.odata4analytics --------------------------------------------------------------------------

/**
 * Specify which components of the dimension shall be included in the value
 * set.
 * @param bIncludeText
 *            Indicator whether or not to include the dimension text (if
 *            available) in the value set.
 * @param bIncludeAttributes
 *            Indicator whether or not to include all dimension attributes
 *            (if available) in the value set.
 * @public
 * 
 * @memberof sap.ui.model.analytics.odata4analytics
 */
sap.ui.model.analytics.odata4analytics.includeDimensionTextAttributes = function(bIncludeText,bIncludeAttributes) {  };


// ---- sap.ui.model.analytics.odata4analytics.Dimension --------------------------------------------------------------------------

/**
 * Create a representation of a dimension provided by an analytic query. Do not create your own instances.
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 * @constructor
 * @class Representation of a property annotated with
 *        sap:aggregation-role="dimension".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension = function(oQueryResult,oProperty) {};
/**
 * Find attribute by name
 * @param {string}
 *            sName Attribute name
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension attribute
 *          object with this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.findAttributeByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Get the names of all attributes included in this dimension
 * @returns {array(string)} List of all attribute names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getAllAttributeNames = function() { return null; };

/**
 * Get all attributes of this dimension
 * @returns {object} An object with individual JS properties for each
 *          attribute of this dimension. The JS object properties all are
 *          objects of type odata4analytics.DimensionAttribute. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the dimension attribute keys.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getAllAttributes = function() { return new Object(); };

/**
 * Get query result containing this dimension
 * @return {sap.ui.model.analytics.odata4analytics.QueryResult} The query result object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getContainingQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Get associated hierarchy
 * @returns {object} The hierarchy object or null if there is none. It can
 *          be an instance of class
 *          odata4analytics.RecursiveHierarchy (TODO later: or a
 *          leveled hierarchy). Use methods isLeveledHierarchy and
 *          isRecursiveHierarchy to determine object type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getHierarchy = function() { return new Object(); };

/**
 * Get the key property
 * @returns {object} The DataJS object representing the property for the
 *          dimension key
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getKeyProperty = function() { return new Object(); };

/**
 * Get label
 * @returns {string} The (possibly language-dependent) label text for this
 *          dimension
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getLabelText = function() { return ""; };

/**
 * Get master data entity set for this dimension
 * @return {sap.ui.model.analytics.odata4analytics.EntitySet} The master data entity set
 *         for this dimension, or null, if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getMasterDataEntitySet = function() { return new sap.ui.model.analytics.odata4analytics.EntitySet(); };

/**
 * Get the name of the dimension
 * @returns {string} The name of this dimension, which is identical to the
 *          name of the dimension key property in the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getName = function() { return ""; };

/**
 * Get super-ordinate dimension
 * @returns {object} The super-ordinate dimension or null if there is none
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getSuperOrdinateDimension = function() { return new Object(); };

/**
 * Get text property related to this dimension
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getTextProperty = function() { return new Object(); };

/**
 * Get indicator whether or not master data is available for this dimension
 * @returns {boolean} True iff master data is available
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.hasMasterData = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.DimensionAttribute --------------------------------------------------------------------------

/**
 * Create a representation of a dimension attribute provided by an analytic
 * query. Do not create your own instances.
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension attribute
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 *            attribute
 * @constructor
 * @class Representation of a dimension attribute.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute = function(oQueryResult,oProperty) {};
/**
 * Get dimension
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object
 *          containing this attribute
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getDimension = function() { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Get the key property
 * @returns {object} The DataJS object representing the property for the key
 *          of this dimension attribute
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getKeyProperty = function() { return new Object(); };

/**
 * Get label
 * @returns {string} The (possibly language-dependent) label text for this
 *          dimension attribute
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getLabelText = function() { return ""; };

/**
 * Get the name of the dimension attribute
 * @returns {string} The name of the dimension attribute, which is identical
 *          to the name of the property in the entity type holding the
 *          attribute value
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getName = function() { return ""; };

/**
 * Get text property related to this dimension attribute
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getTextProperty = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a dimension value help. Such a
 * value help is served by either the query result entity set, in which case the
 * returned dimension members are limited to those also used in the query result
 * data. Or, the value help is populated by a master data entity set, if made
 * available by the service. In this case, the result will include all valid
 * members for that dimension.
 * @param {sap.ui.model.analytics.odata4analytics.Dimension}
 *            oDimension Description of a dimension
 * @param {sap.ui.model.analytics.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of the query result or (not
 *            yet supported) master data entity set Such an object is required
 *            if the entity set holding the dimension members includes
 *            parameters.
 * @param {boolean}
 *            bUseMasterData (optional) Indicates use of master data for
 *            determining the dimension members.
 * @constructor
 * @class Creation of URIs for fetching a query dimension value set.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest = function(oDimension,oParameterizationRequest,bUseMasterData) {};
/**
 * Get the filter expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} The filter object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getFilterExpression = function() { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Returns the current page boundaries as object with properties
 * <code>start</code> and <code>end</code>. If the end of the page is
 * unbounded, <code>end</code> is null.
 * @returns {Object} the current page boundaries as object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getResultPageBoundaries = function() { return null; };

/**
 * Get the sort expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} The sort object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getSortExpression = function() { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Get the value of an query option for the OData request URI corresponding
 * to this request.
 * @param {String}
 *            sQueryOptionName Identifies the query option: $select,
 *            $filter,... or any custom query option
 * @returns {String} The value of the requested query option or null, if
 *          this option is not used for the OData request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getURIQueryOptionValue = function(sQueryOptionName) { return null; };

/**
 * Get the URI to locate the entity set for the dimension memebers.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The resource path of the URI pointing to the entity
 *          set. It is a relative URI unless a service root is given, which
 *          would then prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getURIToDimensionMemberEntitySet = function(sServiceRootURI) { return null; };

/**
 * Get the unescaped URI to fetch the dimension members, optionally
 * augmented by text and attributes.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The unescaped URI that contains the OData resource path
 *          and OData system query options to express the request for the
 *          parameter value set..
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getURIToDimensionMemberEntries = function(sServiceRootURI) { return null; };

/**
 * Set the filter expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the filter object maintained by this request.
 * @param {sap.ui.model.analytics.odata4analytics.FilterExpression}
 *            oFilter The filter object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setFilterExpression = function(oFilter) {  };

/**
 * Set the parameterization request required for retrieving dimension
 * members directly from the query result, if it is parameterized.
 * @param oParameterizationRequest
 *            Request object for interactions with the parameterization of
 *            this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setParameterizationRequest = function(oParameterizationRequest) {  };

/**
 * Set further options to be applied for the OData request
 * @param {Boolean}
 *            bIncludeCount Indicates whether or not the result shall
 *            include a count for the returned entities. Default is not to
 *            include it. Pass null to keep current setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setRequestOptions = function(bIncludeCount) {  };

/**
 * Specify that only a page of the query result shall be returned. A page is
 * described by its boundaries, that are row numbers for the first and last
 * rows in the query result to be returned.
 * @param {Number}
 *            start The first row of the query result to be returned.
 *            Numbering starts at 1. Passing null is equivalent to start
 *            with the first row.
 * @param {Number}
 *            end The last row of the query result to be returned. Passing
 *            null is equivalent to get all rows up to the end of the query
 *            result.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setResultPageBoundaries = function(start,end) {  };

/**
 * Set the sort expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the sort object maintained by this request.
 * @param {sap.ui.model.analytics.odata4analytics.SortExpression}
 *            oSorter The sort object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setSortExpression = function(oSorter) {  };


// ---- sap.ui.model.analytics.odata4analytics.EntitySet --------------------------------------------------------------------------

/**
 * Create a representation of an OData entity set in the context of an analytic
 * query. Do not create your own instances.
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            set
 * @param {object}
 *            oSchema DataJS object for the schema surrounding the container of
 *            this entity set
 * @param {object}
 *            oContainer DataJS object for the container holding this entity set
 * @param {object}
 *            oEntitySet DataJS object for the entity set
 * @param {object}
 *            oEntityType DataJS object for the entity type
 * @constructor
 * @class Representation of a OData entity set.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet = function(oModel,oSchema,oContainer,oEntitySet,oEntityType) {};
/**
 * Get entity type used for this entity set
 * @returns {object} The DataJS object representing the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getEntityType = function() { return new Object(); };

/**
 * Get the fully qualified name for this entity type
 * @returns {string} The fully qualified name
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getQName = function() { return ""; };

/**
 * Get full description for this entity set
 * @returns {object} The DataJS object representing the entity set
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getSetDescription = function() { return new Object(); };

/**
 * Get names of properties in this entity set that can be updated
 * @returns {object} An object with individual JS properties for each
 *          updatable property. For testing whether propertyName is the name
 *          of an updatable property, use
 *          <code>getUpdatablePropertyNameSet()[propertyName]</code>. The
 *          included JS object properties are all set to true.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getUpdatablePropertyNameSet = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.EntityType --------------------------------------------------------------------------

/**
 * Create a representation of an OData entity type in the context of an analytic
 * query. Do not create your own instances.
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {object}
 *            oEntityType DataJS object for the entity type
 * @constructor
 * @class Representation of a OData entity type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType = function(oModel,oSchema,oEntityType) {};
/**
 * Find property by name
 * @param {string}
 *            sPropertyName Property name
 * @returns {object} The DataJS object representing the property or null if
 *          it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.findPropertyByName = function(sPropertyName) { return new Object(); };

/**
 * Get the names of all properties with an associated hierarchy
 * @returns {array(string)} List of all property names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getAllHierarchyPropertyNames = function() { return null; };

/**
 * Get names of properties that can be filtered, that is they can be used in
 * $filter expressions
 * @returns {array(string)} Array with names of properties that can be
 *          filtered.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getFilterablePropertyNames = function() { return null; };

/**
 * Get heading of the property with specified name (identified by property
 * metadata annotation sap:heading)
 * @param {string}
 *            sPropertyName Property name
 * @returns {string} The heading string
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getHeadingOfProperty = function(sPropertyName) { return ""; };

/**
 * Get the hierarchy associated to a given property Based on the current
 * specification, hierarchies are always recursive. TODO: Extend behavior
 * when leveled hierarchies get in scope
 * @param {string}
 *            sName Parameter name
 * @returns {sap.ui.model.analytics.odata4analytics.RecursiveHierarchy} The hierarchy
 *          object or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getHierarchy = function(sName) { return new sap.ui.model.analytics.odata4analytics.RecursiveHierarchy(); };

/**
 * Get key properties of this type
 * @returns {array(string)} The list of key property names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getKeyProperties = function() { return null; };

/**
 * Get label of the property with specified name (identified by property
 * metadata annotation sap:label)
 * @param {string}
 *            sPropertyName Property name
 * @returns {string} The label string
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getLabelOfProperty = function(sPropertyName) { return ""; };

/**
 * Get all properties
 * @return {object} Object with (JavaScript) properties, one for each (OData
 *         entity type) property. These (JavaScript) properties hold the
 *         DataJS object representing the property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getProperties = function() { return new Object(); };

/**
 * Get properties for which filter restrictions have been specified
 * @returns {object} Object with (JavaScript) properties, one for each
 *          (OData entity type) property. The property value is from
 *          odata4analytics.EntityType.propertyFilterRestriction and
 *          indicates the filter restriction for this property.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getPropertiesWithFilterRestrictions = function() { return new Object(); };

/**
 * Get the fully qualified name for this entity type
 * @returns {string} The fully qualified name
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getQName = function() { return ""; };

/**
 * Get quick info of the property with specified name (identified by property
 * metadata annotation sap:quickinfo)
 * @param {string}
 *            sPropertyName Property name
 * @returns {string} The quick info string
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getQuickInfoOfProperty = function(sPropertyName) { return ""; };

/**
 * Get names of properties that must be filtered, that is they must appear
 * in every $filter expression
 * @returns {array(string)} Array with names of properties that must be
 *          filtered.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getRequiredFilterPropertyNames = function() { return null; };

/**
 * Get names of properties that can be sorted, that is they can be used in
 * $orderby expressions
 * @returns {array(string)} Array with names of properties that can be
 *          sorted.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getSortablePropertyNames = function() { return null; };

/**
 * Get the super-ordinate property related to the property with specified
 * name (identified by property metadata annotation sap:super-ordinate)
 * @param {string}
 *            sPropertyName Property name
 * @returns {object} The DataJS object representing the super-ordinate
 *          property or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getSuperOrdinatePropertyOfProperty = function(sPropertyName) { return new Object(); };

/**
 * Get the text property related to the property with specified name
 * (identified by property metadata annotation sap:text)
 * @param {string}
 *            sPropertyName Property name
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getTextPropertyOfProperty = function(sPropertyName) { return new Object(); };

/**
 * Get full description for this entity type
 * @returns {object} The DataJS object representing the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getTypeDescription = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.FilterExpression --------------------------------------------------------------------------

/**
 * Create a representation of a filter expression for a given entity type. It can be rendered as value for the $filter system
 * query option.
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * @constructor
 * @class Representation of a $filter expression for an OData entity type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression = function(oModel,oSchema,oEntityType) {};
/**
 * Add a condition to the filter expression.
 * 
 * Multiple conditions on the same property are combined with a logical OR first, and in a second step conditions for
 * different properties are combined with a logical AND.
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @param {sap.ui.model.FilterOperator}
 *            sOperator operator used for the condition
 * @param {object}
 *            oValue value to be used for this condition
 * @param {object}
 *            oValue2 (optional) as second value to be used for this condition
 * @throws Exception
 *             if the property is unknown or not filterable
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.addCondition = function(sPropertyName,sOperator,oValue,oValue2) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Add a set condition to the filter expression.
 * 
 * A set condition tests if the value of a property is included in a set of given values. It is a convenience method for
 * this particular use case eliminating the need for multiple API calls.
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @param {array}
 *            aValues values defining the set
 * @throws Exception
 *             if the property is unknown or not filterable
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.addSetCondition = function(sPropertyName,aValues) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Add an array of UI5 filter conditions to the filter expression.
 * 
 * The UI5 filter condition is combined with the other given conditions using a logical AND. This method
 * is particularly useful for passing forward already created UI5 filter arrays.  
 * @param {array(sap.ui.model.Filter)}
 *            aUI5Filter Array of UI5 filter objects
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.addUI5FilterConditions = function(aUI5Filter) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Check if request is compliant with basic filter constraints expressed in metadata:
 * 
 * (a) all properties required in the filter expression have been referenced (b) the single-value filter restrictions have been obeyed
 * @returns {boolean} The value true. In case the expression violates some of the rules, an exception with some explanatory
 *          message is thrown
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.checkValidity = function() { return false; };

/**
 * Clear expression from any conditions that may have been set previously
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.clear = function() {  };

/**
 * Get description for this entity type
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The object representing the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get an array of SAPUI5 Filter objects corresponding to this expression.
 * @returns {array(sap.ui.model.Filter)} List of filter objects representing this expression
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.getExpressionAsUI5FilterArray = function() { return new array(sap.ui.model.Filter)(); };

/**
 * Get the value for the OData system query option $filter corresponding to this expression.
 * @returns {string} The $filter value for the filter expression
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.getURIFilterOptionValue = function() { return ""; };

/**
 * Remove all conditions for some property from the filter expression.
 * 
 * All previously set conditions for some property are removed from the filter expression.
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @throws Exception
 *             if the property is unknown
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.removeConditions = function(sPropertyName) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };


// ---- sap.ui.model.analytics.odata4analytics.Measure --------------------------------------------------------------------------

/**
 * Create a representation of a measure provided by an analytic query. Do not create your own instances.
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this measure
 * @param {object}
 *            oProperty The DataJS object object representing the measure
 * @constructor
 * @class Representation of a property annotated with
 *        sap:aggregation-role="measure".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure = function(oQueryResult,oProperty) {};
/**
 * Get the text property associated to the raw value property holding the
 * formatted value related to this measure
 * @returns {object} The DataJS object representing the property holding the
 *          formatted value text of this measure or null if this measure
 *          does not have a unit
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getFormattedValueProperty = function() { return new Object(); };

/**
 * Get label
 * @returns {string} The (possibly language-dependent) label text for this
 *          measure
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getLabelText = function() { return ""; };

/**
 * Get the name of the measure
 * @returns {string} The name of the measure, which is identical to the name
 *          of the measure raw value property in the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getName = function() { return ""; };

/**
 * Get the raw value property
 * @returns {object} The DataJS object representing the property holding the
 *          raw value of this measure
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getRawValueProperty = function() { return new Object(); };

/**
 * Get the unit property related to this measure
 * @returns {object} The DataJS object representing the unit property or
 *          null if this measure does not have a unit
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getUnitProperty = function() { return new Object(); };

/**
 * Get indicator whether or not the measure is updatable
 * @returns {boolean} True iff the measure is updatable
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.isUpdatable = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.Model --------------------------------------------------------------------------

/**
 * Create a representation of the analytical semantics of OData service metadata
 * @param {object}
 *            oModelReference An instance of ReferenceByURI, ReferenceByModel or
 *            ReferenceWithWorkaround for locating the OData service.
 * @param {object}
 * 	          mParameter? Additional parameters for controlling the model construction. Currently supported are:
 *            <li> sAnnotationJSONDoc - A JSON document providing extra annotations to the elements of the 
 *                 structure of the given service</li>
 * @constructor
 * @class Representation of an OData model with analytical annotations defined
 *        by OData4SAP.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model = function(oModelReference,mParameter?) {};
/**
 * Find analytic query result by name
 * @param {string}
 *            sName Fully qualified name of query result entity set
 * @returns {sap.ui.model.analytics.odata4analytics.QueryResult} The query result object
 *          with this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.findQueryResultByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Get the names of all query results (entity sets) offered by the model
 * @returns {array(string)} List of all query result names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.getAllQueryResultNames = function() { return null; };

/**
 * Get all query results offered by the model
 * @returns {object} An object with individual JS properties for each query
 *          result included in the model. The JS object properties all are
 *          objects of type odata4analytics.QueryResult. The names
 *          of the JS object properties are given by the entity set names
 *          representing the query results.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.getAllQueryResults = function() { return new Object(); };

/**
 * Get underlying OData model provided by SAP UI5
 * @returns {object} The SAP UI5 representation of the model.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.getODataModel = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel --------------------------------------------------------------------------

/**
 * Create a reference to an OData model already loaded elsewhere with the help
 * of SAP UI5.
 * @param {object}
 *            oModel holding the OData model.
 * @constructor
 * @class Handle to an already instantiated SAP UI5 OData model.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel = function(oModel) {};

// ---- sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI --------------------------------------------------------------------------

/**
 * Create a reference to an OData model by the URI of the related OData service.
 * @param {string}
 *            sURI holding the URI.
 * @constructor
 * @class Handle to an OData model by the URI pointing to it.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI = function(sURI) {};

// ---- sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround --------------------------------------------------------------------------

/**
 * Create a reference to an OData model having certain workarounds activated. A
 * workaround is an implementation that changes the standard behavior of the API
 * to overcome some gap or limitation in the OData provider. The workaround
 * implementation can be conditionally activated by passing the identifier in
 * the contructor.
 * 
 * Known workaround identifiers are:
 * 
 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
 * gets generated from the property name.</li>
 * 
 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
 * another property with the same name and an appended "Name", "Text" etc.
 * exists, they are linked via annotation.</li>
 * @param {object}
 *            oModel holding a reference to the OData model, obtained
 *            by odata4analytics.Model.ReferenceByModel or by
 *            sap.odata4analytics.Model.ReferenceByURI.
 * @param {string[]}
 *            aWorkaroundID listing all workarounds to be applied.
 * @constructor
 * @class Handle to an already instantiated SAP UI5 OData model.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround = function(oModel,aWorkaroundID) {};

// ---- sap.ui.model.analytics.odata4analytics.Parameter --------------------------------------------------------------------------

/**
 * Create a representation of a single parameter contained in a parameterization. Do not create your own instances.
 * @param {sap.ui.model.analytics.odata4analytics.Parameterization}
 *            oParameterization The parameterization containing this parameter
 * @param {object}
 *            oProperty The DataJS object object representing the text property
 * @constructor
 * @class Representation of a property annotated with sap:parameter.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter = function(oParameterization,oProperty) {};
/**
 * Get parameterization containing this parameter
 * @return {sap.ui.model.analytics.odata4analytics.Parameterization} The parameterization
 *         object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getContainingParameterization = function() { return new sap.ui.model.analytics.odata4analytics.Parameterization(); };

/**
 * Get label
 * @returns {string} The (possibly language-dependent) label text for this
 *          parameter
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getLabelText = function() { return ""; };

/**
 * Get the name of the parameter
 * @returns {string} The name of the parameter, which is identical with the
 *          name of the property representing the parameter in the
 *          parameterization entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getName = function() { return ""; };

/**
 * Get property for the parameter representing the peer boundary of the same
 * interval
 * @returns {sap.ui.model.analytics.odata4analytics.Parameter} The parameter representing
 *          the peer boundary of the same interval. This means that if
 *          *this* parameter is a lower boundary, the returned object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getPeerIntervalBoundaryParameter = function() { return new sap.ui.model.analytics.odata4analytics.Parameter(); };

/**
 * Get property
 * @returns {object} The DataJS object representing the property of this
 *          parameter
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getProperty = function() { return new Object(); };

/**
 * Get text property related to this parameter
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getTextProperty = function() { return new Object(); };

/**
 * Get the URI to locate the entity set holding the value set, if it is
 * available.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns The resource path of the URI pointing to the entity set. It is a
 *          relative URI unless a service root is given, which would then
 *          prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getURIToValueEntitySet = function(sServiceRootURI) {  };

/**
 * Get indicator if the parameter represents an interval boundary
 * @returns {boolean} True iff it represents an interval boundary, otherwise
 *          false
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isIntervalBoundary = function() { return false; };

/**
 * Get indicator if the parameter represents the lower boundary of an
 * interval
 * @returns {boolean} True iff it represents the lower boundary of an
 *          interval, otherwise false
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isLowerIntervalBoundary = function() { return false; };

/**
 * Get indicator whether or not the parameter is optional
 * @returns {boolean} True iff the parameter is optional
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isOptional = function() { return false; };

/**
 * Get indicator if a set of values is available for this parameter.
 * Typically, this is true for parameters with a finite set of known values
 * such as products, business partners in different roles, organization
 * units, and false for integer or date parameters
 * @returns {boolean} True iff a value set is available, otherwise false
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isValueSetAvailable = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.Parameterization --------------------------------------------------------------------------

/**
 * Create a representation of a parameterization for an analytic query. Do not create your own instances.
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this parameterization
 * @param {sap.ui.model.analytics.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this parameterization offered
 *            by the OData service
 * @class Representation of an entity type annotated with
 *        sap:semantics="parameters".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization = function(oEntityType,oEntitySet) {};
/**
 * Find parameter by name
 * @param {string}
 *            sName Parameter name
 * @returns {sap.ui.model.analytics.odata4analytics.Parameter} The parameter object with
 *          this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.findParameterByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Parameter(); };

/**
 * Get the names of all parameters part of the parameterization
 * @returns {array(string)} List of all parameter names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getAllParameterNames = function() { return null; };

/**
 * Get all parameters included in this parameterization
 * @returns {object} An object with individual JS properties for each
 *          parameter included in the query result. The JS object properties
 *          all are objects of type odata4analytics.Parameter. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the parameter keys.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getAllParameters = function() { return new Object(); };

/**
 * Get the entity set representing this query result in the OData model
 * @returns {sap.ui.model.analytics.odata4analytics.EntitySet} The OData entity set
 *          representing this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getEntitySet = function() { return new sap.ui.model.analytics.odata4analytics.EntitySet(); };

/**
 * Get the entity type defining the type of this query result in the OData
 * model
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The OData entity type for
 *          this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get the name of the parameter
 * @returns {string} The name of the parameterization, which is identical
 *          with the name of the entity set representing the
 *          parameterization in the OData service
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getName = function() { return ""; };

/**
 * Get navigation property to query result
 * @returns {sap.ui.model.analytics.odata4analytics.QueryResult} The parameter object with
 *          this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getNavigationPropertyToQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };


// ---- sap.ui.model.analytics.odata4analytics.ParameterizationRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a query parameterization.
 * @param {sap.ui.model.analytics.odata4analytics.Parameterization}
 *            oParameterization Description of a query parameterization
 * @constructor
 * @class Creation of URIs for query parameterizations.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest = function(oParameterization) {};
/**
 * Get the description of the parameterization on which this request
 * operates on
 * @returns {sap.ui.model.analytics.odata4analytics.Parameterization} Description of a
 *          query parameterization
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.getParameterization = function() { return new sap.ui.model.analytics.odata4analytics.Parameterization(); };

/**
 * Get the URI to locate the entity set for the query parameterization.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns The resource path of the URI pointing to the entity set. It is a
 *          relative URI unless a service root is given, which would then
 *          prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.getURIToParameterizationEntitySet = function(sServiceRootURI) {  };

/**
 * Get the URI to locate the parameterization entity for the values assigned
 * to all parameters beforehand. Notice that a value must be supplied for
 * every parameter including those marked as optional. For optional
 * parameters, assign the special value that the service provider uses as an
 * "omitted" value. For example, for services based on BW Easy Queries, this
 * would be an empty string.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns The resource path of the URI pointing to the entity set. It is a
 *          relative URI unless a service root is given, which would then
 *          prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.getURIToParameterizationEntry = function(sServiceRootURI) {  };

/**
 * Assign a value to a parameter
 * @param {String}
 *            sParameterName Name of the parameter. In case of a range
 *            value, provide the name of the lower boundary parameter.
 * @param {String}
 *            sValue Assigned value. Pass null to remove a value assignment.
 * @param {String}
 *            sToValue Omit it or set it to null for single values. If set,
 *            it will be assigned to the upper boundary parameter
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.setParameterValue = function(sParameterName,sValue,sToValue) {  };


// ---- sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a query parameter value help.
 * @param {sap.ui.model.analytics.odata4analytics.Parameter}
 *            oParameter Description of a query parameter
 * @constructor
 * @class Creation of URIs for fetching a query parameter value set.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest = function(oParameter) {};
/**
 * Get the filter expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} The filter object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getFilterExpression = function() { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Get the sort expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} The sort object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getSortExpression = function() { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Get the value of an query option for the OData request URI corresponding
 * to this request.
 * @param {String}
 *            sQueryOptionName Identifies the query option: $select,
 *            $filter,... or any custom query option
 * @returns {String} The value of the requested query option or null, if
 *          this option is not used for the OData request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getURIQueryOptionValue = function(sQueryOptionName) { return null; };

/**
 * Get the unescaped URI to fetch the parameter value set.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The unescaped URI that contains the OData resource path
 *          and OData system query options to express the request for the
 *          parameter value set..
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getURIToParameterValueSetEntries = function(sServiceRootURI) { return null; };

/**
 * Specify which components of the parameter shall be included in the value
 * set.
 * @param bIncludeText
 *            Indicator whether or not to include the parameter text (if
 *            available) in the value set. Pass null to keep current
 *            setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.includeParameterText = function(bIncludeText) {  };

/**
 * Set the filter expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the filter object maintained by this request.
 * @param {sap.ui.model.analytics.odata4analytics.FilterExpression}
 *            oFilter The filter object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.setFilterExpression = function(oFilter) {  };

/**
 * Set the sort expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the sort object maintained by this request.
 * @param {sap.ui.model.analytics.odata4analytics.SortExpression}
 *            oSorter The sort object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.setSortExpression = function(oSorter) {  };


// ---- sap.ui.model.analytics.odata4analytics.QueryResult --------------------------------------------------------------------------

/**
 * Create a representation of an analytic query. Do not create your own instances.
 * @param {sap.ui.model.analytics.odata4analytics.Model}
 *            oModel The analytical model containing this query result entity
 *            set
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this query
 * @param {sap.ui.model.analytics.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this query offered by the
 *            OData service
 * @param {sap.ui.model.analytics.odata4analytics.Parameterization}
 *            oParameterization The parameterization of this query, if any
 * @constructor
 * @this (QueryResult)
 * @class Representation of an entity type annotated with
 *        sap:semantics="aggregate".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult = function(oModel,oEntityType,oEntitySet,oParameterization) {};
/**
 * Find dimension by name
 * @param {string}
 *            sName Dimension name
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object with
 *          this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findDimensionByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Find dimension by property name
 * @param {string}
 *            sName Property name
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object to
 *          which the given property name is related, because the property
 *          holds the dimension key, its text, or is an attribute of this
 *          dimension. If no such dimension exists, null is returned.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findDimensionByPropertyName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Find measure by name
 * @param {string}
 *            sName Measure name
 * @returns {sap.ui.model.analytics.odata4analytics.Measure} The measure object with this
 *          name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findMeasureByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Measure(); };

/**
 * Find measure by property name
 * @param {string}
 *            sName Property name
 * @returns {sap.ui.model.analytics.odata4analytics.Measure} The measure object to which
 *          the given property name is related, because the property holds
 *          the raw measure value or its formatted value. If no such measure
 *          exists, null is returned.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findMeasureByPropertyName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Measure(); };

/**
 * Get the names of all dimensions included in the query result
 * @returns {array(string)} List of all dimension names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllDimensionNames = function() { return null; };

/**
 * Get all dimensions included in this query result
 * @returns {object} An object with individual JS properties for each
 *          dimension included in the query result. The JS object properties
 *          all are objects of type odata4analytics.Dimension. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the dimension keys.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllDimensions = function() { return new Object(); };

/**
 * Get the names of all measures included in the query result
 * @returns {array(string)} List of all measure names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllMeasureNames = function() { return null; };

/**
 * Get all measures included in this query result
 * @returns {object} An object with individual JS properties for each
 *          measure included in the query result. The JS object properties
 *          all are objects of type odata4analytics.Measure. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the measure raw values.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllMeasures = function() { return new Object(); };

/**
 * Get the entity set representing this query result in the OData model
 * @returns {sap.ui.model.analytics.odata4analytics.EntitySet} The OData entity set
 *          representing this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getEntitySet = function() { return new sap.ui.model.analytics.odata4analytics.EntitySet(); };

/**
 * Get the entity type defining the type of this query result in the OData
 * model
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The OData entity type for
 *          this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get the analytical model containing the entity set for this query result
 * @returns {object} The analytical representation of the OData model
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getModel = function() { return new Object(); };

/**
 * Get the name of the query result
 * @returns {string} The fully qualified name of the query result, which is
 *          identical with the name of the entity set representing the query
 *          result in the OData service
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getName = function() { return ""; };

/**
 * Get the parameterization of this query result
 * @returns {sap.ui.model.analytics.odata4analytics.Parameterization} The object for the
 *          parameterization or null if the query result is not
 *          parameterized
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getParameterization = function() { return new sap.ui.model.analytics.odata4analytics.Parameterization(); };

/**
 * Get property holding the totaled property list
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getTotaledPropertiesListProperty = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.QueryResultRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a query result.
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult Description of a query parameterization
 * @param {sap.ui.model.analytics.odata4analytics.ParameterizationRequest}
 *            [oParameterizationRequest] Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 * @constructor
 * @class Creation of URIs for fetching query results.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest = function(oQueryResult,oParameterizationRequest) {};
/**
 * Add one or more dimensions to the aggregation level
 * @param aDimensionName
 *            Array of dimension names to be added to the already defined
 *            aggregation level.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.addToAggregationLevel = function(aDimensionName) {  };

/**
 * Get the names of the dimensions included in the aggregation level
 * @returns {Array} The dimension names included in the aggregation level
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getAggregationLevel = function() { return null; };

/**
 * Get details about a dimensions included in the aggregation level
 * @param sDImensionName
 *            Name of a dimension included in the aggregation level of this
 *            request, for which details shall be returned
 * @returns {object} An object with three properties named key and text,
 *          both with Boolean values indicating whether the key and text of
 *          this dimension are included in this request. The third property
 *          named attributes is an array of attribute names of this
 *          dimension included in this request, or null, if there are none.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getAggregationLevelDetails = function(sDImensionName) { return new Object(); };

/**
 * Get the filter expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} The filter object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getFilterExpression = function() { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Get the names of the measures included in the query result request
 * @returns {Array} The measure names included in the query result request
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getMeasureNames = function() { return null; };

/**
 * Retrieves the current parametrization request
 * @returns {sap.ui.model.analytics.odata4analytics.ParametrizationRequest}
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getParameterizationRequest = function() { return new sap.ui.model.analytics.odata4analytics.ParametrizationRequest(); };

/**
 * Get the description of the query result on which this request operates on
 * @returns {sap.ui.model.analytics.odata4analytics.QueryResult} Description of a query
 *          result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Returns the current page boundaries as object with properties
 * <code>start</code> and <code>end</code>. If the end of the page is
 * unbounded, <code>end</code> is null.
 * @returns {Object} the current page boundaries as object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getResultPageBoundaries = function() { return null; };

/**
 * Get the sort expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} The sort object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getSortExpression = function() { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Get the value of an query option for the OData request URI corresponding
 * to this request.
 * @param {String}
 *            sQueryOptionName Identifies the query option: $select,
 *            $filter,$orderby ... or any custom query option
 * @returns {String} The value of the requested query option or null, if
 *          this option is not used for the OData request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getURIQueryOptionValue = function(sQueryOptionName) { return null; };

/**
 * Get the URI to locate the entity set for the query result.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The resource path of the URI pointing to the entity
 *          set. It is a relative URI unless a service root is given, which
 *          would then prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getURIToQueryResultEntitySet = function(sServiceRootURI) { return null; };

/**
 * Get the unescaped URI to fetch the query result.
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @param {String}
 *            sResourcePath (optional) OData resource path to be considered.
 *            If provided, it overwrites any parameterization object that
 *            might have been specified separately.
 * @returns {String} The unescaped URI that contains the OData resource path
 *          and OData system query options to express the aggregation level,
 *          filter expression and further options.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getURIToQueryResultEntries = function(sServiceRootURI,sResourcePath) { return null; };

/**
 * Specify which dimension components shall be included in the query result.
 * The settings get applied to the currently defined aggregation level.
 * @param sDimensionName
 *            Name of the dimension for which the settings get applied.
 *            Specify null to apply the settings to all dimensions in the
 *            aggregation level.
 * @param bIncludeKey
 *            Indicator whether or not to include the dimension key in the
 *            query result. Pass null to keep current setting.
 * @param bIncludeText
 *            Indicator whether or not to include the dimension text (if
 *            available) in the query result. Pass null to keep current
 *            setting.
 * @param aAttributeName
 *            Array of dimension attribute names to be included in the
 *            result. Pass null to keep current setting. This argument is
 *            ignored if sDimensionName is null.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.includeDimensionKeyTextAttributes = function(sDimensionName,bIncludeKey,bIncludeText,aAttributeName) {  };

/**
 * Specify which measure components shall be included in the query result.
 * The settings get applied to the currently set measures.
 * @param sMeasureName
 *            Name of the measure for which the settings get applied.
 *            Specify null to apply the settings to all currently set
 *            measures.
 * @param bIncludeRawValue
 *            Indicator whether or not to include the raw value in the query
 *            result. Pass null to keep current setting.
 * @param bIncludeFormattedValue
 *            Indicator whether or not to include the formatted value (if
 *            available) in the query result. Pass null to keep current
 *            setting.
 * @param bIncludeUnit
 *            Indicator whether or not to include the unit (if available) in
 *            the query result. Pass null to keep current setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.includeMeasureRawFormattedValueUnit = function(sMeasureName,bIncludeRawValue,bIncludeFormattedValue,bIncludeUnit) {  };

/**
 * Remove one or more dimensions from the aggregation level. The method also
 * removed a potential sort expression on the dimension.
 * @param aDimensionName
 *            Array of dimension names to be removed from the already
 *            defined aggregation level.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.removeFromAggregationLevel = function(aDimensionName) {  };

/**
 * Set the aggregation level for the query result request. By default, the
 * query result will include the properties holding the keys of the given
 * dimensions. This setting can be changed using
 * includeDimensionKeyTextAttributes.
 * @param aDimensionName
 *            Array of dimension names to be part of the aggregation level.
 *            If null, the aggregation level includes all dimensions, if
 *            empty, no dimension is included.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setAggregationLevel = function(aDimensionName) {  };

/**
 * Set the filter expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the filter object maintained by this request.
 * @param {sap.ui.model.analytics.odata4analytics.FilterExpression}
 *            oFilter The filter object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setFilterExpression = function(oFilter) {  };

/**
 * Set the measures to be included in the query result request. By default,
 * the query result will include the properties holding the raw values of
 * the given measures. This setting can be changed using
 * includeMeasureRawFormattedValueUnit.
 * @param aMeasureName
 *            Array of measure names to be part of the query result request.
 *            If null, the request includes all measures, if empty, no
 *            measure is included.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setMeasures = function(aMeasureName) {  };

/**
 * Set the parameterization request required for interactions with the query
 * result of parameterized queries. This method provides an alternative way
 * to assign a parameterization request to a query result request.
 * @param oParameterizationRequest
 *            Request object for interactions with the parameterization of
 *            this query
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setParameterizationRequest = function(oParameterizationRequest) {  };

/**
 * Set further options to be applied for the OData request to fetch the
 * query result
 * @param {Boolean}
 *            bIncludeEntityKey Indicates whether or not the entity key
 *            should be returned for every entry in the query result.
 *            Default is not to include it. Pass null to keep current
 *            setting.
 * @param {Boolean}
 *            bIncludeCount Indicates whether or not the result shall
 *            include a count for the returned entities. Default is not to
 *            include it. Pass null to keep current setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setRequestOptions = function(bIncludeEntityKey,bIncludeCount) {  };

/**
 * Set the resource path to be considered for the OData request URI of this
 * query request object. This method provides an alternative way to assign a
 * path comprising a parameterization. If a path is provided, it overwrites
 * any parameterization object that might have been specified separately.
 * @param sResourcePath
 *            Resource path pointing to the entity set of the query result.
 *            Must include a valid parameterization if query contains
 *            parameters.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setResourcePath = function(sResourcePath) {  };

/**
 * Specify that only a page of the query result shall be returned. A page is
 * described by its boundaries, that are row numbers for the first and last
 * rows in the query result to be returned.
 * @param {Number}
 *            start The first row of the query result to be returned.
 *            Numbering starts at 1. Passing null is equivalent to start
 *            with the first row.
 * @param {Number}
 *            end The last row of the query result to be returned. Passing
 *            null is equivalent to get all rows up to the end of the query
 *            result.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setResultPageBoundaries = function(start,end) {  };

/**
 * Set the sort expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the sort object maintained by this request.
 * @param {sap.ui.model.analytics.odata4analytics.SortExpression}
 *            oSorter The sort object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setSortExpression = function(oSorter) {  };


// ---- sap.ui.model.analytics.odata4analytics.RecursiveHierarchy --------------------------------------------------------------------------

/**
 * Create a representation of a recursive hierarchy defined on one multiple
 * properties in an OData entity type query. Do not create your own instances.
 * @param {EntityType}
 *            oEntityType object for the entity type
 * @param {object}
 *            oNodeIDProperty DataJS object for the property holding the
 *            hierarchy node ID identifying the hierarchy node to which the
 *            OData entry belongs
 * @param {object}
 *            oParentNodeIDProperty DataJS object for the property holding the
 *            node ID of the parent of the hierarchy node pointed to by the
 *            value of oNodeIDProperty
 * @param {object}
 *            oNodeLevelProperty DataJS object for the property holding the
 *            level number for the of the hierarchy node pointed to by the value
 *            of oNodeIDProperty
 * @param {object}
 *            oNodeValueProperty DataJS object for the property holding the data
 *            value for the of the hierarchy node pointed to by the value of
 *            oNodeIDProperty
 * @constructor
 * @class Representation of a recursive hierarchy.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy = function(oEntityType,oNodeIDProperty,oParentNodeIDProperty,oNodeLevelProperty,oNodeValueProperty) {};
/**
 * Get the property holding the node ID of the hierarchy node
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getNodeIDProperty = function() { return new Object(); };

/**
 * Get the property holding the level of the hierarchy node
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getNodeLevelProperty = function() { return new Object(); };

/**
 * Get the property holding the value that is structurally organized by the
 * hierarchy
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getNodeValueProperty = function() { return new Object(); };

/**
 * Get the property holding the parent node ID of the hierarchy node
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getParentNodeIDProperty = function() { return new Object(); };

/**
 * Get indicator if this is a leveled hierarchy
 * @returns {boolean} False
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.isLeveledHierarchy = function() { return false; };

/**
 * Get indicator if this is a recursive hierarchy
 * @returns {boolean} True
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.isRecursiveHierarchy = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.SortExpression --------------------------------------------------------------------------

/**
 * Create a representation of an order by expression for a given entity type. It
 * can be rendered as value for the $orderby system query option.
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * @constructor
 * @class Representation of a $orderby expression for an OData entity type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression = function(oModel,oSchema,oEntityType) {};
/**
 * Add a condition to the order by expression. It replaces any previously specified
 * sort order for the property.
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @param {sap.ui.model.analytics.odata4analytics.SortOrder}
 *            sSortOrder sorting order used for the condition
 * @throws Exception
 *             if the property is unknown, not sortable or already added as
 *             sorter
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} This object for method
 *          chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.addSorter = function(sPropertyName,sSortOrder) { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Clear expression from any sort conditions that may have been set
 * previously
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.clear = function() {  };

/**
 * Get description for this entity type
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The object representing the
 *          entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get the first SAPUI5 Sorter object.
 * @returns {sap.ui.model.Sorter} first sorter object or null if empty
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getExpressionAsUI5Sorter = function() { return new sap.ui.model.Sorter(); };

/**
 * Get an array of SAPUI5 Sorter objects corresponding to this expression.
 * @returns {array(sap.ui.model.Sorter)} List of sorter objects representing
 *          this expression
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getExpressionsAsUI5SorterArray = function() { return new array(sap.ui.model.Sorter)(); };

/**
 * Get the value for the OData system query option $orderby corresponding to
 * this expression.
 * @param {object} oSelectedPropertyNames Object with properties requested for $select 
 * @returns {string} The $orderby value for the sort expressions
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getURIOrderByOptionValue = function(oSelectedPropertyNames) { return ""; };

/**
 * Removes the order by expression for the given property name from the list
 * of order by expression. If no order by expression with this property name
 * exists the method does nothing.
 * @param {string}
 *            sPropertyName The name of the property to be removed from the
 *            condition
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.removeSorter = function(sPropertyName) {  };


// ---- sap.ui.model.analytics.odata4analytics.SortOrder --------------------------------------------------------------------------


// ---- sap.ui.model.Binding --------------------------------------------------------------------------

/**
 * Constructor for Binding class.
 * @class
 * The Binding is the object, which holds the necessary information for a data binding,
 * like the binding path and the binding context, and acts like an interface to the
 * model for the control, so it is the event provider for changes in the data model
 * and provides getters for accessing properties or lists.
 * @param {sap.ui.model.Model} the model
 * @param {String} sPath the path
 * @param {sap.ui.model.Context} oContext the context object
 * @param {object} [mParameters]
 * @abstract
 * @public
 * 
 */
sap.ui.model.Binding = function(the,sPath,oContext,mParameters) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachChange = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.attachDataReceived = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.attachDataRequested = function(fnFunction,oListener) {  };

/**
 * Attach multiple events.
 * @param {object} oEvents
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachEvents = function(oEvents) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachRefresh = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.detachDataReceived = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.detachDataRequested = function(fnFunction,oListener) {  };

/**
 * Detach multiple events-
 * @param {object} oEvents
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachEvents = function(oEvents) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachRefresh = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Binding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event dataReceived to attached listeners.
 * @param {Map} mArguments the arguments to pass along with the event.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.fireDataReceived = function(mArguments) {  };

/**
 * Fire event dataRequested to attached listeners.
 * @param {Map} mArguments the arguments to pass along with the event.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.fireDataRequested = function(mArguments) {  };

/**
 * Returns a metadata object for class sap.ui.model.Binding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.Binding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Initialize the binding. The message should be called when creating a binding.
 * The default implementation calls checkUpdate(true). 
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.initialize = function() {  };

/**
 * Returns whether the binding is initial, which means it did not get an initial value yet
 * @return {boolean} whether binding is initial
 * @public
 * 
 */
sap.ui.model.Binding.prototype.isInitial = function() { return false; };

/**
 * Returns whether the binding is relative, which means it did not start with a /
 * @return {boolean} whether binding is relative
 * @public
 * 
 */
sap.ui.model.Binding.prototype.isRelative = function() { return false; };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * @param {boolean} bForceUpdate Update the bound control even if no data has been changed
 * @public
 * 
 */
sap.ui.model.Binding.prototype.refresh = function(bForceUpdate) {  };

/**
 * Determines if the binding should be updated by comparing the current model against a specified model.
 * @param {object} oModel The model instance to compare against
 * @returns {boolean} true if this binding should be updated
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.updateRequired = function(oModel) { return false; };


// ---- sap.ui.model.BindingMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.BindingMode.toString = function() { return ""; };

// ---- sap.ui.model.ChangeReason --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.ChangeReason.toString = function() { return ""; };

// ---- sap.ui.model.ClientContextBinding --------------------------------------------------------------------------

/**
 * Constructor for ClientContextBinding
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * 
 */
sap.ui.model.ClientContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ClientContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.ClientContextBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.ClientContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.ClientModel --------------------------------------------------------------------------

/**
 * Constructor for a new ClientModel.
 * @class Model implementation for Client models
 * @abstract
 * @extends sap.ui.model.Model
 * @version 1.26.9
 * @param {object} oData URL where to load the data from
 * @constructor
 * @public
 * 
 */
sap.ui.model.ClientModel = function(oData) {};
/**
 * @see sap.ui.model.Model.prototype.destroy
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ClientModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Force no caching.
 * @param {boolean} [bForceNoCache=false] whether to force not to cache
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.forceNoCache = function(bForceNoCache) {  };

/**
 * Returns the current data of the model.
 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
 * @return the data object
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.getData = function() {  };

/**
 * Returns a metadata object for class sap.ui.model.ClientModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.ClientModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * update all bindings
 * @param {boolean} bForceUpdate true/false: Default = false. If set to false an update 
 * 					will only be done when the value of a binding changed.   
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.updateBindings = function(bForceUpdate) {  };


// ---- sap.ui.model.CompositeBinding --------------------------------------------------------------------------

/**
 * Constructor for CompositeBinding
 * @class
 * The CompositeBinding is used to bundle multiple property bindings which are be used to provide a single binding against
 * these property bindings. Note: Only One Way binding is supported. So setValue and setExternalValue throw exceptions.
 * @public
 * 
 */
sap.ui.model.CompositeBinding = function() {};
/**
 * Attach event-handler <code>fnFunction</code> to the '_change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.attachChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the '_change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.detachChange = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.CompositeBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the property bindings contained in this composite binding.
 * @return {array} the property bindings in this composite binding
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.getBindings = function() { return null; };

/**
 * Returns the current external value of the bound target which is formatted via a type or formatter function. 
 * @return {object} the current value of the bound target
 * @throws sap.ui.model.FormatException
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.getExternalValue = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.model.CompositeBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the raw values of the property bindings in an array.
 * @return {object} the values of the internal property bindings in an array
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.getValue = function() { return new Object(); };

/**
 * Not supported for CompositeBinding as a composite binding contains an array of property bindings. 
 * An exception will be thrown. 
 * @param {object} oValue the value to set for this binding
 * @throws sap.ui.base.Exception
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.setExternalValue = function(oValue) {  };

/**
 * Not supported for CompositeBinding as a composite binding contains an array of property bindings. 
 * An exception will be thrown. 
 * @param {object} oValue the value to set for this binding
 * @throws sap.ui.base.Exception
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.setValue = function(oValue) {  };

/**
 * Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.
 * @param {object} oModel The model instance to compare against
 * @returns {boolean} true if this binding should be updated
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.updateRequired = function(oModel) { return false; };


// ---- sap.ui.model.Context --------------------------------------------------------------------------

/**
 * Constructor for Context class.
 * @class
 * The Context is a pointer to an object in the model data, which is used to 
 * allow definition of relative bindings, which are resolved relative to the
 * defined object.
 * Context elements are created either by the ListBinding for each list entry
 * or by using createBindingContext.
 * @param {sap.ui.model.Model} oModel the model
 * @param {String} sPath the path
 * @param {Object} oContext the context object
 * @abstract
 * @public
 * 
 */
sap.ui.model.Context = function(oModel,sPath,oContext) {};
/**
 * Creates a new subclass of class sap.ui.model.Context with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Context.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Context.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.Context.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for model
 * @public
 * @return {sap.ui.core.Model} the model
 * 
 */
sap.ui.model.Context.prototype.getModel = function() { return new sap.ui.core.Model(); };

/**
 * Gets the (model dependent) object the context points to or the object with the given relative binding path
 * @public
 * @param {String} sPath the binding path
 * @return {object} the context object
 * 
 */
sap.ui.model.Context.prototype.getObject = function(sPath) { return new Object(); };

/**
 * Getter for path of the context itself or a subpath
 * @public
 * @param {String} sPath the binding path
 * @return {String} the binding path
 * 
 */
sap.ui.model.Context.prototype.getPath = function(sPath) { return null; };

/**
 * Gets the property with the given relative binding path
 * @public
 * @param {String} sPath the binding path
 * @return {any} the property value
 * 
 */
sap.ui.model.Context.prototype.getProperty = function(sPath) { return null; };


// ---- sap.ui.model.ContextBinding --------------------------------------------------------------------------

/**
 * Constructor for ContextBinding
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @param {Object} [oEvents] object defining event handlers
 * @abstract
 * @public
 * 
 */
sap.ui.model.ContextBinding = function(oModel,sPath,oContext,mParameters,oEvents) {};
/**
 * Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.ContextBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.ContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.control --------------------------------------------------------------------------


// ---- sap.ui.model.Filter --------------------------------------------------------------------------

/**
 * Constructor for Filter
 * You can either pass an object with the filter parameters or use the function arguments
 * 
 * Using object:
 * new sap.ui.model.Filter({
 *   path: "...",
 *   operator: "...",
 *   value1: "...",
 *   value2: "..."
 * })
 * 
 * OR:
 * new sap.ui.model.Filter({
 *   path: "...",
 *   test: function(oValue) {
 *   }
 * })
 * 
 * OR:
 * new sap.ui.model.Filter({
 *   filters: [...],
 *   and: true|false
 * })
 * 
 * You can only pass sPath, sOperator and their values OR sPath, fnTest OR aFilters and bAnd. You will get an error if you define an invalid combination of filters parameters.
 * 
 * Using arguments:
 * new sap.ui.model.Filter(sPath, sOperator, oValue1, oValue2);
 * OR
 * new sap.uji.model.Filter(sPath, fnTest);
 * OR
 * new sap.ui.model.Filter(aFilters, bAnd);
 * 
 * aFilters is an array of other instances of sap.ui.model.Filter. If bAnd is set all filters within the filter will be ANDed else they will be ORed.
 * @class
 * Filter for the list binding
 * @param {object} oFilterInfo the filter info object
 * @param {string} oFilterInfo.path the binding path for this filter
 * @param {function} oFilterInfo.test function which is used to filter the items which should return a boolean value to indicate whether the current item is preserved
 * @param {sap.ui.model.FilterOperator} oFilterInfo.operator operator used for the filter
 * @param {object} oFilterInfo.value1 first value to use for filter
 * @param {object} [oFilterInfo.value2=null] fecond value to use for filter
 * @param {array} oFilterInfo.filters array of filters on which logical conjunction is applied
 * @param {boolean} oFilterInfo.and indicates whether an "and" logical conjunction is applied on the filters. If it's set to false, an "or" conjunction is applied
 * @public
 * 
 */
sap.ui.model.Filter = function(oFilterInfo) {};
/**
 * Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Filter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Filter.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.Filter.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.FilterOperator --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.FilterOperator.toString = function() { return ""; };

// ---- sap.ui.model.FilterType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.FilterType.toString = function() { return ""; };

// ---- sap.ui.model.json --------------------------------------------------------------------------


// ---- sap.ui.model.json.JSONModel --------------------------------------------------------------------------

/**
 * Constructor for a new JSONModel.
 * @class
 * Model implementation for JSON format
 * @extends sap.ui.model.ClientModel
 * @version 1.26.9
 * @param {object} oData either the URL where to load the JSON from or a JS object
 * @constructor
 * @public
 * 
 */
sap.ui.model.json.JSONModel = function(oData) {};
/**
 * Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.json.JSONModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Serializes the current JSON data of the model into a string.
 * Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)
 * @return the JSON data serialized as string
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.getJSON = function() {  };

/**
 * Returns a metadata object for class sap.ui.model.json.JSONModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.json.JSONModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * @param {string} sPath the path to the property
 * @param {object} [oContext=null] the context which will be used to retrieve the property
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.getProperty = function(sPath,oContext) { return null; };

/**
 * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string} [oParameters] A map or string that is sent to the server with the request.
 * Data that is sent to the server is appended to the URL as a query string.
 * If the value of the data parameter is an object (map), it is converted to a string and
 * url-encoded before it is appended to the URL.
 * @param {boolean} [bAsync=true] By default, all requests are sent asynchronous
 * (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
 * Cross-domain requests do not support synchronous operation. Note that synchronous requests may
 * temporarily lock the browser, disabling any actions while the request is active.
 * @param {string} [sType=GET] The type of request to make ("POST" or "GET"), default is "GET".
 * Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but
 * they are not supported by all browsers.
 * @param {boolean} [bMerge=false] whether the data should be merged instead of replaced
 * @param {string} [bCache=false] force no caching if false. Default is false
 * @param {object} [mHeaders] An object of additional header key/value pairs to send along with the request
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.loadData = function(sURL,oParameters,bAsync,sType,bMerge,bCache,mHeaders) {  };

/**
 * Sets the JSON encoded data to the model.
 * @param {object} oData the data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.setData = function(oData,bMerge) {  };

/**
 * Sets the JSON encoded string data to the model.
 * @param {string} sJSONText the string data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.setJSON = function(sJSONText,bMerge) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.setProperty = function(sPath,oValue,oContext) {  };


// ---- sap.ui.model.ListBinding --------------------------------------------------------------------------

/**
 * Constructor for ListBinding
 * @class
 * The ListBinding is a specific binding for lists in the model, which can be used
 * to populate Tables or ItemLists.
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)
 * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters]
 * @public
 * 
 */
sap.ui.model.ListBinding = function(oModel,sPath,oContext,aSorters,aFilters,mParameters) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 * 
 */
sap.ui.model.ListBinding.prototype.attachFilter = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "sort") when a sorter event is fired.
 * 
 */
sap.ui.model.ListBinding.prototype.attachSort = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 * 
 */
sap.ui.model.ListBinding.prototype.detachFilter = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 * 
 */
sap.ui.model.ListBinding.prototype.detachSort = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ListBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the list according to the filter definitions
 * @param {object[]} aFilters Array of filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.filter = function(aFilters,sFilterType) { return new sap.ui.model.ListBinding(); };

/**
 * Returns the current value of the bound target
 * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.getContexts = function() { return new Array(); };

/**
 * Returns list of distinct values for the given relative binding path
 * @param {string} sPath the relative binding path
 * @return {Array} the array of distinct values.
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.getDistinctValues = function(sPath) { return null; };

/**
 * Returns the number of entries in the list. This might be an estimated or preliminary length, in case
 * the full length is not known yet, see method isLengthFinal().
 * @return {int} returns the number of entries in the list
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.getLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.model.ListBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.ListBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks if grouping is enabled for the binding<br/>
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.isGrouped = function() {  };

/**
 * Returns whether the length which can be retrieved using getLength() is a known, final length,
 * or an preliminary or estimated length which may change if further data is requested.  
 * @return {boolean} returns whether the length is final
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.isLengthFinal = function() { return false; };

/**
 * Sorts the list according to the sorter object
 * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.sort = function(aSorters) { return new sap.ui.model.ListBinding(); };


// ---- sap.ui.model.Model --------------------------------------------------------------------------

/**
 * Constructor for a new Model.
 * @class
 * This is an abstract base class for model objects.
 * @abstract
 * @extends sap.ui.base.EventProvider
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.model.Model = function() {};
/**
 * The 'parseError' event is fired when parsing of a model document (e.g. XML response) fails.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.errorCode
 * @param {string} oControlEvent.getParameters.url
 * @param {string} oControlEvent.getParameters.reason
 * @param {string} oControlEvent.getParameters.srcText
 * @param {int} oControlEvent.getParameters.line
 * @param {int} oControlEvent.getParameters.linepos
 * @param {int} oControlEvent.getParameters.filepos
 * @public
 * 
 */
sap.ui.model.Model.prototype.parseError = function(oControlEvent) {  };

/**
 * The 'requestCompleted' event is fired, after a request has been completed (includes receiving a response), 
 * no matter whether the request succeeded or not.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.ID The request ID
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} oControlEvent.getParameters.method The HTTP method
 * @param {map} oControlEvent.getParameters.headers The request headers
 * @param {boolean} oControlEvent.getParameters.success Request was successful or not
 * @param {boolean} oControlEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {object} oControlEvent.getParameters.response The response object - empty object if no response:
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @public
 * 
 */
sap.ui.model.Model.prototype.requestCompleted = function(oControlEvent) {  };

/**
 * The 'requestFailed' event is fired, when data retrieval from a backend failed.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.ID The request ID
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} oControlEvent.getParameters.method The HTTP method
 * @param {map} oControlEvent.getParameters.headers The request headers
 * @param {boolean} oControlEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {boolean} oControlEvent.getParameters.success Request was successful or not
 * @param {object} oControlEvent.getParameters.response The response object - empty object if no response
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @public
 * 
 */
sap.ui.model.Model.prototype.requestFailed = function(oControlEvent) {  };

/**
 * The 'requestSent' event is fired, after a request has been sent to a backend.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.ID The request ID
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} oControlEvent.getParameters.method The HTTP method
 * @param {map} oControlEvent.getParameters.headers The request headers
 * @param {boolean} oControlEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @public
 * 
 */
sap.ui.model.Model.prototype.requestSent = function(oControlEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachParseError = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachRequestCompleted = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachRequestFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachRequestSent = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Returns id the provided path is a list (aggregation) or an entity
 * @abstract
 * @param {string} sPath the path pointing to the property that should be bound
 * @param {object} [oContext=null] the context object for this databinding (optional)
 * @return {boolean} 
 * @since 1.17.1 
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindContext = function(sPath,oContext) { return false; };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path pointing to the list / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {sap.ui.model.Sorter}
 *         [aSorters=null] initial sort order (can be either a sorter or an array of sorters) (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s (can be either a filter or an array of filters) (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.ListBinding}
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindList = function(sPath,oContext,aSorters,aFilters,mParameters) { return new sap.ui.model.ListBinding(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path pointing to the property that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.PropertyBinding}
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindProperty = function(sPath,oContext,mParameters) { return new sap.ui.model.PropertyBinding(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.TreeBinding}
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindTree = function(sPath,oContext,aFilters,mParameters) { return new sap.ui.model.TreeBinding(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path to create the new context from
 * @param {object}
 * 		   [oContext=null] the context which should be used to create the new binding context
 * @param {object}
 * 		   [mParameters=null] the parameters used to create the new binding context
 * @param {function}
 *         fnCallBack the function which should be called after the binding context has been created
 * @param {boolean}
 *         [bReload] force reload even if data is already available. For server side models this should 
 *                   refetch the data from the server 
 * @public
 * 
 */
sap.ui.model.Model.prototype.createBindingContext = function(sPath,oContext,mParameters,fnCallBack,bReload) {  };

/**
 * Destroys the model and clears the model data. 
 * A model implementation may override this function and perform model specific cleanup tasks e.g. 
 * abort requests, prevent new requests, etc.
 * @see sap.ui.base.Object.prototype.destroy
 * @public
 * 
 */
sap.ui.model.Model.prototype.destroy = function() {  };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {object}
 *         oContext to destroy
 * @public
 * 
 */
sap.ui.model.Model.prototype.destroyBindingContext = function(oContext) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachParseError = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachRequestCompleted = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachRequestFailed = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachRequestSent = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Creates a new subclass of class sap.ui.model.Model with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Model.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event parseError to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {int} [mArguments.errorCode]
 * @param {string} [mArguments.url]
 * @param {string} [mArguments.reason]
 * @param {string} [mArguments.srcText]
 * @param {int} [mArguments.line]
 * @param {int} [mArguments.linepos]
 * @param {int} [mArguments.filepos]
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireParseError = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event requestCompleted to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which was sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request was synchronous or asynchronous (if available)
 * @param {string} [mArguments.info] additional information for the request (if available) <strong>deprecated</strong>
 * @param {object} [mArguments.infoObject] Additional information for the request (if available)
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireRequestCompleted = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event requestFailed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireRequestFailed = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event requestSent to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which is sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [mArguments.info] additional information for the request (if available) <strong>deprecated</strong>
 * @param {object} [mArguments.infoObject] Additional information for the request (if available)
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireRequestSent = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Get the default binding mode for the model
 * @return {sap.ui.model.BindingMode} default binding mode of the model
 * @public
 * 
 */
sap.ui.model.Model.prototype.getDefaultBindingMode = function() { return new sap.ui.model.BindingMode(); };

/**
 * Returns a metadata object for class sap.ui.model.Model.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.Model.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path to where to read the object
 * @param {object}
 * 		   [oContext=null] the context with which the path should be resolved
 * @public
 * 
 */
sap.ui.model.Model.prototype.getObject = function(sPath,oContext) {  };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path to where to read the attribute value
 * @param {object}
 * 		   [oContext=null] the context with which the path should be resolved
 * @public
 * 
 */
sap.ui.model.Model.prototype.getProperty = function(sPath,oContext) {  };

/**
 * Check if the specified binding mode is supported by the model.
 * @param {sap.ui.model.BindingMode} sMode the binding mode to check
 * @public
 * 
 */
sap.ui.model.Model.prototype.isBindingModeSupported = function(sMode) {  };

/**
 * Returns whether legacy path syntax is used
 * @return {boolean} 
 * @public
 * 
 */
sap.ui.model.Model.prototype.isLegacySyntax = function() { return false; };

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed. 
 * @param {boolean} bForceUpdate Update controls even if data has not been changed
 * @public
 * 
 */
sap.ui.model.Model.prototype.refresh = function(bForceUpdate) {  };

/**
 * Set the default binding mode for the model. If the default binding mode should be changed,
 * this method should be called directly after model instance creation and before any binding creation.
 * Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.
 * @param {sap.ui.model.BindingMode} sMode the default binding mode to set for the model
 * @public
 * 
 */
sap.ui.model.Model.prototype.setDefaultBindingMode = function(sMode) {  };

/**
 * Enables legacy path syntax handling
 * 
 * This defines, whether relative bindings, which do not have a defined
 * binding context, should be compatible to earlier releases which means
 * they are resolved relative to the root element or handled strict and
 * stay unresolved until a binding context is set
 * @param {boolean} bLegacySyntax the path syntax to use
 * @public
 * 
 */
sap.ui.model.Model.prototype.setLegacySyntax = function(bLegacySyntax) {  };

/**
 * Set the maximum number of entries which are used for for list bindings.
 * @param {int} iSizeLimit collection size limit  
 * @public
 * 
 */
sap.ui.model.Model.prototype.setSizeLimit = function(iSizeLimit) {  };


// ---- sap.ui.model.odata --------------------------------------------------------------------------


// ---- sap.ui.model.odata.CountMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.odata.CountMode.toString = function() { return ""; };

// ---- sap.ui.model.odata.Filter --------------------------------------------------------------------------

/**
 * Constructor for Filter
 * @class
 * Filter for the list binding
 * @param {string} sPath the binding path for this filter
 * @param {object[]} aValues Array of FilterOperators and their values: [{operator:"GE",value1:"val1"},{operator:"LE",value1:"val1"},{operator:"BT",value1:"val1",value2:"val2"}]
 * @param {boolean} [bAND=true] If true the values from aValues will be ANDed; otherwise ORed
 * @public
 * @deprecated Since 1.22. Please use the sap.ui.model.Filter instead (@link: sap.ui.model.Filter).
 * 
 */
sap.ui.model.odata.Filter = function(sPath,aValues,bAND) {};
/**
 * Converts the <code>sap.ui.model.odata.Filter</code> into a 
 * <code>sap.ui.model.Filter</code>. 
 * @return {sap.ui.model.Filter} a <code>sap.ui.model.Filter</code> object
 * @public
 * 
 */
sap.ui.model.odata.Filter.prototype.convert = function() { return new sap.ui.model.Filter(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.Filter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.Filter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.Filter.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.Filter.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.odata.ODataAnnotations --------------------------------------------------------------------------

/**
 * !!! EXPERIMENTAL !!!
 * @param {string|string[]} aAnnotationURI The annotation-URL or an array of URLS that should be parsed and merged
 * @param {sap.ui.model.odata.ODataMetadata} oMetadata
 * @param {object} mParams
 * @class Implementation to access oData Annotations
 * @version
 * 1.26.9
 * @constructor
 * @public
 * @extends sap.ui.base.Object
 * @experimental This feature has not been tested due to the lack of OData testing infrastructure. The API is NOT stable yet. Use at your own risk.
 * 
 */
sap.ui.model.odata.ODataAnnotations = function(aAnnotationURI,oMetadata,mParams) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.attachFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.attachLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.detachFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.detachLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataAnnotations.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event failed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.fireFailed = function(mArguments) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Fire event loaded to attached listeners.
 * @param {map} [mArguments] Map of arguments that will be given as parameters to teh event handler
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.fireLoaded = function(mArguments) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * returns the raw annotation data
 * @public
 * @returns {object} returns annotations data 
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.getAnnotationsData = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataAnnotations.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataAnnotations.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Fire event loaded to attached listeners.
 * @public
 * @returns {boolean} whether annotations request has failed
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.isFailed = function() { return false; };

/**
 * Checks whether annotations is available
 * @public
 * @returns {boolean} returns whether annotations is already loaded
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.isLoaded = function() { return false; };

/**
 * Sets an XML document
 * @param {object} oXMLDocument The XML document to parse for annotations
 * @param {string} sXMLContent The XML content as string to parse for annotations
 * @param {map} mOptions Additional options
 * @param {fuction} mOptions.success Success callback gets an objec as argument with the 
 *                  properties "annotations" containing the parsed annotations and "xmlDoc"
 *                  containing the XML-Document that was returned by the request.
 * @param {fuction} mOptions.error Error callback gets an objec as argument with the 
 *                  property "xmlDoc" containing the XML-Document that was returned by the 
 *                  request and could not be correctly parsed.
 * @returns {bool} Whether or not parsing was successful
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.setXML = function(oXMLDocument,sXMLContent,mOptions) { return null; };


// ---- sap.ui.model.odata.ODataContextBinding --------------------------------------------------------------------------

/**
 * Constructor for odata.ODataContextBinding
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * 
 */
sap.ui.model.odata.ODataContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataContextBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.odata.ODataMetadata --------------------------------------------------------------------------

/**
 * Constructor for a new ODataMetadata.
 * @param {string} sMetadataURI needs the correct metadata uri including $metadata
 * @param {object} [mParams] optional map of parameters.
 * @param {boolean} [mParams.async=true] request is per default async
 * @param {string} [mParams.user] user for the service,
 * @param {string} [mParams.password] password for service
 * @param {object} [mParams.headers] (optional) map of custom headers which should be set with the request.
 * @class
 * Implementation to access oData metadata
 * @version 1.26.9
 * @constructor
 * @public
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.model.odata.ODataMetadata = function(sMetadataURI,mParams) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.attachFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.attachLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.detachFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.detachLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMetadata.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event failed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.fireFailed = function(mArguments) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Fire event loaded to attached listeners.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.fireLoaded = function() { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataMetadata.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMetadata.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Return the metadata object
 * @return {Object} metdata object
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.getServiceMetadata = function() { return null; };

/**
 * Get the the use-batch extension value if any
 * @return {boolean} true/false
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.getUseBatch = function() { return false; };

/**
 * Checks whether metadata loading has already failed 
 * @public
 * @returns {boolean} returns whether metadata request has failed
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.isFailed = function() { return false; };

/**
 * Checks whether metadata is available
 * @public
 * @returns {boolean} returns whether metadata is already loaded
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.isLoaded = function() { return false; };

/**
 * refreshes the metadata creating a new request to the server  
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.refresh = function() {  };


// ---- sap.ui.model.odata.ODataModel --------------------------------------------------------------------------

/**
 * Constructor for a new ODataModel.
 * @param {string} sServiceUrl required - base uri of the service to request data from; additional URL parameters appended here will be appended to every request
 * @param {string | object} [bJSON] (optional) true to request data as JSON or an object which contains the following parameter properties:
 * 							json, user, password, headers, tokenHandling, withCredentials, loadMetadataAsync, maxDataServiceVersion (default = '2.0';
 * please use the following string format e.g. '2.0' or '3.0'. OData version supported by the ODataModel: '2.0'. '3.0' may work but is currently experimental.),
 * useBatch (all requests will be sent in batch requests default = false),
 * refreshAfterChange (enable/disable automatic refresh after change operations: default = true),
 * serviceUrlParams (URL parameters for all requests),
 * metadataUrlParams (additional URL parameters for Metadata requests).
 * See below for descriptions of these parameters.
 * @param {string} [sUser] (optional) user
 * @param {string} [sPassword] (optional) password
 * @param {object} [mHeaders] (optional) map of custom headers which should be set in each request.
 * @param {boolean} [bTokenHandling] (optional) enable/disable XCSRF-Token handling
 * @param {boolean} [bWithCredentials] (optional, experimental) true when user credentials are to be included in a cross-origin request. Please note that this works only if all requests are asynchronous.
 * @param {object} [bLoadMetadataAsync] (optional) determined if the service metadata request is sent synchronous or asynchronous. Default is false.
 * Please note that if this is set to true attach to the metadataLoaded event to get notified when the metadata has been loaded before accessing the service metadata.
 * @param {string|string[]} [annotationURI] (optional) The URL (or an array of URLs) from which the annotation metadata should be loaded
 * @param {boolean} [loadAnnotationsJoined] (optional) Whether or not to fire the metadataLoaded-event only after annotations have been loaded as well.
 * @class
 * Model implementation for oData format
 * Binding to V4 metadata annotations is experimental!
 * @extends sap.ui.model.Model
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.model.odata.ODataModel = function(sServiceUrl,bJSON,sUser,sPassword,mHeaders,bTokenHandling,bWithCredentials,bLoadMetadataAsync,annotationURI,loadAnnotationsJoined) {};
/**
 * Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array.
 * The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again.
 * If an illegal batch operation is added to the change set nothing will be performed and false will be returned.
 * @param {any[]} aChangeOperations an array of change batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = POST, PUT, MERGE or DELETE
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.addBatchChangeOperations = function(aChangeOperations) {  };

/**
 * Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array.
 * If an illegal batch operation is added to the batch nothing will be performed and false will be returned.
 * @param {any[]} aReadOperations an array of read batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = GET
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.addBatchReadOperations = function(aReadOperations) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachAnnotationsFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * @experimental The API is NOT stable yet. Use at your own risk.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachAnnotationsLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachMetadataFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachMetadataLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Trigger a request to the function import odata service that was specified in the model constructor.
 * @param {string} sFunctionName A string containing the name of the function to call.
 * 		The name is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {string} [mParameters.method] A string containing the type of method to call this function with
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has been successfully retrieved.
 * 		The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.async=false] Whether or not to send the request asynchronously. Default: false
 * 		In case sMethod is "GET", the request is always asynchronous.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.callFunction = function(sFunctionName,mParameters) { return new Object(); };

/**
 * Removes all operations in the current batch.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.clearBatch = function() {  };

/**
 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
 * and may not work.
 * @param {string} sPath A string containing the path to the collection where an entry
 * 		should be created. The path is concatenated to the sServiceUrl
 * 		which was specified in the model constructor.
 * @param {object} oData data of the entry that should be created.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: oData and response.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.async=false] Whether the request should be done asynchronously. Default: false
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.create = function(sPath,oData,mParameters) { return new Object(); };

/**
 * Creates a single batch operation (read or change operation) which can be used in a batch request.
 * @param {string} sPath A string containing the path to the collection or entry where the batch operation should be performed.
 * 						The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {string} sMethod for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE
 * @param {object} [oData] optional data payload which should be created, updated, deleted in a change batch operation.
 * @param {object} [oParameters] optional parameter for additional information introduced in SAPUI5 1.9.1,
 * @param {string} [oParameters.sETag] an ETag which can be used for concurrency control. If it is specified,
 *                  it will be used in an If-Match-Header in the request to the server for this entry.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.createBatchOperation = function(sPath,sMethod,oData,oParameters) {  };

/**
 * Creates a new entry object which is described by the metadata of the entity type of the
 * specified sPath Name. A context object is returned which can be used to bind
 * against the newly created object.
 * 
 * For each created entry a request is created and stored in a request queue.
 * The request queue can be submitted by calling submitChanges. To delete a created
 * entry from the request queue call deleteCreateEntry.
 * 
 * The optional vProperties parameter can be used as follows:
 * 
 * - vProperties could be an array containing the property names which should be included
 *     in the new entry. Other properties defined in the entity type are not included.
 *   - vProperties could be an object which includes the desired properties and the values
 *     which should be used for the created entry.
 * 
 * If vProperties is not specified, all properties in the entity type will be included in the
 * created entry.
 * 
 * If there are no values specified the properties will have undefined values.
 * 
 * Please note that deep creates (including data defined by navigationproperties) are not supported
 * @param {String} sPath Name of the path to the collection
 * @param {array|object} vProperties An array that specifies a set of properties or the entry
 * @return {sap.ui.model.Context} oContext A Context object that point to the new created entry.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.createEntry = function(sPath,vProperties) { return new sap.ui.model.Context(); };

/**
 * Creates the key from the given collection name and property map
 * @param {string} sCollection The name of the collection
 * @param {object} oKeyParameters The object containing at least all the key properties of the entity type
 * @param {boolean} bDecode Whether the URI decoding should be applied on the key
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.createKey = function(sCollection,oKeyParameters,bDecode) {  };

/**
 * Deletes a created entry from the request queue and the model.
 * @param {sap.ui.model.Context} oContext The context object pointing to the created entry
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.deleteCreatedEntry = function(oContext) {  };

/**
 * @see sap.ui.model.Model.prototype.destroy
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.destroy = function() {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachAnnotationsFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * @experimental The API is NOT stable yet. Use at your own risk.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachAnnotationsLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachMetadataFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachMetadataLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event annotationsFailed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireAnnotationsFailed = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Fire event annotationsLoaded to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataAnnotations} [mArguments.annotations]  the annotations object.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireAnnotationsLoaded = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Fire event metadataFailed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireMetadataFailed = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Fire event metadataLoaded to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataMetadata} [mArguments.metadata]  the metadata object.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireMetadataLoaded = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Force no caching
 * @param {boolean} [bForceNoCache=false] whether to force no caching
 * @public
 * @deprecated The caching should be controlled by the backend by setting the correct cache control header
 * 
 */
sap.ui.model.odata.ODataModel.prototype.forceNoCache = function(bForceNoCache) {  };

/**
 * Return requested data as object if the data has already been loaded and stored in the model.
 * @param {string} sPath A string containing the path to the data object that should be returned.
 * @param {object} [oContext] the optional context which is used with the sPath to retrieve the requested data.
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * @return {object} oData Object containing the requested data if the path is valid.
 * @public
 * @deprecated please use {@link #getProperty} instead
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getData = function(sPath,oContext,bIncludeExpandEntries) { return new Object(); };

/**
 * Returns the default count mode for retrieving the count of collections
 * @returns {sap.ui.model.odata.CountMode}
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getDefaultCountMode = function() { return new sap.ui.model.odata.CountMode(); };

/**
 * Returns all headers and custom headers which are stored in the OData model.
 * @return {object} the header map
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getHeaders = function() { return new Object(); };

/**
 * Returns the key part from the entry URI or the given context or object
 * @param {object|sap.ui.model.Context} oObject The context or object
 * @param {boolean} bDecode Whether the URI decoding should be applied on the key
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getKey = function(oObject,bDecode) {  };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPath</code>
 * @param {string} sPath the path/name of the property
 * @param {object} [oContext] the context if available to access the property value
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getProperty = function(sPath,oContext,bIncludeExpandEntries) { return null; };

/**
 * Returns the current security token. If the token has not been requested from the server it will be requested first.
 * @returns {string} the CSRF security token
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getSecurityToken = function() { return ""; };

/**
 * Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
 * @return {Object} metdata object
 * @public
 * @experimental This feature has not been tested due to the lack of OData testing infrastructure. The API is NOT stable yet. Use at your own risk.
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getServiceAnnotations = function() { return null; };

/**
 * Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
 * @return {Object} metdata object
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getServiceMetadata = function() { return null; };

/**
 * Checks if there exist pending changes in the model created by the setProperty method.
 * @return {boolean} true/false
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.hasPendingChanges = function() { return false; };

/**
 * Returns whether this model supports the $count on its collections
 * This method is deprecated, please use getDefaultCountMode instead.
 * @returns {boolean}
 * @deprecated
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.isCountSupported = function() { return false; };

/**
 * Trigger a GET request to the odata service that was specified in the model constructor.
 * The data will not be stored in the model. The requested data is returned with the response.
 * @param {string} sPath A string containing the path to the data which should
 * 		be retrieved. The path is concatenated to the sServiceUrl
 * 		which was specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path
 * 		given with the context.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {boolean} [mParameters.async=true] true for asynchronous requests.
 * @param {array} [mParameter.filters] an array of sap.ui.model.Filter to be included in the request URL
 * @param {array} [mParameter.sorters] an array of sap.ui.model.Sorter to be included in the request URL
 * @param {function} [mParameters.success] a callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: oData and response.
 * @param {function} [mParameters.error] a callback function which is called when the request
 * 		failed. The handler can have the parameter: oError which contains
 * additional error information.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.read = function(sPath,mParameters) { return new Object(); };

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed.
 * @param {boolean} [bForceUpdate=false] Force update of controls
 * @param {boolean} [bRemoveData=false] If set to true then the model data will be removed/cleared.
 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.refresh = function(bForceUpdate,bRemoveData) {  };

/**
 * refreshes the metadata for model, e.g. in case the first request for metadata has failed 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.refreshMetadata = function() {  };

/**
 * refresh XSRF token by performing a GET request against the service root URL.
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully retrieved.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 *  additional error information.
 * @param {boolean} [bAsync=false] true for asynchronous requests.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.refreshSecurityToken = function(fnSuccess,fnError,bAsync) { return new Object(); };

/**
 * Trigger a DELETE request to the odata service that was specified in the model constructor.
 * @param {string} sPath A string containing the path to the data that should be removed.
 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {object} [mParameters] Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success]  a callback function which is called when the data has been successfully retrieved.
 * 		The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.eTag] If specified, the If-Match-Header will be set to this Etag.
 * @param {object} [mParameters.payload] if specified, this optional variable can be used to pass a payload into the delete function,
 * 		e.g. if the entry which should be deleted has not been bound to any control, but has been retrieved via read, only.
 * @param {boolean} [mParameters.async=false] Whether the request should be done asynchronously.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.remove = function(sPath,mParameters) { return new Object(); };

/**
 * 
 * Resets the collected changes by the setProperty method and reloads the data from the server.
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully resetted. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.resetChanges = function(fnSuccess,fnError) {  };

/**
 * Sets whether this OData service supports $count on its collections.
 * This method is deprecated, please use setDefaultCountMode instead.
 * @param {boolean} bCountSupported
 * @deprecated
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setCountSupported = function(bCountSupported) {  };

/**
 * Sets the default way to retrieve the count of collections in this model.
 * Count can be determined either by sending a separate $count request, including
 * $inlinecount=allpages in data requests, both of them or not at all.
 * @param {sap.ui.model.odata.CountMode} sCountMode
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setDefaultCountMode = function(sCountMode) {  };

/**
 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
 * Private headers which are set in the ODataModel cannot be modified.
 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
 * 
 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
 * are removed unless they are specified again in the mCustomHeaders parameter.
 * @param {object} mHeaders the header name/value map.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setHeaders = function(mHeaders) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model without triggering a server request.
 *  This can be done by the submitChanges method.
 * 
 * Note: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.
 * 
 * Before updating a different entry the existing changes of the current entry have to be submitted or resetted by the
 *  corresponding methods: submitChanges, resetChanges.
 * 
 * IMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of refresh
 *  on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @return {boolean} true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setProperty = function(sPath,oValue,oContext) { return false; };

/**
 * Enable/Disable automatic updates of all Bindings after change operations
 * @param {boolean} bRefreshAfterChange
 * @public
 * @since 1.16.3
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setRefreshAfterChange = function(bRefreshAfterChange) {  };

/**
 * Enable/Disable XCSRF-Token handling
 * @param {boolean} [bTokenHandling=true] whether to use token handling or not
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setTokenHandlingEnabled = function(bTokenHandling) {  };

/**
 * Enable/Disable batch for all requests
 * @param {boolean} [bUseBatch=false] whether the requests should be encapsulated in a batch request
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setUseBatch = function(bUseBatch) {  };

/**
 * Submits the collected changes in the batch which were collected via <code>addBatchReadOperations</code> or <code>addBatchChangeOperations</code>.
 * The batch will be cleared afterwards. If the batch is empty no request will be performed and false will be returned.
 * Note: No data will be stored in the model.
 * @param {function} [fnSuccess] a callback function which is called when the batch request has
 *            					 been successfully sent. Note: There might have errors occured in the single batch operations. These errors can be accessed in the
 *            aErrorResponses parameter in the callback handler.
 *            The handler can have the
 *            	                 following parameters: oData, oResponse and aErrorResponses.
 * @param {function} [fnError] a callback function which is called when the batch request failed. The handler can have the parameter: oError which contains
 * additional error information.
 * @param {boolean} [bAsync] true for asynchronous request. Default is true.
 * @param {boolean} bImportData
 * @return {object} an object which has an <code>abort</code> function to abort the current request. Returns false if no request will be performed because the batch is empty.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.submitBatch = function(fnSuccess,fnError,bAsync,bImportData) { return new Object(); };

/**
 * Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties.
 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully updated. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 * additional error information
 * @param {object} [oParameters] optional parameter for additional information introduced in SAPUI5 1.9.1
 * @param {string} [oParameters.sETag] an ETag which can be used for concurrency control. If it is specified, it will be used in an If-Match-Header in the request to the server for this entry.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.submitChanges = function(fnSuccess,fnError,oParameters) { return new Object(); };

/**
 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported
 * and may not work. These should be done seperate on the entry directly.
 * @param {string} sPath A string containing the path to the data that should be updated.
 * 		The path is concatenated to the sServiceUrl which was specified
 * 		in the model constructor.
 * @param {object} oData data of the entry that should be updated.
 * @param {map} [mParameters] Optional, can contain the following attributes:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has been successfully updated.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.merge=false] trigger a MERGE request instead of a PUT request to perform a differential update
 * @param {string} [mParameters.eTag] If specified, the If-Match-Header will be set to this Etag.
 * @param {boolean} [mParameters.async=false] Whether the request should be done asynchronously.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.update = function(sPath,oData,mParameters) { return new Object(); };

/**
 * update all bindings
 * @param {boolean} [bForceUpdate=false] If set to false an update  will only be done when the value of a binding changed.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.updateBindings = function(bForceUpdate) {  };


// ---- sap.ui.model.odata.v2 --------------------------------------------------------------------------


// ---- sap.ui.model.odata.v2.ODataContextBinding --------------------------------------------------------------------------

/**
 * Constructor for odata.ODataContextBinding
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataContextBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.odata.v2.ODataModel --------------------------------------------------------------------------

/**
 * Constructor for a new ODataModel.
 * @param {string} [sServiceUrl] base uri of the service to request data from; additional URL parameters appended here will be appended to every request
 * 								can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!
 * @param {object} [mParameters] (optional) a map which contains the following parameter properties:
 * @param {boolean} [mParameters.json] if set true request payloads will be JSON, XML for false (default = true),
 * @param {string} [mParameters.user] user for the service,
 * @param {string} [mParameters.password] password for service,
 * @param {map} [mParameters.headers] a map of custom headers like {"myHeader":"myHeaderValue",...},
 * @param {boolean} [mParameters.tokenHandling] enable/disable XCSRF-Token handling (default = true),
 * @param {boolean} [mParameters.withCredentials] experimental - true when user credentials are to be included in a cross-origin request. Please note that this works only if all requests are asynchronous.
 * @param [mParameters.maxDataServiceVersion] (default = '2.0') please use the following string format e.g. '2.0' or '3.0'.
 * 									OData version supported by the ODataModel: '2.0',
 * @param {boolean} [mParameters.useBatch] when true all requests will be sent in batch requests (default = true),
 * @param {boolean} [mParameters.refreshAfterChange] enable/disable automatic refresh after change operations: default = true,
 * @param  {string|string[]} [mParameters.annotationURI] The URL (or an array of URLs) from which the annotation metadata should be loaded,
 * @param {boolean} [mParameters.loadAnnotationsJoined] Whether or not to fire the metadataLoaded-event only after annotations have been loaded as well,
 * @param {map} [mParameters.serviceUrlParams] map of URL parameters - these parameters will be attached to all requests,
 * @param {map} [mParameters.metadataUrlParams] map of URL parameters for metadata requests - only attached to $metadata request.
 * @class
 * Model implementation for oData format
 * @extends sap.ui.model.Model
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel = function(sServiceUrl,mParameters) {};
/**
 * The 'batchRequestCompleted' event is fired, after a request has been completed (includes receiving a response),
 * no matter whether the request succeeded or not.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.ID The request ID
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} oControlEvent.getParameters.method The HTTP method
 * @param {map} oControlEvent.getParameters.headers The request headers
 * @param {boolean} oControlEvent.getParameters.success Request was successful or not
 * @param {boolean} oControlEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {array} oControlEvent.getParameters.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @param {object} oControlEvent.getParameters.response The response object - empty object if no response:
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.batchRequestCompleted = function(oControlEvent) {  };

/**
 * The 'batchRequestFailed' event is fired, when a batch request failed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.ID The request ID
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} oControlEvent.getParameters.method The HTTP method
 * @param {map} oControlEvent.getParameters.headers The request headers
 * @param {boolean} oControlEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {boolean} oControlEvent.getParameters.success Request was successful or not
 * @param {object} oControlEvent.getParameters.response The response object - empty object if no response
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @param {array} oControlEvent.getParameters.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.batchRequestFailed = function(oControlEvent) {  };

/**
 * The 'batchRequestSent' event is fired, after a request has been sent to a backend.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} [oControlEvent.getParameters.type] The type of the request (if available)
 * @param {boolean} [oControlEvent.getParameters.async] If the request is synchronous or asynchronous (if available)
 * @param {array} oControlEvent.getParameters.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.batchRequestSent = function(oControlEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachAnnotationsFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @experimental The API is NOT stable yet. Use at your own risk.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachAnnotationsLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'batchRequestCompleted' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachBatchRequestCompleted = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'batchRequestFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachBatchRequestFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachBatchRequestSent = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachMetadataFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachMetadataLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Trigger a request to the function import odata service that was specified in the model constructor. 
 * 
 * If the ReturnType of the function import is either an EntityType or a collection of EntityType the 
 * changes are reflected in the model, otherwise they are ignored, and the <code>response</code> can 
 * be processed in the successHandler.
 * @param {string} sFunctionName A string containing the name of the function to call. The name is concatenated to the sServiceUrl which was
 *        specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {string} [mParameters.method] A string containing the type of method to call this function with
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {function} [mParameters.success] a callback function which is called when the data has been successfully retrieved. The handler can have
 *        the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.batchGroupId] batchGroupId for this request
 * @param {string} [mParameters.changeSetId] changeSetId for this request
 * @return {object} oRequestHandle An object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.callFunction = function(sFunctionName,mParameters) { return new Object(); };

/**
 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
 * and may not work.
 * @param {string} sPath A string containing the path to the collection where an entry
 * 		should be created. The path is concatenated to the sServiceUrl
 * 		which was specified in the model constructor.
 * @param {object} oData data of the entry that should be created.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: oData and response.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {map} [mParameters.headers] A map of headers for this request
 * @param {string} [mParameters.batchGroupId] batchGroupId for this request
 * @param {string} [mParameters.changeSetId] changeSetId for this request
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.create = function(sPath,oData,mParameters) { return new Object(); };

/**
 * Creates a new entry object which is described by the metadata of the entity type of the
 * specified sPath Name. A context object is returned which can be used to bind
 * against the newly created object.
 * 
 * For each created entry a request is created and stored in a request queue.
 * The request queue can be submitted by calling submitChanges. To delete a created
 * entry from the request queue call deleteCreateEntry.
 * 
 * The optional properties parameter can be used as follows:
 * 
 * - properties could be an array containing the property names which should be included
 *     in the new entry. Other properties defined in the entity type are not included.
 *   - properties could be an object which includes the desired properties and the values
 *     which should be used for the created entry.
 * 
 * If properties is not specified, all properties in the entity type will be included in the
 * created entry.
 * 
 * If there are no values specified the properties will have undefined values.
 * 
 * Please note that deep creates (including data defined by navigationproperties) are not supported
 * @param {String} sPath Name of the path to the EntitySet
 * @param {map} mParameters A map of the following parameters:
 * @param {array|object} [mParameters.properties] An array that specifies a set of properties or the entry
 * @param {string} [mParameters.batchGroupId] The batchGroupId
 * @param {string} [mParameters.changeSetId] The changeSetId
 * @param {sap.ui.model.Context} [mParameters.context] The binding context
 * @param {function} [mParameters.success] The success callback function
 * @param {function} [mParameters.error] The error callback function
 * @param {map} [mParameters.headers] A map of headers
 * @param {map} [mParameters.urlParameters] A map of url parameters
 * @return {sap.ui.model.Context} oContext A Context object that point to the new created entry.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.createEntry = function(sPath,mParameters) { return new sap.ui.model.Context(); };

/**
 * Creates the key from the given collection name and property map
 * @param {string} sCollection The name of the collection
 * @param {object} oKeyProperties The object containing at least all the key properties of the entity type
 * @returns {string} [sKey] key of the entry
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.createKey = function(sCollection,oKeyProperties) { return ""; };

/**
 * Deletes a created entry from the request queue and the model.
 * @param {sap.ui.model.Context} oContext The context object pointing to the created entry
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.deleteCreatedEntry = function(oContext) {  };

/**
 * @see sap.ui.model.Model.prototype.destroy
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.destroy = function() {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachAnnotationsFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * @experimental The API is NOT stable yet. Use at your own risk.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachAnnotationsLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'batchRequestCompleted' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachBatchRequestCompleted = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'batchRequestFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachBatchRequestFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'batchRequestSent' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachBatchRequestSent = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachMetadataFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachMetadataLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event annotationsFailed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireAnnotationsFailed = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event annotationsLoaded to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataAnnotations} [mArguments.annotations]  the annotations object.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireAnnotationsLoaded = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event batchRequestCompleted to attached listeners.
 * @param {string} mArguments.ID The request ID
 * @param {string} mArguments.url The url which is sent to the backend
 * @param {string} mArguments.method The HTTP method
 * @param {map} mArguments.headers The request headers
 * @param {boolean} mArguments.success Request was successful or not
 * @param {boolean} mArguments.async If the request is synchronous or asynchronous (if available)
 * @param {array} mArguments.requests Array of embedded requests ($batch) - empty array for non batch requests.
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @param {object} mArguments.response The response object - empty object if no response:
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireBatchRequestCompleted = function() { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event batchRequestFailed to attached listeners.
 * @param {object} mArguments the arguments to pass along with the event.
 * @param {string} mArguments.ID The request ID
 * @param {string} mArguments.url The url which is sent to the backend
 * @param {string} mArguments.method The HTTP method
 * @param {map} mArguments.headers The request headers
 * @param {boolean} mArguments.async If the request is synchronous or asynchronous (if available)
 * @param {boolean} mArguments.success Request was successful or not
 * @param {object} mArguments.response The response object - empty object if no response
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @param {array} mArguments.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireBatchRequestFailed = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event batchRequestSent to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which is sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request is synchronous or asynchronous (if available)
 * @param {array} mArguments.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireBatchRequestSent = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event metadataFailed to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireMetadataFailed = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event metadataLoaded to attached listeners.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataMetadata} [mArguments.metadata]  the metadata object.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireMetadataLoaded = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Returns the definition of batchGroups per EntityType for TwoWay changes
 * @returns {map} mChangeBatchGroups Definition of bactchGRoups for "TwoWay" changes
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getChangeBatchGroups = function() { return null; };

/**
 * Return requested data as object if the data has already been loaded and stored in the model.
 * @param {string} sPath A string containing the path to the data object that should be returned.
 * @param {object} [oContext] the optional context which is used with the sPath to retrieve the requested data.
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * @return {object} oData Object containing the requested data if the path is valid.
 * @public
 * @deprecated please use {@link #getProperty} instead
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getData = function(sPath,oContext,bIncludeExpandEntries) { return new Object(); };

/**
 * Returns the default count mode for retrieving the count of collections
 * @returns {sap.ui.model.odata.CountMode} sCountMode returns defaultCountMode
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getDefaultCountMode = function() { return new sap.ui.model.odata.CountMode(); };

/**
 * Returns the array of batchGroupIds that are set as deferred
 * @returns {array} aGroupIds The array of deferred batchGroupIds
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getDeferredBatchGroups = function() { return null; };

/**
 * Returns all headers and custom headers which are stored in the OData model.
 * @return {object} the header map
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getHeaders = function() { return new Object(); };

/**
 * Returns the key part from the entry URI or the given context or object
 * @param {object|sap.ui.model.Context} oObject The context or entry object
 * @returns {string} [sKey] key of the entry
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getKey = function(oObject) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPath</code>
 * @param {string} sPath the path/name of the property
 * @param {object} [oContext] the context if available to access the property value
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * @returns {any} vValue the value of the property
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getProperty = function(sPath,oContext,bIncludeExpandEntries) { return null; };

/**
 * Returns the current security token. If the token has not been requested from the server it will be requested first.
 * @returns {string} the CSRF security token
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getSecurityToken = function() { return ""; };

/**
 * Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
 * @return {Object} metdata object
 * @public
 * @experimental This feature has not been tested due to the lack of OData testing infrastructure. The API is NOT stable yet. Use at your own risk.
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getServiceAnnotations = function() { return null; };

/**
 * Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
 * @return {Object} metdata object
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getServiceMetadata = function() { return null; };

/**
 * Checks if there exist pending changes in the model created by the setProperty method.
 * @return {boolean} true/false
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.hasPendingChanges = function() { return false; };

/**
 * Trigger a GET request to the odata service that was specified in the model constructor.
 * The data will not be stored in the model. The requested data is returned with the response.
 * @param {string} sPath A string containing the path to the data which should
 * 		be retrieved. The path is concatenated to the sServiceUrl
 * 		which was specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path
 * 		given with the context.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {array} [mParameter.filters] an array of sap.ui.model.Filter to be included in the request URL
 * @param {array} [mParameter.sorters] an array of sap.ui.model.Sorter to be included in the request URL
 * @param {function} [mParameters.success] a callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: oData and response.
 * @param {function} [mParameters.error] a callback function which is called when the request
 * 		failed. The handler can have the parameter: oError which contains additional error information.
 * @param {string} [mParameters.batchGroupId] batchGroupId for this request
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.read = function(sPath,mParameters) { return new Object(); };

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed.
 * @param {boolean} [bForceUpdate=false] Force update of controls
 * @param {string} [sBatchGroupId] The batchGroupId
 * @param {boolean} [bRemoveData=false] If set to true then the model data will be removed/cleared.
 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.refresh = function(bForceUpdate,sBatchGroupId,bRemoveData) {  };

/**
 * refreshes the metadata for model, e.g. in case the first request for metadata has failed 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.refreshMetadata = function() {  };

/**
 * refresh XSRF token by performing a GET request against the service root URL.
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully retrieved.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 *  additional error information.
 * @returns {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.refreshSecurityToken = function(fnSuccess,fnError) { return new Object(); };

/**
 * Trigger a DELETE request to the odata service that was specified in the model constructor.
 * @param {string} sPath A string containing the path to the data that should be removed.
 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {object} [mParameters] Optional, can contain the following attributes:
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success]  a callback function which is called when the data has been successfully retrieved.
 * 		The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.eTag] If specified, the If-Match-Header will be set to this Etag.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {string} [mParameters.batchGroupId] batchGroupId for this request
 * @param {string} [mParameters.changeSetId] changeSetId for this request
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.remove = function(sPath,mParameters) { return new Object(); };

/**
 * 
 * Resets the collected changes by the setProperty method.
 * @param {array} [aKeys] 	Array of keys that should be resetted.
 * 							If no array is passed all changes will be resetted.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.resetChanges = function(aKeys) {  };

/**
 * Definition of batchGroups per EntityType for "TwoWay" changes
 * @param {map} mGroups A map containing the definition of bacthGroups for TwoWay changes. The Map has the
 * following format:
 * {
 * 		"EntityTypeName": {
 * 			batchGroupId: "ID",
 * 			[changeSetId: "ID",]
 * 			[single: true/false,]
 * 		}
 * }
 * bacthGroupId: Defines the bacthGroup for changes of the defined EntityTypeName
 * changeSetId: Defines a changeSetId wich bundles the changes for the EntityType.
 * single: Defines if every change will get an own changeSet (true)
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setChangeBatchGroups = function(mGroups) {  };

/**
 * Sets the default way to retrieve the count of collections in this model.
 * Count can be determined either by sending a separate $count request, including
 * $inlinecount=allpages in data requests, both of them or not at all.
 * @param {sap.ui.model.odata.CountMode} sCountMode sets default count mode
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setDefaultCountMode = function(sCountMode) {  };

/**
 * Setting batch groups as deferred. Requests that belongs to a deferred batch group will be sent manually
 * via a submitChanges call.
 * @param {array} aGroupIds Array of batchGroupIds that should be set as deferred
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setDeferredBatchGroups = function(aGroupIds) {  };

/**
 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
 * Private headers which are set in the ODataModel cannot be modified.
 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
 * 
 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
 * are removed unless they are specified again in the mCustomHeaders parameter.
 * @param {object} mHeaders the header name/value map.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setHeaders = function(mHeaders) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * 
 * If the changeBatchGroup for the changed EntityType is set to deferred changes could be submitted 
 * with submitChanges. Otherwise the change will be submitted directly.
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @return {boolean} true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setProperty = function(sPath,oValue,oContext) { return false; };

/**
 * Enable/Disable automatic updates of all Bindings after change operations
 * @param {boolean} bRefreshAfterChange Refresh after change
 * @public
 * @since 1.16.3
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setRefreshAfterChange = function(bRefreshAfterChange) {  };

/**
 * Enable/Disable XCSRF-Token handling
 * @param {boolean} [bTokenHandling=true] whether to use token handling or not
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setTokenHandlingEnabled = function(bTokenHandling) {  };

/**
 * @param {boolean} [bUseBatch=false] whether the requests should be encapsulated in a batch request
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setUseBatch = function(bUseBatch) {  };

/**
 * Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties.
 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
 * @param {object} [mParameters] a map which contains the following parameter properties:
 * @param {string} [mParameters.batchGroupId] defines the batchGroup that should be submitted. If not specified all deferred groups will be submitted
 * @param {function} [mParameters.success] a callback function which is called when the data has
 *            					 been successfully updated. The handler can have the
 *            	                 following parameters: oData
 * @param {function} [mParameters.error] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 * additional error information
 * 
 * Important: The success/error handler will only be called if batch support is enabled. If multiple batchGroups are submitted the handlers will be called for every batchGroup.
 * @param {string} [mParameters.eTag] an ETag which can be used for concurrency control. If it is specified, it will be used in an If-Match-Header in the request to the server for this entry.
 * @return {objec|array} an object which has an <code>abort</code> function to abort the current request: returns an array if multiple requests will be sent.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.submitChanges = function(mParameters) { return null; };

/**
 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported
 * and may not work. These should be done seperate on the entry directly.
 * @param {string} sPath A string containing the path to the data that should be updated.
 * 		The path is concatenated to the sServiceUrl which was specified
 * 		in the model constructor.
 * @param {object} oData data of the entry that should be updated.
 * @param {map} [mParameters] Optional, can contain the following attributes:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has been successfully updated.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.merge=false] trigger a MERGE request instead of a PUT request to perform a differential update
 * @param {string} [mParameters.eTag] If specified, the If-Match-Header will be set to this Etag.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {map} [mParameters.headers] A map of headers for this request
 * @param {string} [mParameters.batchGroupId] batchGroupId for this request
 * @param {string} [mParameters.changeSetId] changeSetId for this request
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.update = function(sPath,oData,mParameters) { return new Object(); };

/**
 * update all bindings
 * @param {boolean} [bForceUpdate=false] If set to false an update  will only be done when the value of a binding changed.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.updateBindings = function(bForceUpdate) {  };


// ---- sap.ui.model.PropertyBinding --------------------------------------------------------------------------

/**
 * Constructor for PropertyBinding
 * @class
 * The PropertyBinding is used to access single data values in the data model.
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {object} [mParameters]
 * @public
 * 
 */
sap.ui.model.PropertyBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.PropertyBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 *  Returns the binding mode 
 *  @returns {sap.ui.model.BindingMode} the binding mode
 *  @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getBindingMode = function() { return new sap.ui.model.BindingMode(); };

/**
 * Returns the current external value of the bound target which is formatted via a type or formatter function. 
 * @throws sap.ui.model.FormatException
 * @return {object} the current value of the bound target
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getExternalValue = function() { return new Object(); };

/**
 *  Returns the formatter function
 *  @returns {Function} the formatter function
 *  @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getFormatter = function() { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.PropertyBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.PropertyBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 *  Returns the type if any for the binding.
 *  @returns {sap.ui.model.Type} the binding type
 *  @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getType = function() { return new sap.ui.model.Type(); };

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getValue = function() { return new Object(); };

/**
 * Sets the binding mode 
 * @param {sap.ui.model.BindingMode} sBindingMode the binding mode
 * @protected
 * 
 */
sap.ui.model.PropertyBinding.prototype.setBindingMode = function(sBindingMode) {  };

/**
 * Sets the value for this binding. The value is parsed and validated against its type and then set to the binding.
 * A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 * @param {object} oValue the value to set for this binding
 * @throws sap.ui.model.ParseException
 * @throws sap.ui.model.ValidateException
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setExternalValue = function(oValue) {  };

/**
 * Sets the optional formatter function for the binding.
 * @param {function} fnFormatter the formatter function for the binding
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setFormatter = function(fnFormatter) {  };

/**
 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
 * The internal type is the property type of the element which the value is formatted to.  
 * @param {sap.ui.model.Type} oType the type for the binding
 * @param {String} sInternalType the internal type of the element property which this binding is bound against.
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setType = function(oType,sInternalType) {  };

/**
 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 * @param {object} oValue the value to set for this binding
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setValue = function(oValue) {  };


// ---- sap.ui.model.resource --------------------------------------------------------------------------


// ---- sap.ui.model.resource.ResourceModel --------------------------------------------------------------------------

/**
 * Constructor for a new ResourceModel.
 * @class Model implementation for resource bundles
 * @extends sap.ui.model.Model
 * @version 1.26.9
 * @param {object} oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
 * @param {string} [oData.bundleUrl] the URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [oData.bundleName] the UI5 module name of the .properties file; this name will be resolved to a path like the paths of normal UI5 modules and ".properties" will then be appended (e.g. a name like "myBundle" can be given)
 * @param {string} [oData.bundleLocale] an optional locale; when not given, the default is the active locale from the UI5 configuration
 * @param {boolean} [oData.async=false] whether the language bundle should be loaded asynchronously
 * @constructor
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel = function(oData) {};
/**
 * Enhances the resource model with a custom resource bundle. The resource model
 * can be enhanced with multiple resource bundles. The last enhanced resource
 * bundle wins against the previous ones and the original ones. This function
 * can be called several times.
 * @param {object} oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
 * @param {string} [oData.bundleUrl] the URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [oData.bundleName] the UI5 module name of the .properties file; this name will be resolved to a path like the paths of normal UI5 modules and ".properties" will then be appended (e.g. a name like "myBundle" can be given)
 * @param {string} [oData.bundleLocale] an optional locale; when not given, the default is the active locale from the UI5 configuration
 * @return Promise in async case (async ResourceModel) which is resolved when the the enhancement is finished
 * @since 1.16.1
 * @protected
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.enhance = function(oData) {  };

/**
 * Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.resource.ResourceModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.resource.ResourceModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.resource.ResourceModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * @param {string} sPath the path to the property
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.getProperty = function(sPath) { return null; };

/**
 * Returns the resource bundle of this model
 * @return loaded resource bundle or ECMA Script 6 Promise in asynchronous case
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.getResourceBundle = function() {  };


// ---- sap.ui.model.SelectionModel --------------------------------------------------------------------------

/**
 * Constructs an instance of a sap.ui.model.SelectionModel.
 * @class
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @param {int} iSelectionMode <code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code>
 * @constructor
 * @public
 * 
 */
sap.ui.model.SelectionModel = function(iSelectionMode) {};
/**
 * SelectionMode: Multi Selection
 * @public
 * 
 */
sap.ui.model.SelectionModel.MULTI_SELECTION = undefined

/**
 * SelectionMode: Single Selection
 * @public
 * 
 */
sap.ui.model.SelectionModel.SINGLE_SELECTION = undefined

/**
 * Changes the selection to be the union of the current selection
 * and the range between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * In <code>SINGLE_SELECTION</code> selection mode, this is equivalent
 * to calling <code>setSelectionInterval</code>, and only the second index
 * is used.
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.addSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.attachSelectionChanged = function(oData,fnFunction,oListener) { return new sap.ui.model.SelectionModel(); };

/**
 * Change the selection to the empty set and clears the lead selection.
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.clearSelection = function() { return new sap.ui.model.SelectionModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.detachSelectionChanged = function(fnFunction,oListener) { return new sap.ui.model.SelectionModel(); };

/**
 * Creates a new subclass of class sap.ui.model.SelectionModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.SelectionModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event 'selectionChanged' to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
 * </ul>
 * @param {object} mArguments the arguments to pass along with the event.
 * @param {int} mArguments.leadIndex Lead selection index
 * @param {int[]} [mArguments.rowIndices] Other selected indices (if available)
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.SelectionModel.prototype.fireSelectionChanged = function(mArguments) { return new sap.ui.model.SelectionModel(); };

/**
 * Return the second index argument from the most recent call to
 * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
 * @return {int} lead selected index
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.getLeadSelectedIndex = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.model.SelectionModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.SelectionModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the selected indices as array.
 * @return {int[]} array of selected indices
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.getSelectedIndices = function() { return new Array(); };

/**
 * Returns the current selection mode.
 * @return {int} the current selection mode
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.getSelectionMode = function() { return 0; };

/**
 * Returns true if the specified index is selected.
 * @param {int} iIndex
 * @return {boolean} true if the specified index is selected.
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.isSelectedIndex = function(iIndex) { return false; };

/**
 * Moves all selected indices starting at the position <code>iStartIndex</code> <code>iMove</code>
 * items.
 * 
 * This can be used if new items are inserted to the item set and you want to keep the selection.
 * To handle a deletion of items use <code>sliceSelectionInterval</code>.
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * @param {int} iStartIndex start at this position
 * @param {int} iMove
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.moveSelectionInterval = function(iStartIndex,iMove) { return new sap.ui.model.SelectionModel(); };

/**
 * Changes the selection to be the set difference of the current selection
 * and the indices between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * If the range of removed selection indices includes the current lead selection,
 * then the lead selection will be unset (set to -1).
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.removeSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Changes the selection to be equal to the range <code>iFromIndex</code> and <code>iToIndex</code>
 * inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * In <code>SINGLE_SELECTION</code> selection mode, only <code>iToindex</iToIndex> is used.
 * 
 * If this call results in a change to the current selection, then a
 * <code>SelectionChanged</code> event is fired.
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.setSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Sets the selection mode. The following list describes the accepted
 * selection modes:
 * <ul>
 * <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> -
 *   Only one list index can be selected at a time. In this mode,
 *   <code>setSelectionInterval</code> and <code>addSelectionInterval</code> are
 *   equivalent, both replacing the current selection with the index
 *   represented by the second argument (the "lead").
 * <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION</code> -
 *   In this mode, there's no restriction on what can be selected.
 * </ul>
 * @param {int} iSelectionMode selection mode
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.setSelectionMode = function(iSelectionMode) {  };

/**
 * Slices a the indices between the two indices from the selection.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * If the range of removed selection indices includes the current lead selection,
 * then the lead selection will be unset (set to -1).
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.sliceSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };


// ---- sap.ui.model.SimpleType --------------------------------------------------------------------------

/**
 * Constructor for a new SimpleType.
 * @class
 * This is an abstract base class for simple types.
 * @abstract
 * @extends sap.ui.model.Type
 * @version 1.26.9
 * @constructor
 * @param {object} [oFormatOptions] options as provided by concrete subclasses
 * @param {object} [oConstraints] constraints as supported by concrete subclasses
 * @public
 * 
 */
sap.ui.model.SimpleType = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.SimpleType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format the given value in model representation to an output value in the given
 * internal type. This happens according to the format options, if target type is 'string'.
 * If oValue is not defined or null, null will be returned.
 * @param {any} oValue the value to be formatted
 * @param {string} sInternalType the target type
 * @return {any} the formatted output value
 * @public
 * 
 */
sap.ui.model.SimpleType.prototype.formatValue = function(oValue,sInternalType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.SimpleType.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.SimpleType.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parse a value of an internal type to the expected value of the model type.
 * @param {any} oValue the value to be parsed
 * @param {string} sInternalType the source type
 * @return {any} the parse result
 * @public
 * 
 */
sap.ui.model.SimpleType.prototype.parseValue = function(oValue,sInternalType) { return null; };

/**
 * Validate whether a given value in model representation is valid and meets the
 * defined constraints (if any).
 * @param {any} oValue the value to be validated
 * @public
 * 
 */
sap.ui.model.SimpleType.prototype.validateValue = function(oValue) {  };


// ---- sap.ui.model.Sorter --------------------------------------------------------------------------

/**
 * 
 * Constructor for Sorter
 * @class
 * Sorter for the list binding
 * This object defines the sort order for the list binding.
 * @param {String} sPath the binding path used for sorting
 * @param {boolean} [bDescending=false] whether the sort order should be descending
 * @param {boolean|function} vGroup configure grouping of the content, can either be true to enable grouping
 *        based on the raw model property value, or a function which calculates the group value out of the 
 *        context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to
 *        implement the grouping behaviour for the aggregation which you want to group.
 * @public
 * 
 */
sap.ui.model.Sorter = function(sPath,bDescending,vGroup) {};
/**
 * Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Sorter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Sorter.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.Sorter.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.TreeBinding --------------------------------------------------------------------------

/**
 * Constructor for TreeBinding
 * @class
 * The TreeBinding is a specific binding for trees in the model, which can be used
 * to populate Trees.
 * @param {sap.ui.model.Model} oModel
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional) 
 * @public
 * 
 */
sap.ui.model.TreeBinding = function(oModel,sPath,oContext,aFilters,mParameters) {};
/**
 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 * 
 */
sap.ui.model.TreeBinding.prototype.attachFilter = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 * 
 */
sap.ui.model.TreeBinding.prototype.detachFilter = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.TreeBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the tree according to the filter definitions.
 * @param {sap.ui.model.Filter[]} aFilters Array of sap.ui.model.Filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.filter = function(aFilters,sFilterType) {  };

/**
 * Returns the number of child nodes of a specific context
 * @param {Object} oContext the context element of the node
 * @return {integer} the number of children
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.getChildCount = function(oContext) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.TreeBinding.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.TreeBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the current value of the bound target
 * @param {Object} oContext the context element of the node
 * @param {integer} iStartIndex the startIndex where to start the retrieval of contexts
 * @param {integer} iLength determines how many contexts to retrieve beginning from the start index.
 * @return {Array} the array of child contexts for the given node
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.getNodeContexts = function(oContext,iStartIndex,iLength) { return null; };

/**
 * Returns the current value of the bound target
 * @param {integer} iStartIndex the startIndex where to start the retrieval of contexts
 * @param {integer} iLength determines how many contexts to retrieve beginning from the start index.
 * @return {Array} the array of child contexts for the root node
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.getRootContexts = function(iStartIndex,iLength) { return null; };

/**
 * Returns if the node has child nodes
 * @param {Object} oContext the context element of the node
 * @return {boolean} true if node has children
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.hasChildren = function(oContext) { return false; };


// ---- sap.ui.model.Type --------------------------------------------------------------------------

/**
 * Constructor for a new Type.
 * @class
 * This is an abstract base class for type objects.
 * @abstract
 * @extends sap.ui.base.Object
 * @version 1.26.9
 * @constructor
 * @public
 * 
 */
sap.ui.model.Type = function() {};
/**
 * Creates a new subclass of class sap.ui.model.Type with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Type.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Type.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.Type.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the name of this type.
 * @return {String} the name of this type
 * @public
 * 
 */
sap.ui.model.Type.prototype.getName = function() { return null; };


// ---- sap.ui.model.type.Boolean --------------------------------------------------------------------------

/**
 * Constructor for a Boolean type.
 * @class
 * This class represents boolean simple types.
 * @extends sap.ui.model.SimpleType
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Boolean doesn't support any specific format options
 * @param {object} [oConstraints] value constraints. Boolean doesn't support additional constraints
 * 
 */
sap.ui.model.type.Boolean = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Boolean.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Boolean.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Boolean.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Date --------------------------------------------------------------------------

/**
 * Constructor for a Date type.
 * @class
 * This class represents date simple types.
 * @extends sap.ui.model.SimpleType
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] options used to create a DateFormat for formatting / parsing. Supports the same options as {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat.getDateInstance}
 * @param {object} [oFormatOptions.source] additional set of options used to create a second DateFormat object for conversions between 
 *           string values in the data source (e.g. model) and Date. This second format object is used to convert from a model string to Date before 
 *           converting the Date to string with the primary format object. Vice versa, this 'source' format is also used to format an already parsed 
 *           external value (e.g. user input) into the string format expected by the data source.
 *           Supports the same set of options as {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat.getDateInstance}.
 * @param {object} [oConstraints] value constraints. 
 * @param {Date|string} [oConstraints.minimum] smallest value allowed for this type. Values for constraints must use the same type as configured via <code>oFormatOptions.source</code>  
 * @param {Date|string} [oConstraints.maximum] largest value allowed for this type. Values for constraints must use the same type as configured via <code>oFormatOptions.source</code>  
 * 
 */
sap.ui.model.type.Date = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Date.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Date.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Date.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * @protected
 * 
 */
sap.ui.model.type.Date.prototype.getOutputPattern = function() {  };


// ---- sap.ui.model.type.DateTime --------------------------------------------------------------------------

/**
 * Constructor for a DateTime type.
 * @class
 * This class represents datetime simple types.
 * @extends sap.ui.model.type.Date
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] options used to create a DateFormat for formatting / parsing to/from external values and 
 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format. 
 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getDateTimeInstance DateFormat.getDateTimeInstance}.
 *           Note that this differs from the base type.
 * @param {object} [oConstraints] value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. DateTime) 
 * 
 */
sap.ui.model.type.DateTime = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.DateTime.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.DateTime.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.DateTime.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.FileSize --------------------------------------------------------------------------

/**
 * Constructor for a FileSize type.
 * @class
 * This class represents file size simple types.
 * @extends sap.ui.model.SimpleType
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Supports the same options as {@link sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}
 * @param {object} [oFormatOptions.source] additional set of options used to create a second FileSizeFormat object for conversions between 
 *           string values in the data source (e.g. model) and a numeric byte representation. This second format object is used to convert from a model string to numeric bytes before 
 *           converting to string with the primary format object. Vice versa, this 'source' format is also used to format an already parsed 
 *           external value (e.g. user input) into the string format expected by the data source.
 *           Supports the same set of options as {@link sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}.
 * @param {object} [oConstraints] value constraints. 
 * @param {float} [oConstraints.minimum] smallest value allowed for this type  
 * @param {float} [oConstraints.maximum] largest value allowed for this type  
 * 
 */
sap.ui.model.type.FileSize = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.FileSize with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.FileSize.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.FileSize.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.FileSize.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Float --------------------------------------------------------------------------

/**
 * Constructor for a Float type.
 * @class
 * This class represents float simple types.
 * @extends sap.ui.model.SimpleType
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}
 * @param {object} [oConstraints] value constraints. 
 * @param {float} [oConstraints.minimum] smallest value allowed for this type  
 * @param {float} [oConstraints.maximum] largest value allowed for this type  
 * 
 */
sap.ui.model.type.Float = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Float.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Float.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Float.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Integer --------------------------------------------------------------------------

/**
 * Constructor for a Integer type.
 * @class
 * This class represents integer simple types.
 * @extends sap.ui.model.SimpleType
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getIntegerInstance NumberFormat.getIntegerInstance}
 * @param {object} [oConstraints] value constraints. 
 * @param {int} [oConstraints.minimum] smallest value allowed for this type  
 * @param {int} [oConstraints.maximum] largest value allowed for this type  
 * 
 */
sap.ui.model.type.Integer = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Integer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Integer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Integer.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.String --------------------------------------------------------------------------

/**
 * Constructor for a String type.
 * @class
 * This class represents string simple types.
 * @extends sap.ui.model.SimpleType
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. String doesn't support any formatting options
 * @param {object} [oConstraints] value constraints. All given constraints must be fulfilled by a value to be valid  
 * @param {int} [oConstraints.maxLength] maximum length (in characters) that a string of this value may have  
 * @param {string} [oConstraints.startsWith] a prefix that any valid value must start with  
 * @param {string} [oConstraints.startsWithIgnoreCase] a prefix that any valid value must start with, ignoring case  
 * @param {string} [oConstraints.endsWith] a suffix that any valid value must end with  
 * @param {string} [oConstraints.endsWithIgnoreCase] a suffix that any valid value must end with, ignoring case  
 * @param {string} [oConstraints.contains] an infix that must be contained in any valid value  
 * @param {string} [oConstraints.equals] only value that is allowed  
 * @param {RegExp} [oConstraints.search] a regular expression that the value must match  
 * 
 */
sap.ui.model.type.String = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.String.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.String.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.String.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Time --------------------------------------------------------------------------

/**
 * Constructor for a Time type.
 * @class
 * This class represents time simple types.
 * @extends sap.ui.model.type.Date
 * @version 1.26.9
 * @constructor
 * @public
 * @param {object} [oFormatOptions] options used to create a DateFormat for formatting / parsing to/from external values and 
 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format. 
 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getTimeInstance DateFormat.getTimeInstance}.
 *           Note that this differs from the base type.
 * @param {object} [oConstraints] value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. Time) 
 * 
 */
sap.ui.model.type.Time = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Time.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Time.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Time.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.xml --------------------------------------------------------------------------


// ---- sap.ui.model.xml.XMLModel --------------------------------------------------------------------------

/**
 * Constructor for a new XMLModel.
 * @class
 * Model implementation for XML format
 * @extends sap.ui.model.Model
 * @version 1.26.9
 * @param {object} oData either the URL where to load the XML from or a XML
 * @constructor
 * @public
 * 
 */
sap.ui.model.xml.XMLModel = function(oData) {};
/**
 * Creates a new subclass of class sap.ui.model.xml.XMLModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.xml.XMLModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.xml.XMLModel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.model.xml.XMLModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the object for the given <code>path</code>
 * @param {string} sPath the path to the object
 * @param {object} [oContext=null] the context which will be used to retrieve the object
 * @type any
 * @return the object
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.getObject = function(sPath,oContext) { return null; };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * @param {string} sPath the path to the property
 * @param {object} [oContext=null] the context which will be used to retrieve the property
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.getProperty = function(sPath,oContext) { return null; };

/**
 * Serializes the current XML data of the model into a string.
 * @return the XML document serialized as string
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.getXML = function() {  };

/**
 * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string}[oParameters] A map or string that is sent to the server with the request.
 * @param {boolean} [bAsync=true] if the request should be asynchron or not. Default is true.
 * @param {string} [sType=GET] of request. Default is 'GET'
 * @param {string} [bCache=false] force no caching if false. Default is false
 * @param {object} mHeaders An object of additional header key/value pairs to send along with the request
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.loadData = function(sURL,oParameters,bAsync,sType,bCache,mHeaders) {  };

/**
 * Sets the provided XML encoded data object to the model
 * @param {object} oData the data to set to the model
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setData = function(oData) {  };

/**
 * Sets an XML namespace to use in the binding path
 * @param {string} sNameSpace the namespace URI
 * @param {string} [sPrefix=null] the prefix for the namespace (optional)
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setNameSpace = function(sNameSpace,sPrefix) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setProperty = function(sPath,oValue,oContext) {  };

/**
 * Sets the specified XML formatted string text to the model
 * @param {string} sXMLText the XML data as string
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setXML = function(sXMLText) {  };


// ---- sap.ui.test.matchers.AggregationContainsPropertyEqual --------------------------------------------------------------------------

/**
 * 	 * AggregationContainsPropertyEqual - checks if an aggregation contains at least one item that has a Property set to a certain value
 * 
 * The settings supported by AggregationContainsPropertyEqual are:
 * <ul>
 * 	<li>Properties
 * 		<ul>
 * 			<li>{@link #getPropertyName propertyName} : string</li>
 * 			<li>{@link #getAggregationName aggregationName} : string</li>
 * 			<li>{@link #getPropertyValue propertyValue} : any</li>
 * 		</ul>
 * 	</li>
 * </ul>
 * @class AggregationContainsPropertyEqual - checks if an aggregation contains at least one item that has a Property set to a certain value
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new AggregationContainsPropertyEqualMatcher
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual = function(mSettings) {};
/**
 * Getter for property <code>aggregationName</code>.
 * 
 * The Name of the aggregation that is used for matching
 * @return {string} the value of property <code>aggregationName</code>
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.getAggregationName = function() { return ""; };

/**
 * Getter for property <code>propertyName</code>.
 * 
 * The Name of the property that is used for matching
 * @return {string} the value of property <code>propertyName</code>
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.getPropertyName = function() { return ""; };

/**
 * Getter for property <code>propertyValue</code>.
 * 
 * The value of the Property that is used for matching
 * @return {string} the value of property <code>propertyValue</code>
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.getPropertyValue = function() { return ""; };

/**
 * Checks if the control has a filled aggregation with at least one control that have a property equaling propertyName/Value
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Aggregation set in the property aggregationName is filled, false if it is not.
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.isMatching = function(oControl) { return false; };

/**
 * Setter for property <code>aggregationName</code>.
 * @param {string} sName the name of the aggregation <code>aggregationName</code>
 * @return {sap.ui.test.matchers.AggregationContainsPropertyEqual} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.setAggregationName = function(sName) { return new sap.ui.test.matchers.AggregationContainsPropertyEqual(); };

/**
 * Setter for property <code>propertyName</code>.
 * @param {string} sName the value of the property <code>propertyName</code>
 * @return {sap.ui.test.matchers.AggregationContainsPropertyEqual} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.setPropertyName = function(sName) { return new sap.ui.test.matchers.AggregationContainsPropertyEqual(); };

/**
 * Setter for property <code>propertyValue</code>.
 * @param {string} sPropertyValue the value for the property <code>propertyValue</code>
 * @return {sap.ui.test.matchers.AggregationContainsPropertyEqual} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.setPropertyValue = function(sPropertyValue) { return new sap.ui.test.matchers.AggregationContainsPropertyEqual(); };


// ---- sap.ui.test.matchers.AggregationFilled --------------------------------------------------------------------------

/**
 * AggregationFilled - checks if an aggregation contains at least one entry
 * 
 * * The settings supported by AggregationFilled are:
 * <ul>
 * 	<li>Properties
 * 		<ul>
 * 			<li>{@link #getName name} : string</li>
 * 		</ul>
 * </li>
 * </ul>
 * @class AggregationFilled - checks if an aggregation contains at least one entry
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new AggregationFilledMatcher
 * @extends sap.ui.test.matchers.Matcher
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.AggregationFilled = function(mSettings) {};
/**
 * Getter for property <code>name</code>.
 * 
 * The name of the aggregation that is used for matching
 * @return {string} the name of the aggregation <code>name</code>
 * @public
 * 
 */
sap.ui.test.matchers.AggregationFilled.prototype.getName = function() { return ""; };

/**
 * Checks if the control has a filled aggregation
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Aggregation set in the property aggregationName is filled, false if it is not.
 * @public
 * 
 */
sap.ui.test.matchers.AggregationFilled.prototype.isMatching = function(oControl) { return false; };

/**
 * Setter for property <code>name</code>.
 * @param {string} sName the name of the aggregation <code>name</code>
 * @return {sap.ui.test.matchers.AggregationFilled} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.test.matchers.AggregationFilled.prototype.setName = function(sName) { return new sap.ui.test.matchers.AggregationFilled(); };


// ---- sap.ui.test.matchers.Matcher --------------------------------------------------------------------------

/**
 * @class Matchers for Opa5 - needs to implement an isMatching function that returns a boolean and will get a control instance as parameter
 * @abstract
 * @extends sap.ui.base.ManagedObject
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.Matcher = function() {};
/**
 * Checks if the matcher is matching - will get an instance of sap.ui.Control as parameter
 * Should be overwritten by subclasses
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Control is matching the condition of the matcher 
 * @protected
 * 
 */
sap.ui.test.matchers.Matcher.prototype.isMatching = function(oControl) { return false; };


// ---- sap.ui.test.matchers.PropertyStrictEquals --------------------------------------------------------------------------

/**
 * PropertyStrictEquals - checks if a property has the exact same value
 * The settings supported by PropertyStrictEquals are:
 * <ul>
 * 	<li>Properties
 * 		<ul>
 * 			<li>{@link #getName name} : string</li>
 * 			<li>{@link #getValue value} : any</li>
 * 		</ul>
 * 	</li>
 * </ul>
 * @class PropertyStrictEquals - checks if a property has the exact same value
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new PropertyStrictEquals
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals = function(mSettings) {};
/**
 * Getter for property <code>name</code>.
 * 
 * The Name of the property that is used for matching.
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>value</code>.
 * 
 * The value of the property that is used for matching.
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.getValue = function() { return ""; };

/**
 * Checks if the control has a property that matches the value
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the property has a strictly matching value.
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.isMatching = function(oControl) { return false; };

/**
 * Setter for property <code>name</code>.
 * @param {string} sValue the value for the property <code>name</code>
 * @return {sap.ui.test.matchers.PropertyStrictEquals} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.setName = function(sValue) { return new sap.ui.test.matchers.PropertyStrictEquals(); };

/**
 * Setter for property <code>value</code>.
 * @param {string} sValue the value for the property <code>value</code>
 * @return {sap.ui.test.matchers.PropertyStrictEquals} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.setValue = function(sValue) { return new sap.ui.test.matchers.PropertyStrictEquals(); };


// ---- sap.ui.test.Opa --------------------------------------------------------------------------

/**
 * @class One Page Acceptance testing.
 * This class will help you write acceptance tests in one page or single page applications.
 * You can wait for certain conditions to be met.
 * @public
 * @since 1.22
 * @param extensionObject An object containing properties and functions. The newly created Opa will be extended by these properties and functions - see jQuery.extend.
 * 
 */
sap.ui.test.Opa = function(extensionObject) {};
/**
 * the global configuration of Opa.
 * All of the global values can be overwritten in an individual waitFor call.
 * defaults are :
 * <ul>
 * 		<li>timeout : 15 seconds, is increased to 5 minutes if running in debug mode e.g. with URL parameter sap-ui-debug=true</li>
 * 		<li>pollingIntervall: 400 milliseconds</li>
 * </ul>
 * @static
 * @public
 * 
 */
sap.ui.test.Opa.prototype.config = function() {  };

/**
 * Waits until all waitFor calls are done
 * @static
 * @returns {jQuery.promise} If the waiting was successful, the promise will be resolved. If not it will be rejected
 * @public
 * 
 */
sap.ui.test.Opa.prototype.emptyQueue = function() { return new jQuery.promise(); };

/**
 * Extends and overwrites default values of the Opa.config
 * @static
 * @param {object} options the values to be added to the existion config
 * @public
 * 
 */
sap.ui.test.Opa.prototype.extendConfig = function(options) {  };

/**
 * Gives access to a singleton object you can save values in.
 * @returns {object} the context object
 * @public
 * 
 */
sap.ui.test.Opa.prototype.getContext = function() { return new Object(); };

/**
 * Reset Opa.config to its default values 
 * @static
 * @public
 * @since 1.25
 * 
 */
sap.ui.test.Opa.prototype.resetConfig = function() {  };

/**
 * Waits for a check condition to return true. Then a success function will be called.
 * If check does not return true until timeout is reached, an error function will be called.
 * @public
 * @param {object} options containing check, success and error function;
 * properties:
 * <ul>
 * 	<li>timeout: default 15 (seconds) specifies how long the waitFor function polls before it fails</li>
 * 	<li>pollingInterval: default 400 (milliseconds) specifies how often the waitFor function polls</li>
 * 	<li>check: function will get invoked in every polling interval. If it returns true, the check is successful and the polling will stop</li>
 * 	<li>success: function will get invoked after the check function returns true. If there is no check function defined, it will be directly invoked. waitFor statements added in the success handler will be executed before previously added waitFor statements</li>
 * 	<li>error: function will get invoked, when the timeout is reached and check did never return a true.</li>
 * </ul>
 * @returns {jQuery.promise} a promise that gets resolved on success.
 * 
 */
sap.ui.test.Opa.prototype.waitFor = function(options) { return new jQuery.promise(); };


// ---- sap.ui.test.Opa5 --------------------------------------------------------------------------

/**
 * @class UI 5 extension of the OPA framework
 * @extends sap.ui.base.Object
 * @public
 * @since 1.22
 * 
 */
sap.ui.test.Opa5 = function() {};
/**
 * Create a page object configured as arrangement, action and assertion to the Opa.config.
 * Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help structuring your tests.
 * @param {map} mPageObjects
 * @param {map} mPageObjects.<your page object name> Multiple page objects are possible, provide at least actions or assertions
 * @param {function} [mPageObjects.<your page object name>.baseClass] Base class for the page object's actions and assertions, default: Opa5
 * @param {function} [mPageObjects.<your page object name>.namespace] Namespace prefix for the page object's actions and assertions, default: sap.ui.test.opa.pageObject. Use it if you use page objects from multiple projects in the same test build.
 * @param {map} [mPageObjects.<your page object name>.actions] can be used as arrangement and action in Opa tests. Only the test knows if an action is used as arrangement or action
 * @param {function} mPageObjects.<your page object name>.actions.<your action 1>
 * @param {function} mPageObjects.<your page object name>.actions.<your action 2>
 * @param {map} [mPageObjects.<your page object name>.assertions]
 * @param {function} mPageObjects.<your page object name>.assertions.<your assertions 1>
 * @param {function} mPageObjects.<your page object name>.assertions.<your assertions 2>
 * @returns {map} mPageObject
 * @returns {map} mPageObject.<your page object name>
 * @returns {object} mPageObject.<your page object name>.actions an instance of baseClass or Opa5 with all the actions defined above
 * @returns {object} mPageObject.<your page object name>.assertions an instance of baseClass or Opa5 with all the assertions defined above 
 * @public
 * @static
 * @since 1.25
 * 
 */
sap.ui.test.Opa5.prototype.createPageObjects = function(mPageObjects) { return null; };

/**
 * Waits until all waitFor calls are done
 * @returns {jQuery.promise} If the waiting was successful, the promise will be resolved. If not it will be rejected
 * @public
 * @static
 * 
 */
sap.ui.test.Opa5.prototype.emptyQueue = function() { return new jQuery.promise(); };

/**
 * Extends the default config of Opa
 * @public
 * @static
 * 
 */
sap.ui.test.Opa5.prototype.extendConfig = function() {  };

/**
 * Returns qunit utils object of the iframe. If the iframe is not loaded it will return null.
 * @public
 * @static
 * @returns {sap.ui.core.routing.HashChanger} the hashchange
 * 
 */
sap.ui.test.Opa5.prototype.getHashChanger = function() { return new sap.ui.core.routing.HashChanger(); };

/**
 * Returns the jQuery object of the iframe. If the iframe is not loaded it will return null.
 * @returns {jQuery} the jQuery object
 * @static
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.getJQuery = function() { return null; };

/**
 * Returns the opa plugin used for retrieving controls. If an iframe is used it will return the iFrame's plugin.
 * @returns {sap.ui.test.OpaPlugin} the plugin instance
 * @public
 * @static
 * 
 */
sap.ui.test.Opa5.prototype.getPlugin = function() { return new sap.ui.test.OpaPlugin(); };

/**
 * Returns qunit utils object of the iframe. If the iframe is not loaded it will return null.
 * @public
 * @static
 * @returns {sap.ui.test.qunit} the qunit utils
 * 
 */
sap.ui.test.Opa5.prototype.getUtils = function() { return new sap.ui.test.qunit(); };

/**
 * Returns the window object of the iframe or the current window. If the iframe is not loaded it will return null.
 * @returns {oWindow} the window of the iframe
 * @static
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.getWindow = function() { return null; };

/**
 * Starts an app in an iframe. Only works reliably if running on the same server.
 * @param {string} sSource the source of the iframe
 * @param {integer} [iTimeout] the timeout for loading the iframe in seconds - default is 90
 * @returns {jQuery.promise} a promise that gets resolved on success.
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.iStartMyAppInAFrame = function(sSource,iTimeout) { return new jQuery.promise(); };

/**
 * Removes the iframe from the dom and removes all the references on its objects
 * @returns {jQuery.promise} a promise that gets resolved on success.
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.iTeardownMyAppFrame = function() { return new jQuery.promise(); };

/**
 * Same as the waitFor method of Opa. Also allows you to specify additional parameters:
 * <ul>
 * <li> id - the global id of a control, or the id of a control inside of a view.</li>
 * <li> viewName - the name of a view, if this one is set the id of the control is searched inside of the view. If an id is not be set, all controls of the view will be found.</li>
 * <li> viewNamespace - get appended before the viewName </li>
 * <li> matchers - a single matcher or an array of matchers @see sap.ui.test.matchers. All of the matchers have to match. Check will not be called if the matchers filtered out all controls before.</li>
 * <li> controlType - a string eg: sap.m.Button will search for all buttons inside of a container. If an id is given, this is ignored</li>
 * <li> searchOpenDialogs - boolean : if true, OPA will only look in open dialogs. All the other values except control type will be ignored</li>
 * <li> visible - boolean : default: true - if set to false OPA will also look for not rendered and invisible controls</li><li>timeout: default 15 (seconds) specifies how long the waitFor function polls before it fails</li>
 * <li>pollingInterval: default 400 (milliseconds) specifies how often the waitFor function polls</li>
 * <li>check: function will get invoked in every polling interval. If it returns true, the check is successful and the polling will stop</li>
 * <li>success: function will get invoked after the check function returns true. If there is no check function defined, it will be directly invoked</li>
 * <li>error: function will get invoked, when the timeout is reached and check did never return a true.</li>
 * 
 * </ul>
 * @param {object} oOptions
 * @returns {jQuery.promise} a promise that gets resolved on success.
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.waitFor = function(oOptions) { return new jQuery.promise(); };


// ---- sap.ui.test.OpaPlugin --------------------------------------------------------------------------

/**
 * @class A Plugin to search UI5 controls.
 * @protected
 * @since 1.22
 * 
 */
sap.ui.test.OpaPlugin = function() {};
/**
 * Creates a new subclass of class sap.ui.test.OpaPlugin with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.OpaPlugin.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.OpaPlugin.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.ui.test.OpaPlugin.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.test.PageObjectFactory --------------------------------------------------------------------------

/**
 * @class Page Object Factory
 * @extends sap.ui.base.Object
 * @protected
 * @since 1.26
 * 
 */
sap.ui.test.PageObjectFactory = function() {};
/**
 * Create a page object configured as arrangement, action and assertion to the Opa.config.
 * Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help structuring your tests.
 * @see sap.ui.test.Opa5#createPageObjects
 * @protected
 * @static
 * 
 */
sap.ui.test.PageObjectFactory.create = function() {  };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- jQuery.device.is --------------------------------------------------------------------------

/**
 * Whether the application runs on an Android phone - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.phone on Android)
 * https://developers.google.com/chrome/mobile/docs/user-agent
 * Some device vendors however do not follow this rule
 * @deprecated since 1.17.0: use sap.ui.Device.system.phone &amp;&amp; sap.ui.Device.os.android  instead
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.android_phone = false;

/**
 * Whether the application runs on an Android tablet - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.tablet on Android)
 * https://developers.google.com/chrome/mobile/docs/user-agent
 * Some device vendors however do not follow this rule
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.tablet &amp;&amp; sap.ui.Device.os.android  instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.android_tablet = false;

/**
 * Whether the running device is a desktop browser.
 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile), 
 * this property will be false.
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.desktop instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.desktop = false;

/**
 * Whether the application runs on an iPad
 * @type {boolean}
 * @deprecated since 1.20: shouldn't do device specific coding; if still needed, use sap.ui.Device.os.ios &amp;&amp; sap.ui.Device.system.tablet
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.ipad = false;

/**
 * Whether the application runs on an iPhone
 * @type {boolean}
 * @deprecated since 1.20: shouldn't do device specific coding; if still needed, use sap.ui.Device.os.ios &amp;&amp; sap.ui.Device.system.phone
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.iphone = false;

/**
 * Whether the device is in "landscape" orientation (also "true" when the device does not know about the orientation)
 * @type {boolean}
 * @deprecated since 1.20: use sap.ui.Device.orientation.landscape
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.landscape = false;

/**
 * Whether the running device is a phone.
 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile), 
 * this property will also be set according to the simulated platform.
 * This property will be false when runs in desktop browser.
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.phone instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.phone = false;

/**
 * Whether the device is in portrait orientation
 * @type {boolean}
 * @deprecated since 1.20: use sap.ui.Device.orientation.portrait
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.portrait = false;

/**
 * Whether the application runs in standalone mode without browser UI (launched from the iOS home screen)
 * @type {boolean}
 * @deprecated since 1.20: use window.navigator.standalone
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.standalone = false;

/**
 * Whether the running device is a tablet.
 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile), 
 * this property will also be set according to the simulated platform.
 * This property will be false when runs in desktop browser.
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.tablet instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.tablet = false;


// ---- jQuery.os --------------------------------------------------------------------------

/**
 * Whether the current operating system is Android
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.android
 * 
 * @memberof jQuery.os
 */
jQuery.os.android = false;

/**
 * Whether the current operating system is BlackBerry
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.blackberry
 * 
 * @memberof jQuery.os
 */
jQuery.os.blackberry = false;

/**
 * The version of the operating system parsed as a float (major and first minor version)
 * @type {float}
 * @deprecated since 1.20: use sap.ui.Device.os.version
 * @public
 * 
 * @memberof jQuery.os
 */
jQuery.os.fVersion = 0.0;

/**
 * Whether the current operating system is Apple iOS
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.ios
 * 
 * @memberof jQuery.os
 */
jQuery.os.ios = false;

/**
 * The name of the operating system; currently supported are: "ios", "android", "blackberry"
 * @type {string}
 * @deprecated since 1.20: use sap.ui.Device.os.name
 * @public
 * 
 * @memberof jQuery.os
 */
jQuery.os.os = "";

/**
 * The version of the operating system as a string (including minor versions)
 * @type {string}
 * @deprecated since 1.20: use sap.ui.Device.os.versionStr
 * @public
 * 
 * @memberof jQuery.os
 */
jQuery.os.version = "";

/**
 * Whether the current operating system is Windows Phone
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.winphone
 * 
 * @memberof jQuery.os
 */
jQuery.os.winphone = false;


// ---- jQuery.sap --------------------------------------------------------------------------

/**
 * List of DOM events that a UIArea automatically takes care of.
 * 
 * A control/element doesn't have to bind listeners for these events.
 * It instead can implement an <code>on<i>event</i>(oEvent)</code> method
 * for any of these events that it wants to be notified about.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.ControlEvents = undefined;


// ---- jQuery.sap.history.NavType --------------------------------------------------------------------------

/**
 * This indicates that the new hash is achieved by pressing the back button.
 * @type {string}
 * @public
 * @constant
 * 
 * @memberof jQuery.sap.history.NavType
 */
jQuery.sap.history.NavType.Back = "";

/**
 * This indicates that the new hash is restored from the bookmark.
 * @type {string}
 * @public
 * @constant
 * 
 * @memberof jQuery.sap.history.NavType
 */
jQuery.sap.history.NavType.Bookmark = "";

/**
 * This indicates that the new hash is achieved by pressing the forward button.
 * @type {string}
 * @public
 * @constant
 * 
 * @memberof jQuery.sap.history.NavType
 */
jQuery.sap.history.NavType.Forward = "";

/**
 * This indicates that the new hash is achieved by some unknown direction.
 * This happens when the user navigates out of the application and then click on the forward button
 * in the browser to navigate back to the application.
 * @type {string}
 * @public
 * @constant
 * 
 * @memberof jQuery.sap.history.NavType
 */
jQuery.sap.history.NavType.Unknown = "";


// ---- jQuery.sap.KeyCodes --------------------------------------------------------------------------

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.A = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ALT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ARROW_DOWN = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ARROW_LEFT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ARROW_RIGHT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ARROW_UP = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.B = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.BACKSLASH = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.BACKSPACE = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.BREAK = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.C = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.CAPS_LOCK = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.COMMA = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.CONTEXT_MENU = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.CONTROL = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.D = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DELETE = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_0 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_1 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_2 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_3 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_4 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_5 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_6 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_7 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_8 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DIGIT_9 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.DOT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.E = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.END = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ENTER = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.EQUALS = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.ESCAPE = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F1 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F10 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F11 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F12 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F2 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F3 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F4 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F5 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F6 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F7 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F8 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.F9 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.G = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.GREAT_ACCENT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.H = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.HOME = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.I = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.INSERT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.J = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.K = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.L = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.M = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.MINUS = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.N = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUM_LOCK = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_0 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_1 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_2 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_3 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_4 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_5 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_6 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_7 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_8 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_9 = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_ASTERISK = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_COMMA = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_MINUS = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_PLUS = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.NUMPAD_SLASH = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.O = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.OPEN_BRACKET = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.P = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.PAGE_DOWN = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.PAGE_UP = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.PIPE = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.PLUS = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.PRINT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.Q = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.R = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.S = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SCROLL_LOCK = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SEMICOLON = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SHIFT = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SINGLE_QUOTE = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SLASH = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SLEEP = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.SPACE = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.T = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.TAB = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.TURN_OFF = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.U = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.V = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.W = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.WINDOWS = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.X = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.Y = 0.0;

/**
 * @type number
 * @public
 * 
 * @memberof jQuery.sap.KeyCodes
 */
jQuery.sap.KeyCodes.Z = 0.0;


// ---- jQuery.sap.log.Level --------------------------------------------------------------------------

/**
 * Debug level. Use this for logging information necessary for debugging
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.DEBUG = undefined;

/**
 * Error level. Use this for logging of erroneous but still recoverable situations
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.ERROR = undefined;

/**
 * Fatal level. Use this for logging unrecoverable situations
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.FATAL = undefined;

/**
 * Info level. Use this for logging information of purely informative nature
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.INFO = undefined;

/**
 * Do not log anything
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.NONE = undefined;

/**
 * Trace level. Use this for tracing the program flow.
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.TRACE = undefined;

/**
 * Warning level. Use this for logging unwanted but foreseen situations
 * @public
 * 
 * @memberof jQuery.sap.log.Level
 */
jQuery.sap.log.Level.WARNING = undefined;


// ---- jQuery.sap.PseudoEvents --------------------------------------------------------------------------

/**
 * Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapbackspace = undefined;

/**
 * Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapbackspacemodifiers = undefined;

/**
 * Pseudo event for pseudo bottom event
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapbottom = undefined;

/**
 * Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapcollapse = undefined;

/**
 * Pseudo event for pseudo collapse event (keyboard numpad *)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapcollapseall = undefined;

/**
 * Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapcollapsemodifiers = undefined;

/**
 * Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdecrease = undefined;

/**
 * Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdecreasemodifiers = undefined;

/**
 * Pseudo event indicating delayed double click (e.g. for inline edit)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdelayeddoubleclick = undefined;

/**
 * Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdelete = undefined;

/**
 * Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdeletemodifiers = undefined;

/**
 * Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdown = undefined;

/**
 * Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdownmodifiers = undefined;

/**
 * Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapend = undefined;

/**
 * Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapendmodifiers = undefined;

/**
 * Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapenter = undefined;

/**
 * Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapentermodifiers = undefined;

/**
 * Pseudo event for keyboard escape
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapescape = undefined;

/**
 * Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapexpand = undefined;

/**
 * Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapexpandmodifiers = undefined;

/**
 * Pseudo event for pseudo 'hide' event (Alt + up-Arrow)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saphide = undefined;

/**
 * Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saphome = undefined;

/**
 * Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saphomemodifiers = undefined;

/**
 * Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapincrease = undefined;

/**
 * Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapincreasemodifiers = undefined;

/**
 * Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapleft = undefined;

/**
 * Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapleftmodifiers = undefined;

/**
 * Pseudo event for pressing the '-' (minus) sign.
 * @since 1.25.0
 * @experimental Since 1.25.0 Implementation details can be changed in future.
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapminus = undefined;

/**
 * Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapnext = undefined;

/**
 * Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapnextmodifiers = undefined;

/**
 * Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappagedown = undefined;

/**
 * Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappagedownmodifiers = undefined;

/**
 * Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappageup = undefined;

/**
 * Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappageupmodifiers = undefined;

/**
 * Pseudo event for pressing the '+' (plus) sign.
 * @since 1.25.0
 * @experimental Since 1.25.0 Implementation details can be changed in future.
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapplus = undefined;

/**
 * Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapprevious = undefined;

/**
 * Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappreviousmodifiers = undefined;

/**
 * Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapright = undefined;

/**
 * Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saprightmodifiers = undefined;

/**
 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapselect = undefined;

/**
 * Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapselectmodifiers = undefined;

/**
 * Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapshow = undefined;

/**
 * Pseudo event for pseudo skip back (F6 + shift modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapskipback = undefined;

/**
 * Pseudo event for pseudo skip forward (F6 + no modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapskipforward = undefined;

/**
 * Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapspace = undefined;

/**
 * Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapspacemodifiers = undefined;

/**
 * Pseudo event for keyboard tab (TAB + no modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saptabnext = undefined;

/**
 * Pseudo event for keyboard tab (TAB + shift modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saptabprevious = undefined;

/**
 * Pseudo event for  pseudo top event
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saptop = undefined;

/**
 * Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapup = undefined;

/**
 * Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapupmodifiers = undefined;


// ---- jQuery.sap.storage.Type --------------------------------------------------------------------------

/**
 * Indicates usage of the browser's globalStorage feature
 * @public
 * 
 * @memberof jQuery.sap.storage.Type
 */
jQuery.sap.storage.Type.global = undefined;

/**
 * Indicates usage of the browser's localStorage feature
 * @public
 * 
 * @memberof jQuery.sap.storage.Type
 */
jQuery.sap.storage.Type.local = undefined;

/**
 * Indicates usage of the browser's sessionStorage feature
 * @public
 * 
 * @memberof jQuery.sap.storage.Type
 */
jQuery.sap.storage.Type.session = undefined;


// ---- jQuery.support --------------------------------------------------------------------------

/**
 * Whether the current browser supports (named) CSS animations
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssAnimations = false;

/**
 * Whether the current browser supports CSS gradients. Note that ANY support for CSS gradients leads to "true" here, no matter what the syntax is.
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssGradients = false;

/**
 * Whether the current browser supports (2D) CSS transforms
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssTransforms = false;

/**
 * Whether the current browser supports 3D CSS transforms
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssTransforms3d = false;

/**
 * Whether the current browser supports CSS transitions
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssTransitions = false;

/**
 * Whether the current browser supports the OLD CSS3 Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.flexBoxLayout = false;

/**
 * Whether the current browser supports only prefixed flexible layout properties
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.flexBoxPrefixed = false;

/**
 * Whether the current browser supports any kind of Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.hasFlexBoxSupport = false;

/**
 * Whether the current browser supports the IE10 CSS3 Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * @since 1.12.0
 * 
 * @memberof jQuery.support
 */
jQuery.support.ie10FlexBoxLayout = false;

/**
 * Whether the current browser supports the NEW CSS3 Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.newFlexBoxLayout = false;


// ---- sap.ui.core.AccessibleRole --------------------------------------------------------------------------

/**
 * A message with an alert or error information.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Alert = "";

/**
 * A separate window with an alert or error information.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.AlertDialog = "";

/**
 * A software unit executing a set of tasks for the user.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Application = "";

/**
 * Usually defined as the advertisement at the top of a web page.
 * The banner content typically contains the site or company logo, or other key advertisements.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Banner = "";

/**
 * Allows user-triggered actions.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Button = "";

/**
 * A control that has three possible values: true, false, mixed.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Checkbox = "";

/**
 * A table cell containing header information for a column.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ColumnHeader = "";

/**
 * Allows selecting an item from a list, or to enter data directly in the input field.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Combobox = "";

/**
 * Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ContentInfo = "";

/**
 * The content of the associated element represents a definition.
 * If there is a definition element within the content, this one represents the term being defined.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Definition = "";

/**
 * Descriptive content for a page element.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Description = "";

/**
 * A small window that is designed to interrupt the current application processing
 * in order to inform the user and to get some response.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Dialog = "";

/**
 * A list of references to members of a single group.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Directory = "";

/**
 * Content that contains related information, such as a book.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Document = "";

/**
 * Contains cells of tabular data arranged in rows and columns, for example in a table.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Grid = "";

/**
 * A table cell in a grid where the cells can be active, editable, and selectable.
 * Cells may have functional relationships to controls, for example.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.GridCell = "";

/**
 * A section of user interface objects.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Group = "";

/**
 * A heading for a section of the page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Heading = "";

/**
 * A container for a collection of elements that form an image.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Img = "";

/**
 * An interactive reference to a resource.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Link = "";

/**
 * A container for non-interactive list items which are the children of the list.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.List = "";

/**
 * A widget that allows the user to select one or more items from a list.
 * The items within the list are static and can contain images.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Listbox = "";

/**
 * A single item in a list.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ListItem = "";

/**
 * An area where new information is added, or old information disappears.
 * Information types are chat logs, messaging, or error logs, for example.
 * The log contains a sequence: New information is always added to the end of the log.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Log = "";

/**
 * Defines the main content of a document.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Main = "";

/**
 * Is used to scroll text across the page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Marquee = "";

/**
 * Offers a list of choices to the user.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Menu = "";

/**
 * A container for menu items where each item may activate a submenu.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Menubar = "";

/**
 * A child in a menu.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.MenuItem = "";

/**
 * A checkable menu item (tri-state).
 * @public
 * 
 */
sap.ui.core.AccessibleRole.MenuItemCheckbox = "";

/**
 * A menu item which is part of a group of menuitemradio roles.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.MenuItemRadio = "";

/**
 * A collection of links suitable for use when navigating the document or related documents.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Navigation = "";

/**
 * No explicit role is applicable. An AccessibleName should be specified for the control.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.None = "";

/**
 * The content is parenthetic or ancillary to the main content of the resource.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Note = "";

/**
 * A selectable item in a list represented by a select.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Option = "";

/**
 * An element whose role is presentational does not need to be mapped to the accessibility API.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Presentation = "";

/**
 * Shows the execution progress in applications providing functions that take a long time.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ProgressBar = "";

/**
 * An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Radio = "";

/**
 * A group of radio controls.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.RadioGroup = "";

/**
 * A large section on the web page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Region = "";

/**
 * A row of table cells.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Row = "";

/**
 * A table cell containing header information for a row.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.RowHeader = "";

/**
 * A search section of a web document. In many cases, this is a form used to submit search requests about the site,
 * or a more general Internet wide search service.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Search = "";

/**
 * A unique section of the document. In the case of a portal, this may include time display, weather forecast,
 * or stock price.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Secondary = "";

/**
 * Indicates that the element contains content that is related to the main content of the page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.SeeAlso = "";

/**
 * A line or bar that separates sections of content.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Separator = "";

/**
 * A user input where the user selects an input in a given range. This form of range expects an analogous keyboard
 * interface.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Slider = "";

/**
 * Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and
 * the other ones can be displayed by scrolling using the arrow up and arrow down key.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.SpinButton = "";

/**
 * A container for processing advisory information.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Status = "";

/**
 * A header for a tab panel.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tab = "";

/**
 * A list of tabs which are references to tab panels.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tablist = "";

/**
 * A container for the resources associated with a tab.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tabpanel = "";

/**
 * Inputs that allow free-form text as their value.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Textbox = "";

/**
 * A numerical counter which indicates an amount of elapsed time from a start point,
 * or of the time remaining until a certain end point.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Timer = "";

/**
 * A collection of commonly used functions represented in compact visual form.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Toolbar = "";

/**
 * A popup that displays a description for an element when the user passes over or rests on that element.
 * Supplement to the normal tooltip processing of the user agent.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tooltip = "";

/**
 * A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tree = "";

/**
 * A grid whose rows are expandable and collapsable in the same manner as the ones of trees.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.TreeGrid = "";

/**
 * A tree node
 * @public
 * 
 */
sap.ui.core.AccessibleRole.TreeItem = "";


// ---- sap.ui.core.BarColor --------------------------------------------------------------------------

/**
 * Color: yellow (#faf2b0)
 * @public
 * 
 */
sap.ui.core.BarColor.CRITICAL = "";

/**
 * Color: red (#ff9a90)
 * @public
 * 
 */
sap.ui.core.BarColor.NEGATIVE = "";

/**
 * Color: blue (#b8d0e8)
 * @public
 * 
 */
sap.ui.core.BarColor.NEUTRAL = "";

/**
 * Color: green (#b5e7a8)
 * @public
 * 
 */
sap.ui.core.BarColor.POSITIVE = "";


// ---- sap.ui.core.Design --------------------------------------------------------------------------

/**
 * Mono space font
 * @public
 * 
 */
sap.ui.core.Design.Monospace = "";

/**
 * Standard font
 * @public
 * 
 */
sap.ui.core.Design.Standard = "";


// ---- sap.ui.core.format.NumberFormat.RoundingMode --------------------------------------------------------------------------

/**
 * Rounding mode to round away from zero
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.AWAY_FROM_ZERO = "";

/**
 * Rounding mode to round towards positive infinity
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.CEILING = "";

/**
 * Rounding mode to round towards negative infinity
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.FLOOR = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round away from zero.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards positive infinity.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_CEILING = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards negative infinity.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_FLOOR = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards zero.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_TOWARDS_ZERO = "";

/**
 * Rounding mode to round towards zero
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.TOWARDS_ZERO = "";


// ---- sap.ui.core.HorizontalAlign --------------------------------------------------------------------------

/**
 * Locale-specific positioning at the beginning of the line
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Begin = "";

/**
 * Centered alignment of text
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Center = "";

/**
 * Locale-specific positioning at the end of the line
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.End = "";

/**
 * Hard option for left alignment
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Left = "";

/**
 * Hard option for right alignment
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Right = "";


// ---- sap.ui.core.IconColor --------------------------------------------------------------------------

/**
 * Critical color
 * @public
 * 
 */
sap.ui.core.IconColor.Critical = "";

/**
 * Default color (brand color)
 * @public
 * 
 */
sap.ui.core.IconColor.Default = "";

/**
 * Negative color
 * @public
 * 
 */
sap.ui.core.IconColor.Negative = "";

/**
 * Neutral color.
 * @public
 * 
 */
sap.ui.core.IconColor.Neutral = "";

/**
 * Positive color
 * @public
 * 
 */
sap.ui.core.IconColor.Positive = "";


// ---- sap.ui.core.ImeMode --------------------------------------------------------------------------

/**
 * IME is used for entering characters.
 * @public
 * 
 */
sap.ui.core.ImeMode.Active = "";

/**
 * The value is automatically computed by the user agent.
 * @public
 * 
 */
sap.ui.core.ImeMode.Auto = "";

/**
 * IME is disabled.
 * @public
 * 
 */
sap.ui.core.ImeMode.Disabled = "";

/**
 * IME is not used for entering characters.
 * @public
 * 
 */
sap.ui.core.ImeMode.Inactive = "";


// ---- sap.ui.core.MessageType --------------------------------------------------------------------------

/**
 * Message is an error
 * @public
 * 
 */
sap.ui.core.MessageType.Error = "";

/**
 * Message should be just an information
 * @public
 * 
 */
sap.ui.core.MessageType.Information = "";

/**
 * Message has no specific level
 * @public
 * 
 */
sap.ui.core.MessageType.None = "";

/**
 * Message is an success message
 * @public
 * 
 */
sap.ui.core.MessageType.Success = "";

/**
 * Message is a warning
 * @public
 * 
 */
sap.ui.core.MessageType.Warning = "";


// ---- sap.ui.core.mvc.ViewType --------------------------------------------------------------------------

/**
 * HTML view
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.HTML = "";

/**
 * JS View
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.JS = "";

/**
 * JSON View
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.JSON = "";

/**
 * Template View
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.Template = "";

/**
 * XML view
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.XML = "";


// ---- sap.ui.core.OpenState --------------------------------------------------------------------------

/**
 * Closed and currently not changing states.
 * @public
 * 
 */
sap.ui.core.OpenState.CLOSED = "";

/**
 * Still open, but in the process of going to the CLOSED state.
 * @public
 * 
 */
sap.ui.core.OpenState.CLOSING = "";

/**
 * Open and currently not changing states.
 * @public
 * 
 */
sap.ui.core.OpenState.OPEN = "";

/**
 * Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN.
 * @public
 * 
 */
sap.ui.core.OpenState.OPENING = "";


// ---- sap.ui.core.Orientation --------------------------------------------------------------------------

/**
 * Arrange Horizontally
 * @public
 * 
 */
sap.ui.core.Orientation.Horizontal = "";

/**
 * Arrange Vertically
 * @public
 * 
 */
sap.ui.core.Orientation.Vertical = "";


// ---- sap.ui.core.Popup.Dock --------------------------------------------------------------------------

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.BeginBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.BeginCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.BeginTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.CenterBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.CenterCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.CenterTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.EndBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.EndCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.EndTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.LeftBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.LeftCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.LeftTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.RightBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.RightCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.RightTop = undefined;


// ---- sap.ui.core.routing.HistoryDirection --------------------------------------------------------------------------

/**
 * The page has already been navigated to and it was the precessor of the previous page
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.Backwards = "";

/**
 * The page has already been navigated to and it was the successor of the previous page
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.Forwards = "";

/**
 * A new Entry is added to the history
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.NewEntry = "";

/**
 * A Navigation took place, but it could be any of the other three states
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.Unknown = "";


// ---- sap.ui.core.ScrollBarAction --------------------------------------------------------------------------

/**
 * Scrolling done by dragging the scroll bar's paint thumb
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.Drag = "";

/**
 * Scrolling done by mouse wheel
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.MouseWheel = "";

/**
 * Range scrolling caused by clicking track area or using page up or page down key.
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.Page = "";

/**
 * Single step scrolling caused by clicking an arrow button or arrow key.
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.Step = "";


// ---- sap.ui.core.Scrolling --------------------------------------------------------------------------

/**
 * A scroll bar is shown if the content requires more space than the given space (rectangle) provides.
 * @public
 * 
 */
sap.ui.core.Scrolling.Auto = "";

/**
 * No scroll bar is shown, and the content stays in the given rectangle.
 * @public
 * 
 */
sap.ui.core.Scrolling.Hidden = "";

/**
 * No scroll bar provided even if the content is larger than the available space.
 * @public
 * 
 */
sap.ui.core.Scrolling.None = "";

/**
 * A scroll bar is always shown even if the space is large enough for the current content.
 * @public
 * 
 */
sap.ui.core.Scrolling.Scroll = "";


// ---- sap.ui.core.TextAlign --------------------------------------------------------------------------

/**
 * Locale-specific positioning at the beginning of the line.
 * @public
 * 
 */
sap.ui.core.TextAlign.Begin = "";

/**
 * Centered text alignment.
 * @public
 * 
 */
sap.ui.core.TextAlign.Center = "";

/**
 * Locale-specific positioning at the end of the line.
 * @public
 * 
 */
sap.ui.core.TextAlign.End = "";

/**
 * Sets no text align, so the browser default is used.
 * @public
 * @since 1.26.0
 * 
 */
sap.ui.core.TextAlign.Initial = "";

/**
 * Hard option for left alignment.
 * @public
 * 
 */
sap.ui.core.TextAlign.Left = "";

/**
 * Hard option for right alignment.
 * @public
 * 
 */
sap.ui.core.TextAlign.Right = "";


// ---- sap.ui.core.TextDirection --------------------------------------------------------------------------

/**
 * Inherits the direction from its parent control/container.
 * @public
 * 
 */
sap.ui.core.TextDirection.Inherit = "";

/**
 * Specifies left-to-right text direction.
 * @public
 * 
 */
sap.ui.core.TextDirection.LTR = "";

/**
 * Specifies right-to-left text direction.
 * @public
 * 
 */
sap.ui.core.TextDirection.RTL = "";


// ---- sap.ui.core.TitleLevel --------------------------------------------------------------------------

/**
 * The level of the title is choosen by the control rendering the title.
 * @public
 * 
 */
sap.ui.core.TitleLevel.Auto = "";

/**
 * The Title is of level 1.
 * @public
 * 
 */
sap.ui.core.TitleLevel.H1 = "";

/**
 * The Title is of level 2
 * @public
 * 
 */
sap.ui.core.TitleLevel.H2 = "";

/**
 * The Title is of level 3
 * @public
 * 
 */
sap.ui.core.TitleLevel.H3 = "";

/**
 * The Title is of level 4
 * @public
 * 
 */
sap.ui.core.TitleLevel.H4 = "";

/**
 * The Title is of level 5
 * @public
 * 
 */
sap.ui.core.TitleLevel.H5 = "";

/**
 * The Title is of level 6
 * @public
 * 
 */
sap.ui.core.TitleLevel.H6 = "";


// ---- sap.ui.core.ValueState --------------------------------------------------------------------------

/**
 * State is not valid.
 * @public
 * 
 */
sap.ui.core.ValueState.Error = "";

/**
 * State is not specified.
 * @public
 * 
 */
sap.ui.core.ValueState.None = "";

/**
 * State is valid.
 * @public
 * 
 */
sap.ui.core.ValueState.Success = "";

/**
 * State is valid but with a warning.
 * @public
 * 
 */
sap.ui.core.ValueState.Warning = "";


// ---- sap.ui.core.VerticalAlign --------------------------------------------------------------------------

/**
 * 
 * Content is aligned at the bottom.
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Bottom = "";

/**
 * 
 * Content respect the parent's vertical alignment.
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Inherit = "";

/**
 * 
 * Content is centered vertically .
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Middle = "";

/**
 * 
 * Content is aligned at the top.
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Top = "";


// ---- sap.ui.core.Wrapping --------------------------------------------------------------------------

/**
 * Inserts actual line breaks in the text at the wrap point.
 * @public
 * 
 */
sap.ui.core.Wrapping.Hard = "";

/**
 * The standard browser behavior is considered for wrapping.
 * @public
 * 
 */
sap.ui.core.Wrapping.None = "";

/**
 * Wrapping shall not be allowed.
 * @public
 * 
 */
sap.ui.core.Wrapping.Off = "";

/**
 * The text is actually on the same line but displayed within several lines.
 * @public
 * 
 */
sap.ui.core.Wrapping.Soft = "";


// ---- sap.ui.core.ws.ReadyState --------------------------------------------------------------------------

/**
 * The connection has been closed or could not be opened.
 * @public
 * 
 * @memberof sap.ui.core.ws.ReadyState
 */
sap.ui.core.ws.ReadyState.CLOSED = undefined;

/**
 * The connection is going through the closing handshake.
 * @public
 * 
 * @memberof sap.ui.core.ws.ReadyState
 */
sap.ui.core.ws.ReadyState.CLOSING = undefined;

/**
 * The connection has not yet been established.
 * @public
 * 
 * @memberof sap.ui.core.ws.ReadyState
 */
sap.ui.core.ws.ReadyState.CONNECTING = undefined;

/**
 * The WebSocket connection is established and communication is possible.
 * @public
 * 
 * @memberof sap.ui.core.ws.ReadyState
 */
sap.ui.core.ws.ReadyState.OPEN = undefined;


// ---- sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS --------------------------------------------------------------------------

/**
 * Protocol v10.pcp.sap.com
 * @public
 * 
 * @memberof sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS
 */
sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS.v10 = undefined;


// ---- sap.ui.Device.browser --------------------------------------------------------------------------

/**
 * Flag indicating the Chrome browser.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.chrome = false;

/**
 * Flag indicating the Firefox browser.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.firefox = false;

/**
 * Flag indicating the Internet Explorer browser.
 * @type boolean
 * @deprecated since 1.20: use sap.ui.Device.browser.msie
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.internet_explorer = false;

/**
 * Flag indicating whether the mobile variant of the browser is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.mobile = false;

/**
 * Flag indicating a Mozilla browser.
 * @type boolean
 * @since 1.20.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.mozilla = false;

/**
 * Flag indicating the Internet Explorer browser.
 * @type boolean
 * @since 1.20.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.msie = false;

/**
 * The name of the browser.
 * @see sap.ui.Device.browser#BROWSER
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.name = null;

/**
 * Flag indicating the Safari browser.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.safari = false;

/**
 * The version as float. Might be -1 if no version can be determined.
 * @type float
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.version = 0.0;

/**
 * The version as string. Might be empty if no version can be determined.
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.versionStr = null;

/**
 * Flag indicating a Webkit browser.
 * @type boolean
 * @since 1.20.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.prototype.webkit = false;


// ---- sap.ui.Device.browser.BROWSER --------------------------------------------------------------------------

/**
 * Android stock browser name.
 * @see sap.ui.Device.browser#name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.prototype.ANDROID = undefined;

/**
 * Chrome browser name.
 * @see sap.ui.Device.browser#name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.prototype.CHROME = undefined;

/**
 * Firefox browser name.
 * @see sap.ui.Device.browser#name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.prototype.FIREFOX = undefined;

/**
 * Internet Explorer browser name.
 * @see sap.ui.Device.browser#name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.prototype.INTERNET_EXPLORER = undefined;

/**
 * Safari browser name.
 * @see sap.ui.Device.browser#name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.prototype.SAFARI = undefined;


// ---- sap.ui.Device.media.RANGESETS --------------------------------------------------------------------------

/**
 * A 3 step range set (S-L).
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.prototype.SAP_3STEPS = undefined;

/**
 * A 4 step range set (S-XL).
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.prototype.SAP_4STEPS = undefined;

/**
 * A 6 step range set (XS-XXL).
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.prototype.SAP_6STEPS = undefined;

/**
 * A 3 step range set (Phone, Tablet, Desktop). <br/>
 * <br/>
 * This range set is initialized always by default.<br/>
 * Phone is < 600px<br/>
 * Tablet is 600px >= Tablet < 1024<br/>
 * Desktop is > 1024px<br/>
 * <br/>
 * There are 5 css classes to hide elements based on the width of the screen:
 * <ul>
 * 	<li>sapUiHideOnPhone - will be hidden if the screen has 600px or more</li>
 * 	<li>sapUiHideOnTablet - will be hidden if the screen has less than 600px or more than 1023px</li>
 * 	<li>sapUiHideOnDesktop - will be hidden if the screen is smaller than 1024px</li>
 * 	<li>sapUiVisibleOnlyOnPhone - will be visible if the screen has less than 600px</li>
 * 	<li>sapUiVisibleOnlyOnTablet - will be visible if the screen has 600px or more but less than 1024px</li>
 * 	<li>sapUiVisibleOnlyOnDesktop - will be visible if the screen has 1024px or more</li>
 * </ul>
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.prototype.SAP_STANDARD = undefined;


// ---- sap.ui.Device.os --------------------------------------------------------------------------

/**
 * Flag indicating the Android operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.android = false;

/**
 * Flag indicating the Blackberry operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.blackberry = false;

/**
 * Flag indicating the iOS operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.ios = false;

/**
 * Flag indicating the Linux operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.linux = false;

/**
 * Flag indicating the MAC operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.macintosh = false;

/**
 * The name of the operating system.
 * @see sap.ui.Device.os#OS
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.name = null;

/**
 * The version as float. Might be -1 if no version can be determined.
 * @type float
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.version = 0.0;

/**
 * The version as string. Might be empty if no version can be determined.
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.versionStr = null;

/**
 * Flag indicating the Windows operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.windows = false;

/**
 * Flag indicating the Windows Phone operating system.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.prototype.windows_phone = false;


// ---- sap.ui.Device.os.OS --------------------------------------------------------------------------

/**
 * Android operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.ANDROID = undefined;

/**
 * Blackberry operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.BLACKBERRY = undefined;

/**
 * iOS operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.IOS = undefined;

/**
 * Linux operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.LINUX = undefined;

/**
 * MAC operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.MACINTOSH = undefined;

/**
 * Windows operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.WINDOWS = undefined;

/**
 * Windows Phone operating system name.
 * @see sap.ui.Device.os#name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.prototype.WINDOWS_PHONE = undefined;


// ---- sap.ui.Device.support --------------------------------------------------------------------------

/**
 * Flag indicating whether media queries via JavaScript are supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.matchmedia = false;

/**
 * Flag indicating whether events on JavaScript media queries are supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.matchmedialistener = false;

/**
 * Flag indicating whether the native orientationchange event is supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.orientation = false;

/**
 * Flag indicating whether pointer events are supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.pointer = false;

/**
 * Flag indicating whether the device has a Retina display.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.retina = false;

/**
 * Flag indicating whether touch events are supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.touch = false;

/**
 * Flag indicating whether WebSockets are supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.prototype.websocket = false;


// ---- sap.ui.Device.system --------------------------------------------------------------------------

/**
 * Flag indicating if the device is a combination of desktop and tablet.
 * 
 * This property is mainly targeting the windows 8 devices where the mouse and touch event may supported
 * natively by the browser.
 * 
 * This property is set to true only when both mouse and touch event are natively supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.prototype.combi = false;

/**
 * Flag indicating if the device is a desktop.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.prototype.desktop = false;

/**
 * Flag indicating if the device is a phone.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.prototype.phone = false;

/**
 * Flag indicating if the device is a tablet.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.prototype.tablet = false;


// ---- sap.ui.model.BindingMode --------------------------------------------------------------------------

/**
 * BindingMode default means that the binding mode of the model is used
 * @public
 * 
 * @memberof sap.ui.model.BindingMode
 */
sap.ui.model.BindingMode.Default = undefined;

/**
 * BindingMode one time means value is only read from the model once
 * @public
 * 
 * @memberof sap.ui.model.BindingMode
 */
sap.ui.model.BindingMode.OneTime = undefined;

/**
 * BindingMode one way means from model to view
 * @public
 * 
 * @memberof sap.ui.model.BindingMode
 */
sap.ui.model.BindingMode.OneWay = undefined;

/**
 * BindingMode two way means from model to view and vice versa
 * @public
 * 
 * @memberof sap.ui.model.BindingMode
 */
sap.ui.model.BindingMode.TwoWay = undefined;


// ---- sap.ui.model.ChangeReason --------------------------------------------------------------------------

/**
 * The list has changed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Change = undefined;

/**
 * The list context has changed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Context = undefined;

/**
 * The List was filtered
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Filter = undefined;

/**
 * The list was refreshed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Refresh = undefined;

/**
 * The list was sorted
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Sort = undefined;


// ---- sap.ui.model.FilterOperator --------------------------------------------------------------------------

/**
 * FilterOperator between.
 * When used on strings, the BT operator might not behave intuitively. For example, 
 * when filtering a list of Names with BT "A", "B", all Names starting with "A" will be 
 * included as well as the name "B" itself, but no other name starting with "B".
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.BT = undefined;

/**
 * FilterOperator contains
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.Contains = undefined;

/**
 * FilterOperator ends with
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.EndsWith = undefined;

/**
 * FilterOperator equals
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.EQ = undefined;

/**
 * FilterOperator greater or equals
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.GE = undefined;

/**
 * FilterOperator greater than
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.GT = undefined;

/**
 * FilterOperator less or equals
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.LE = undefined;

/**
 * FilterOperator less than
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.LT = undefined;

/**
 * FilterOperator not equals
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.NE = undefined;

/**
 * FilterOperator starts with
 * @public
 * 
 * @memberof sap.ui.model.FilterOperator
 */
sap.ui.model.FilterOperator.StartsWith = undefined;


// ---- sap.ui.model.FilterType --------------------------------------------------------------------------

/**
 * Filters which are changed by the application
 * @public
 * 
 * @memberof sap.ui.model.FilterType
 */
sap.ui.model.FilterType.Application = undefined;

/**
 * Filters which are set by the different controls
 * @public
 * 
 * @memberof sap.ui.model.FilterType
 */
sap.ui.model.FilterType.Control = undefined;


// ---- sap.ui.model.odata.CountMode --------------------------------------------------------------------------

/**
 * Count is retrieved by a separate request upfront and inline with each data request
 * @public
 * 
 * @memberof sap.ui.model.odata.CountMode
 */
sap.ui.model.odata.CountMode.Both = undefined;

/**
 * Batch grouping enabled
 * @public
 * 
 * @memberof sap.ui.model.odata.CountMode
 */
sap.ui.model.odata.CountMode.Group = undefined;

/**
 * Count is retrieved by adding $inlinecount=allpages and is included in the data request
 * @public
 * 
 * @memberof sap.ui.model.odata.CountMode
 */
sap.ui.model.odata.CountMode.Inline = undefined;

/**
 * Count is retrieved by adding $inlinecount=allpages and is included in every data request
 * @public
 * 
 * @memberof sap.ui.model.odata.CountMode
 */
sap.ui.model.odata.CountMode.InlineRepeat = undefined;

/**
 * Count is not requested from the server
 * @public
 * 
 * @memberof sap.ui.model.odata.CountMode
 */
sap.ui.model.odata.CountMode.None = undefined;

/**
 * Count is retrieved by sending a separate $count request, before requesting data
 * @public
 * 
 * @memberof sap.ui.model.odata.CountMode
 */
sap.ui.model.odata.CountMode.Request = undefined;

