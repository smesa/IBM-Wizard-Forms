
// ---- sap.m --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.toString = function() { return ""; };
/**
 * Returns invalid date value of UI5
 * @deprecated Since 1.12 UI5 returns null for invalid date
 * @returns {null}
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.getInvalidDate = function() { return null; };

/**
 * Finds default locale settings once and returns always the same.
 * We should not need to create new instance to get same locale settings
 * This method keep the locale instance in the scope and returns the same after first run
 * @return {Object} sap.ui.core.Locale instane
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.getLocale = function() { return null; };

/**
 * Finds default locale data once and returns always the same
 * @return {Object} sap.ui.core.LocaleData instance
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.getLocaleData = function() { return null; };

/**
 * Checks if the given parameter is a valid JsDate Object
 * @param {any} value Any variable to test.
 * @return {boolean}
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.isDate = function(value) { return false; };


// ---- sap.m.ActionListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ActionListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ActionListItem should be used to fire actions when tapped.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ActionListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ActionListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * Text of the action list item.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ActionListItem.prototype.getText = function() { return ""; };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.ActionListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionListItem.prototype.setText = function(sText) { return new sap.m.ActionListItem(); };


// ---- sap.m.ActionSelect --------------------------------------------------------------------------

/**
 * Constructor for a new ActionSelect.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Select#constructor sap.m.Select}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.
 * @extends sap.m.Select
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSelect = function(sId,mSettings) {};
/**
 * Adds some button into the association named <code>buttons</code>.
 * @param {string | sap.m.Button} vButton the buttons to add; to add; if empty, nothing is inserted
 * @return {sap.m.ActionSelect} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSelect.prototype.addButton = function(vButton) { return new sap.m.ActionSelect(); };

/**
 * Creates a new subclass of class sap.m.ActionSelect with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Select.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Id of the element which is the current target of the <code>buttons</code> association, or null
 * 
 * Buttons to be added to the ActionSelect content.
 * @return {sap.m.Button[]}
 * @public
 * 
 */
sap.m.ActionSelect.prototype.getButtons = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ActionSelect.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ActionSelect.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Called after the ActionSelect picker pop-up is render.
 * @override
 * @protected
 * 
 */
sap.m.ActionSelect.prototype.onAfterRenderingPicker = function() {  };

/**
 * Remove all buttons from the ActionSelect.
 * @returns {string[]} An array with the ids of the removed elements (might be empty).
 * @public
 * 
 */
sap.m.ActionSelect.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Button to be removed from the ActionSelect content.
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id.
 * @returns {string} The id of the removed button or null.
 * @public
 * 
 */
sap.m.ActionSelect.prototype.removeButton = function(vButton) { return ""; };


// ---- sap.m.ActionSheet --------------------------------------------------------------------------

/**
 * Constructor for a new ActionSheet.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: true)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:cancelButtonTap cancelButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancelButtonPress cancelButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.9.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet = function(sId,mSettings) {};
/**
 * This event will be fired after the ActionSheet is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the ActionSheet is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the ActionSheet is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the ActionSheet is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.cancelButtonPress = function(oControlEvent) {  };

/**
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.
 * @event
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the cancelButtonPress event instead.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.cancelButtonTap = function(oControlEvent) {  };

/**
 * Adds some button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to add; to add; if empty, nothing is inserted
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.addButton = function(oButton) { return new sap.m.ActionSheet(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br> itself.
 * 
 * This event will be fired after the ActionSheet is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br> itself.
 * 
 * This event will be fired after the ActionSheet is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br> itself.
 * 
 * This event will be fired before the ActionSheet is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br> itself.
 * 
 * This event will be fired before the ActionSheet is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br> itself.
 * 
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachCancelButtonPress = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br> itself.
 * 
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the cancelButtonPress event instead.
 * 
 */
sap.m.ActionSheet.prototype.attachCancelButtonTap = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Calling this method will make the ActionSheet disappear from the screen.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet.prototype.close = function() { return null; };

/**
 * Destroys all the buttons in the aggregation
 * named <code>buttons</code>.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.destroyButtons = function() { return new sap.m.ActionSheet(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachCancelButtonPress = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the cancelButtonPress event instead.
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachCancelButtonTap = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionSheet.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireAfterClose = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * Fire event afterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireAfterOpen = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * Fire event beforeClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireBeforeClose = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * Fire event beforeOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * Fire event cancelButtonPress to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireCancelButtonPress = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * Fire event cancelButtonTap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the cancelButtonPress event instead.
 * 
 */
sap.m.ActionSheet.prototype.fireCancelButtonTap = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
 * @return {sap.m.Button[]}
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getButtons = function() { return new Array(); };

/**
 * Getter for property <code>cancelButtonText</code>.
 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getCancelButtonText = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.ActionSheet.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ActionSheet.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>placement</code>.
 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Bottom.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Getter for property <code>showCancelButton</code>.
 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getShowCancelButton = function() { return false; };

/**
 * Getter for property <code>title</code>.
 * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ActionSheet.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.insertButton = function(oButton,iIndex) { return new sap.m.ActionSheet(); };

/**
 * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.
 * @type boolean
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet.prototype.isOpen = function() { return false; };

/**
 * Calling this method will make the ActionSheet visible on the screen.
 * @param {object} oControl
 *         The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet.prototype.openBy = function(oControl) { return null; };

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ActionSheet.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 * @param {int | string | sap.m.Button} vButton the buttonto remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * 
 */
sap.m.ActionSheet.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Setter for property <code>cancelButtonText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sCancelButtonText new value for property <code>cancelButtonText</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setCancelButtonText = function(sCancelButtonText) { return new sap.m.ActionSheet(); };

/**
 * Setter for property <code>placement</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.PlacementType} sPlacement new value for property <code>placement</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setPlacement = function(sPlacement) { return new sap.m.ActionSheet(); };

/**
 * Setter for property <code>showCancelButton</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowCancelButton new value for property <code>showCancelButton</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setShowCancelButton = function(bShowCancelButton) { return new sap.m.ActionSheet(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setTitle = function(sTitle) { return new sap.m.ActionSheet(); };


// ---- sap.m.App --------------------------------------------------------------------------

/**
 * Constructor for a new App.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
 * It also adds certain header tags to the HTML page which are considered useful for mobile apps.
 * @extends sap.m.NavContainer
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.App = function(sId,mSettings) {};
/**
 * Fired when the orientation (portrait/landscape) of the device is changed.
 * @event
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.landscape Whether the device is in landscape orientation.
 * @public
 * 
 */
sap.m.App.prototype.orientationChange = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.App</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.App</code>.<br> itself.
 * 
 * Fired when the orientation (portrait/landscape) of the device is changed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.App</code>.<br/> itself.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.attachOrientationChange = function(oData,fnFunction,oListener) { return new sap.m.App(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.App</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @public
 * 
 */
sap.m.App.prototype.detachOrientationChange = function(fnFunction,oListener) { return new sap.m.App(); };

/**
 * Creates a new subclass of class sap.m.App with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NavContainer.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.App.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code>Whether the device is in landscape orientation.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.fireOrientationChange = function(mArguments) { return new sap.m.App(); };

/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>backgroundColor</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundColor = function() { return ""; };

/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 * 
 * Default value is <code>1</code>
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundRepeat = function() { return false; };

/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 * 
 * Default value is <code>undefined</code>
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * 
 */
sap.m.App.prototype.getHomeIcon = function() { return null; };

/**
 * Returns a metadata object for class sap.m.App.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.App.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for property <code>backgroundColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sBackgroundColor new value for property <code>backgroundColor</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.App(); };

/**
 * Setter for property <code>backgroundImage</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sBackgroundImage new value for property <code>backgroundImage</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.App(); };

/**
 * Setter for property <code>backgroundOpacity</code>.
 * 
 * Default value is <code>1</code>.
 * @param {float} fBackgroundOpacity new value for property <code>backgroundOpacity</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.App(); };

/**
 * Setter for property <code>backgroundRepeat</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bBackgroundRepeat new value for property <code>backgroundRepeat</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.App(); };

/**
 * Setter for property <code>homeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {any} oHomeIcon new value for property <code>homeIcon</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.App.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.App(); };


// ---- sap.m.BackgroundDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.BackgroundDesign.toString = function() { return ""; };

// ---- sap.m.BackgroundHelper --------------------------------------------------------------------------

/**
 * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.
 * To be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().
 * @param {sap.ui.core.RenderManager} rm the RenderManager
 * @param {String} [sBgColor] a configured custom background color for the control, if any
 * @param {sap.ui.core.URI} [sBgImgUrl] the configured custom background image for the control, if any
 * @protected
 * 
 * @memberof sap.m.BackgroundHelper
 */
sap.m.BackgroundHelper.prototype.addBackgroundColorStyles = function(rm,sBgColor,sBgImgUrl) {  };

/**
 * Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.
 * Should be called right after the opening root tag has been completed, so this is the first child element inside the control.
 * @param rm the RenderManager
 * @param {sap.ui.core.Control} oControl the control within which the tag will be rendered; its ID will be used to generate the element ID
 * @param {String}  sCssClass a css class to add to the element
 * @param {sap.ui.core.URI}  [sBgImgUrl] the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.
 * @param {boolean} [bRepeat] whether the background image should be repeated/tiled (or stretched)
 * @param {float}   [fOpacity] the background image opacity, if any
 * @protected
 * 
 * @memberof sap.m.BackgroundHelper
 */
sap.m.BackgroundHelper.prototype.renderBackgroundImageTag = function(rm,oControl,sCssClass,sBgImgUrl,bRepeat,fOpacity) {  };


// ---- sap.m.Bar --------------------------------------------------------------------------

/**
 * Constructor for a new Bar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li>
 * <li>{@link #getDesign design} : sap.m.BarDesign</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A bar that may be used as a header of a page. It has the capability to center a content like a title, while having few controls on the left and right side.
 * @extends sap.ui.core.Control
 * @implements sap.m.IBar
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Bar = function(sId,mSettings) {};
/**
 * Sets classes and tag according to the context in the page. Possible contexts are header, footer, subheader.
 * @returns {sap.m.IBar} this for chaining
 * @protected
 * 
 */
sap.m.Bar.prototype.applyTagAndContextClassFor = undefined

/**
 * Gets the HTML tag of the root element.
 * @returns {sap.m.IBarHTMLTag} the HTML-tag
 * @protected
 * 
 */
sap.m.Bar.prototype.getHTMLTag = undefined

/**
 * Determines whether the bar is sensitive to the container context.
 * 
 * Implementation of the IBar interface.
 * @returns {boolean} isContextSensitive
 * @protected
 * 
 */
sap.m.Bar.prototype.isContextSensitive = undefined

/**
 * Sets the HTML tag of the root element.
 * @param {sap.m.IBarHTMLTag} sTag
 * @returns {sap.m.IBar} this for chaining
 * @protected
 * 
 */
sap.m.Bar.prototype.setHTMLTag = undefined

/**
 * Adds some contentLeft into the aggregation named <code>contentLeft</code>.
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to add; to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.addContentLeft = function(oContentLeft) { return new sap.m.Bar(); };

/**
 * Adds some contentMiddle into the aggregation named <code>contentMiddle</code>.
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to add; to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.addContentMiddle = function(oContentMiddle) { return new sap.m.Bar(); };

/**
 * Adds some contentRight into the aggregation named <code>contentRight</code>.
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to add; to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.addContentRight = function(oContentRight) { return new sap.m.Bar(); };

/**
 * Destroys all the contentLeft in the aggregation
 * named <code>contentLeft</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentLeft = function() { return new sap.m.Bar(); };

/**
 * Destroys all the contentMiddle in the aggregation
 * named <code>contentMiddle</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentMiddle = function() { return new sap.m.Bar(); };

/**
 * Destroys all the contentRight in the aggregation
 * named <code>contentRight</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentRight = function() { return new sap.m.Bar(); };

/**
 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Bar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>contentLeft</code>.<br/>
 * this is the left content area, usually containing a button or an app icon. If this is overlapped by the right content, its content will disappear and text will show an elipsis.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Bar.prototype.getContentLeft = function() { return new Array(); };

/**
 * Getter for aggregation <code>contentMiddle</code>.<br/>
 * This is the middle content area. Controls such as label, segmented buttons or select should be placed here. Content that is placed here will be centrally positioned, if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Bar.prototype.getContentMiddle = function() { return new Array(); };

/**
 * Getter for aggregation <code>contentRight</code>.<br/>
 * this is the right content area. Controls such as action buttons or search field could be placed here.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Bar.prototype.getContentRight = function() { return new Array(); };

/**
 * Getter for property <code>design</code>.
 * The design of the bar. If set to auto it is dependent on the place, where the bar is placed.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.BarDesign} the value of property <code>design</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Bar.prototype.getDesign = function() { return new sap.m.BarDesign(); };

/**
 * Getter for property <code>enableFlexBox</code>.
 * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>enableFlexBox</code>
 * @deprecated Since version 1.16. 
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * @public
 * 
 */
sap.m.Bar.prototype.getEnableFlexBox = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Bar.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Bar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>translucent</code>.
 * A boolean value indicating whether the bar is partially translucent.
 * It is only applied for touch devices.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>translucent</code>
 * @since 1.12
 * @deprecated Since version 1.18.6. 
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * @public
 * 
 */
sap.m.Bar.prototype.getTranslucent = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * Determines whether the control is visible or not. If set to false, the bar will be rendered invisible.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Bar.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentLeft</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContentLeft the contentLeft whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentLeft = function(oContentLeft) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentMiddle</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContentMiddle the contentMiddle whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentMiddle = function(oContentMiddle) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentRight</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContentRight the contentRight whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentRight = function(oContentRight) { return 0; };

/**
 * Inserts a contentLeft into the aggregation named <code>contentLeft</code>.
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the contentLeft should be inserted at; for
 *              a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the contentLeft is inserted at
 *              the last position
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentLeft = function(oContentLeft,iIndex) { return new sap.m.Bar(); };

/**
 * Inserts a contentMiddle into the aggregation named <code>contentMiddle</code>.
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for
 *              a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the contentMiddle is inserted at
 *              the last position
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentMiddle = function(oContentMiddle,iIndex) { return new sap.m.Bar(); };

/**
 * Inserts a contentRight into the aggregation named <code>contentRight</code>.
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the contentRight should be inserted at; for
 *              a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the contentRight is inserted at
 *              the last position
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentRight = function(oContentRight,iIndex) { return new sap.m.Bar(); };

/**
 * Removes all the controls in the aggregation named <code>contentLeft</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentLeft = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>contentMiddle</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentMiddle = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>contentRight</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentRight = function() { return new Array(); };

/**
 * Removes an contentLeft from the aggregation named <code>contentLeft</code>.
 * @param {int | string | sap.ui.core.Control} vContentLeft the contentLeftto remove or its index or id
 * @return {sap.ui.core.Control} the removed contentLeft or null
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentLeft = function(vContentLeft) { return new sap.ui.core.Control(); };

/**
 * Removes an contentMiddle from the aggregation named <code>contentMiddle</code>.
 * @param {int | string | sap.ui.core.Control} vContentMiddle the contentMiddleto remove or its index or id
 * @return {sap.ui.core.Control} the removed contentMiddle or null
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentMiddle = function(vContentMiddle) { return new sap.ui.core.Control(); };

/**
 * Removes an contentRight from the aggregation named <code>contentRight</code>.
 * @param {int | string | sap.ui.core.Control} vContentRight the contentRightto remove or its index or id
 * @return {sap.ui.core.Control} the removed contentRight or null
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentRight = function(vContentRight) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>design</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.BarDesign} sDesign new value for property <code>design</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.Bar.prototype.setDesign = function(sDesign) { return new sap.m.Bar(); };

/**
 * Setter for property <code>enableFlexBox</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableFlexBox new value for property <code>enableFlexBox</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16. 
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * @public
 * 
 */
sap.m.Bar.prototype.setEnableFlexBox = function(bEnableFlexBox) { return new sap.m.Bar(); };

/**
 * Setter for property <code>translucent</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bTranslucent new value for property <code>translucent</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @since 1.12
 * @deprecated Since version 1.18.6. 
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * @public
 * 
 */
sap.m.Bar.prototype.setTranslucent = function(bTranslucent) { return new sap.m.Bar(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.Bar.prototype.setVisible = function(bVisible) { return new sap.m.Bar(); };


// ---- sap.m.BarDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.BarDesign.toString = function() { return ""; };

// ---- sap.m.BusyDialog --------------------------------------------------------------------------

/**
 * Constructor for a new BusyDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: 30px)</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Busy Dialog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.BusyDialog = function(sId,mSettings) {};
/**
 * This event will be fired when the busy dialog is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.cancelPressed this parameter is for an app to differ for a "close" event if it was fired because user pressed cancel button or because the operation was terminated.
 * This parameter is set to true if the close event is fired by user interaction.
 * @public
 * 
 */
sap.m.BusyDialog.prototype.close = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.BusyDialog</code>.<br> itself.
 * 
 * This event will be fired when the busy dialog is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code>.<br/> itself.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.m.BusyDialog(); };

/**
 * Close the busy popup.
 * @type sap.m.BusyDialog
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.BusyDialog.prototype.close = function() { return new sap.m.BusyDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.detachClose = function(fnFunction,oListener) { return new sap.m.BusyDialog(); };

/**
 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.BusyDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event close to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'cancelPressed' of type <code>boolean</code>this parameter is for an app to differ for a "close" event if it was fired because user pressed cancel button or because the operation was terminated.
 * This parameter is set to true if the close event is fired by user interaction.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.BusyDialog.prototype.fireClose = function(mArguments) { return new sap.m.BusyDialog(); };

/**
 * Getter for property <code>cancelButtonText</code>.
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCancelButtonText = function() { return ""; };

/**
 * Getter for property <code>customIcon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconDensityAware = function() { return false; };

/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 * 
 * Default value is <code>44px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.
 * 
 * Default value is <code>1000</code>
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconRotationSpeed = function() { return 0; };

/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 * 
 * Default value is <code>30px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.BusyDialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.BusyDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showCancelButton</code>.
 * A cancel button will be rendered inside the busy dialog if this property is set to true.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getShowCancelButton = function() { return false; };

/**
 * Getter for property <code>text</code>.
 * Optional text shown inside the popup.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>title</code>.
 * Sets a title to the busy dialog. Default is no title.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getTitle = function() { return ""; };

/**
 * Opens the busy popup.
 * @type sap.m.BusyDialog
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.BusyDialog.prototype.open = function() { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>cancelButtonText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sCancelButtonText new value for property <code>cancelButtonText</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCancelButtonText = function(sCancelButtonText) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>customIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sCustomIcon new value for property <code>customIcon</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>customIconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bCustomIconDensityAware new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconDensityAware = function(bCustomIconDensityAware) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>customIconHeight</code>.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconHeight new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconHeight = function(sCustomIconHeight) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>customIconRotationSpeed</code>.
 * 
 * Default value is <code>1000</code>.
 * @param {int} iCustomIconRotationSpeed new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconRotationSpeed = function(iCustomIconRotationSpeed) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>customIconWidth</code>.
 * 
 * Default value is <code>30px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconWidth new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconWidth = function(sCustomIconWidth) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>showCancelButton</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowCancelButton new value for property <code>showCancelButton</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setShowCancelButton = function(bShowCancelButton) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setText = function(sText) { return new sap.m.BusyDialog(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setTitle = function(sTitle) { return new sap.m.BusyDialog(); };


// ---- sap.m.BusyIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new BusyIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDesign design} : string (default: auto)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Control to indicate that the system is busy with some task and the user has to wait.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.BusyIndicator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.BusyIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>customIcon</code>.
 * Icon URL if an icon is used as the busy indicator.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconDensityAware = function() { return false; };

/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 * 
 * Default value is <code>44px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.
 * 
 * Default value is <code>1000</code>
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconRotationSpeed = function() { return 0; };

/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 * 
 * Default value is <code>44px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>design</code>.
 * The design defines how the BusyIndicator should look like. There are 3 possibilities:
 * auto: automatically sets the design according to the context
 * dark: dark theme, useful within a light context
 * light: light theme, useful within a dark context
 * 
 * Default value is <code>auto</code>
 * @return {string} the value of property <code>design</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getDesign = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.BusyIndicator.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.BusyIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>size</code>.
 * Defines the size of the busy indicator.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the busy indicator (optional)
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Getter for property <code>visible</code>.
 * Set to false to make the control invisible.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getVisible = function() { return false; };

/**
 * Setter for property <code>customIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sCustomIcon new value for property <code>customIcon</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>customIconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bCustomIconDensityAware new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconDensityAware = function(bCustomIconDensityAware) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>customIconHeight</code>.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconHeight new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconHeight = function(sCustomIconHeight) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>customIconRotationSpeed</code>.
 * 
 * Default value is <code>1000</code>.
 * @param {int} iCustomIconRotationSpeed new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed = function(iCustomIconRotationSpeed) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>customIconWidth</code>.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconWidth new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconWidth = function(sCustomIconWidth) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>design</code>.
 * 
 * Default value is <code>auto</code>.
 * @param {string} sDesign new value for property <code>design</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setDesign = function(sDesign) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>size</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sSize new value for property <code>size</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setSize = function(sSize) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setText = function(sText) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>textDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection new value for property <code>textDirection</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setTextDirection = function(sTextDirection) { return new sap.m.BusyIndicator(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>
 * 
 * The default implementation of the "setVisible" function is enhanced 
 * in order to toggle the "visibility:hidden;" attribute over the control.
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setVisible = function(bVisible) { return new sap.m.BusyIndicator(); };


// ---- sap.m.Button --------------------------------------------------------------------------

/**
 * Constructor for a new Button.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Button = function(sId,mSettings) {};
/**
 * Event is fired when the user clicks on the control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Button.prototype.press = function(oControlEvent) {  };

/**
 * Event is fired when the user taps the control.
 * @event
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Button.prototype.tap = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association named <code>ariaDescribedBy</code>.
 * @param {string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; to add; if empty, nothing is inserted
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Button(); };

/**
 * Adds some ariaLabelledBy into the association named <code>ariaLabelledBy</code>.
 * @param {string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; to add; if empty, nothing is inserted
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Button(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Button</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br> itself.
 * 
 * Event is fired when the user clicks on the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Button</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br> itself.
 * 
 * Event is fired when the user taps the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * 
 */
sap.m.Button.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Button</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Button</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * @public
 * 
 */
sap.m.Button.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Button.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Button.prototype.firePress = function(mArguments) { return new sap.m.Button(); };

/**
 * Fire event tap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * 
 */
sap.m.Button.prototype.fireTap = function(mArguments) { return new sap.m.Button(); };

/**
 * Getter for property <code>activeIcon</code>.
 * The source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.Button.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Id of the element which is the current target of the <code>ariaDescribedBy</code> association, or null
 * 
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Button.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Id of the element which is the current target of the <code>ariaLabelledBy</code> association, or null
 * 
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Button.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Button.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.Button.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.Button.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * 
 */
sap.m.Button.prototype.getIconFirst = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Button.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Button.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Defines to which DOM reference the Popup should be docked
 * @protected
 * @return {DomNode} the DOM reference that Popup should dock to
 * 
 */
sap.m.Button.prototype.getPopupAnchorDomRef = function() { return null; };

/**
 * Getter for property <code>text</code>.
 * Button text
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Button.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>type</code>.
 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ButtonType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Button.prototype.getType = function() { return new sap.m.ButtonType(); };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the button.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Button.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Button.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Button.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedByto remove or its index or id
 * @return {sap.ui.core.Control} the removed ariaDescribedBy or null
 * @public
 * 
 */
sap.m.Button.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.Control(); };

/**
 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledByto remove or its index or id
 * @return {sap.ui.core.Control} the removed ariaLabelledBy or null
 * @public
 * 
 */
sap.m.Button.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>activeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sActiveIcon new value for property <code>activeIcon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.Button(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setEnabled = function(bEnabled) { return new sap.m.Button(); };

/**
 * Property setter for the icon
 * @param {sap.ui.core.URI} sIcon - new value of the Icon property
 * @return {sap.m.Button} this to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIcon = function(sIcon) { return new sap.m.Button(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.Button(); };

/**
 * Property setter for the icon first
 * @param {boolean} bIconFirst - true IFF the icon goes before the text
 * @return {sap.m.Button} this to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIconFirst = function(bIconFirst) { return new sap.m.Button(); };

/**
 * Property setter for the text
 * @param {string} sText - new value of the Text attribute
 * @return {sap.m.Button} this to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setText = function(sText) { return new sap.m.Button(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ButtonType} sType new value for property <code>type</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setType = function(sType) { return new sap.m.Button(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setWidth = function(sWidth) { return new sap.m.Button(); };


// ---- sap.m.ButtonType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ButtonType.toString = function() { return ""; };

// ---- sap.m.Carousel --------------------------------------------------------------------------

/**
 * Constructor for a new Carousel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getLoop loop} : boolean (default: false)</li>
 * <li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>
 * <li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType</li>
 * <li>{@link #getShowBusyIndicator showBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.CSSSize (default: 6em)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list. When displayed in a desktop browser, a left- and right-arrow button is displayed on the carousel's sides, which can be used to navigate through the carousel.
 * 
 * Note: when displa Internet Explorer 9, page changes are not animated.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Carousel = function(sId,mSettings) {};
/**
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
 * @event
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be loaded
 * @public
 * 
 */
sap.m.Carousel.prototype.loadPage = function(oControlEvent) {  };

/**
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.oldActivePageId Id of the page which was active before the page change.
 * @param {string} oControlEvent.getParameters.newActivePageId Id of the page which is active after the page change.
 * @public
 * 
 */
sap.m.Carousel.prototype.pageChanged = function(oControlEvent) {  };

/**
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.
 * @event
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be unloaded
 * @public
 * 
 */
sap.m.Carousel.prototype.unloadPage = function(oControlEvent) {  };

/**
 * Adds some page into the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *            oPage the page to add; to add; if empty, nothing is inserted
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.addPage = function(oPage) { return new sap.m.Carousel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br> itself.
 * 
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.attachLoadPage = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br> itself.
 * 
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.attachPageChanged = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br> itself.
 * 
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.attachUnloadPage = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Destroys all the pages in the aggregation
 * named <code>pages</code>.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.destroyPages = function() { return new sap.m.Carousel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @public
 * 
 */
sap.m.Carousel.prototype.detachLoadPage = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.detachPageChanged = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @public
 * 
 */
sap.m.Carousel.prototype.detachUnloadPage = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Carousel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event loadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code>Id of the page which will be loaded</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.fireLoadPage = function(mArguments) { return new sap.m.Carousel(); };

/**
 * Fire event pageChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldActivePageId' of type <code>string</code>Id of the page which was active before the page change.</li>
 * <li>'newActivePageId' of type <code>string</code>Id of the page which is active after the page change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Carousel.prototype.firePageChanged = function(mArguments) { return new sap.m.Carousel(); };

/**
 * Fire event unloadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code>Id of the page which will be unloaded</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.fireUnloadPage = function(mArguments) { return new sap.m.Carousel(); };

/**
 * Id of the element which is the current target of the <code>activePage</code> association, or null
 * 
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Carousel.prototype.getActivePage = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>busyIndicatorSize</code>.
 * Size of the busy indicators which can be displayed in the carousel.
 * 
 * Default value is <code>6em</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>busyIndicatorSize</code>
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @public
 * 
 */
sap.m.Carousel.prototype.getBusyIndicatorSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>height</code>.
 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>loop</code>.
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>loop</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getLoop = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Carousel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Carousel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>pageIndicatorPlacement</code>.
 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.PlacementType} the value of property <code>pageIndicatorPlacement</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getPageIndicatorPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content which the carousel displays.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Carousel.prototype.getPages = function() { return new Array(); };

/**
 * Getter for property <code>showBusyIndicator</code>.
 * Show or hide busy indicator in the carousel when loading pages after swipe.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showBusyIndicator</code>
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @public
 * 
 */
sap.m.Carousel.prototype.getShowBusyIndicator = function() { return false; };

/**
 * Getter for property <code>showPageIndicator</code>.
 * Show or hide carousel's page indicator.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showPageIndicator</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getShowPageIndicator = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Carousel.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * Inserts a page into the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *            oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the page should be inserted at; for
 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the page is inserted at
 *              the last position
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.insertPage = function(oPage,iIndex) { return new sap.m.Carousel(); };

/**
 * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
 * @type sap.m.Carousel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Carousel.prototype.next = function() { return new sap.m.Carousel(); };

/**
 * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.
 * @type sap.m.Carousel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Carousel.prototype.previous = function() { return new sap.m.Carousel(); };

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Carousel.prototype.removeAllPages = function() { return new Array(); };

/**
 * Removes an page from the aggregation named <code>pages</code>.
 * @param {int | string | sap.ui.core.Control} vPage the pageto remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * 
 */
sap.m.Carousel.prototype.removePage = function(vPage) { return new sap.ui.core.Control(); };

/**
 * Setter for the associated <code>activePage</code>.
 * @param {sap.ui.core.Control} oActivePage Id of an element which becomes the new target of this activePage association. Alternatively, an element instance may be given.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setActivePage = function(oActivePage) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>busyIndicatorSize</code>.
 * 
 * Default value is <code>6em</code>.
 * @param {sap.ui.core.CSSSize} sBusyIndicatorSize new value for property <code>busyIndicatorSize</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @public
 * 
 */
sap.m.Carousel.prototype.setBusyIndicatorSize = function(sBusyIndicatorSize) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setHeight = function(sHeight) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>loop</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bLoop new value for property <code>loop</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setLoop = function(bLoop) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>pageIndicatorPlacement</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.PlacementType} sPageIndicatorPlacement new value for property <code>pageIndicatorPlacement</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setPageIndicatorPlacement = function(sPageIndicatorPlacement) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>showBusyIndicator</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowBusyIndicator new value for property <code>showBusyIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @public
 * 
 */
sap.m.Carousel.prototype.setShowBusyIndicator = function(bShowBusyIndicator) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>showPageIndicator</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowPageIndicator new value for property <code>showPageIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setShowPageIndicator = function(bShowPageIndicator) { return new sap.m.Carousel(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setWidth = function(sWidth) { return new sap.m.Carousel(); };


// ---- sap.m.CheckBox --------------------------------------------------------------------------

/**
 * Constructor for a new CheckBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * CheckBox control
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CheckBox = function(sId,mSettings) {};
/**
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.selected Checks whether the CheckBox is flagged or not flagged.
 * @public
 * 
 */
sap.m.CheckBox.prototype.select = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.CheckBox</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.CheckBox</code>.<br> itself.
 * 
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code>.<br/> itself.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.CheckBox(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.CheckBox</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.CheckBox(); };

/**
 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CheckBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code>Checks whether the CheckBox is flagged or not flagged.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.CheckBox.prototype.fireSelect = function(mArguments) { return new sap.m.CheckBox(); };

/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getActiveHandling = function() { return false; };

/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user shall be allowed to select the check box
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @since 1.25
 * @public
 * 
 */
sap.m.CheckBox.prototype.getEditable = function() { return false; };

/**
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.CheckBox.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.CheckBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>selected</code>.
 * Contains the state of the control whether it is flagged with a check mark, or not
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getSelected = function() { return false; };

/**
 * Gets the tab index of the control
 * @return {integer} tabIndex for Checkbox
 * @since 1.22
 * @protected
 * 
 */
sap.m.CheckBox.prototype.getTabIndex = function() { return null; };

/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Getter for property <code>width</code>.
 * Width of Label
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>activeHandling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bActiveHandling new value for property <code>activeHandling</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setActiveHandling = function(bActiveHandling) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>editable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable new value for property <code>editable</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @since 1.25
 * @public
 * 
 */
sap.m.CheckBox.prototype.setEditable = function(bEditable) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setEnabled = function(bEnabled) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setName = function(sName) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>selected</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected new value for property <code>selected</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setSelected = function(bSelected) { return new sap.m.CheckBox(); };

/**
 * Sets the tab index of the control
 * @param {int} iTabIndex  greater than or equal -1
 * @return {sap.m.CheckBox}
 * @since 1.16
 * @protected
 * 
 */
sap.m.CheckBox.prototype.setTabIndex = function(iTabIndex) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setText = function(sText) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>textDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection new value for property <code>textDirection</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setTextDirection = function(sTextDirection) { return new sap.m.CheckBox(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setWidth = function(sWidth) { return new sap.m.CheckBox(); };


// ---- sap.m.Column --------------------------------------------------------------------------

/**
 * Constructor for a new Column.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHAlign hAlign} : sap.ui.core.TextAlign</li>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign</li>
 * <li>{@link #getStyleClass styleClass} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMinScreenWidth minScreenWidth} : string</li>
 * <li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>
 * <li>{@link #getPopinHAlign popinHAlign} : sap.ui.core.TextAlign</li>
 * <li>{@link #getPopinDisplay popinDisplay} : sap.m.PopinDisplay</li>
 * <li>{@link #getMergeDuplicates mergeDuplicates} : boolean (default: false)</li>
 * <li>{@link #getMergeFunctionName mergeFunctionName} : string (default: getText)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeader header} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The column allows to define column specific properties that will be applied when rendering the List.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Column = function(sId,mSettings) {};
/**
 * Determines whether box-sizing content-box works for columns or not
 * Native android browsers does not honour content-box for fixed table layout
 * https://bugs.webkit.org/show_bug.cgi?id=18565
 * @protected
 * @readonly
 * @static
 * 
 */
sap.m.Column.bContentBoxSupport = undefined

/**
 * Apply text alignment of the Column to Text/Label/Link...
 * 
 * TODO: This is so ugly to check content functions
 * instead we should document how to use our controls
 * to inherit text-alignment and we should add a new
 * sap.ui.core.TextAlign type called "Inherit"
 * @param {sap.ui.core.Control} oControl List control
 * @param {String} [sAlign] TextAlign enumeration
 * @return {sap.ui.core.Control} oControl
 * @protected
 * 
 */
sap.m.Column.prototype.applyAlignTo = function(oControl,sAlign) { return new sap.ui.core.Control(); };

/**
 * Clears the last value of the column if mergeDuplicates property is true
 * @returns {sap.m.Column}
 * @since 1.20.4
 * @protected
 * 
 */
sap.m.Column.prototype.clearLastValue = function() { return new sap.m.Column(); };

/**
 * Destroys the footer in the aggregation
 * named <code>footer</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.destroyFooter = function() { return new sap.m.Column(); };

/**
 * Destroys the header in the aggregation
 * named <code>header</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.destroyHeader = function() { return new sap.m.Column(); };

/**
 * Creates a new subclass of class sap.m.Column with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Column.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns CSS alignment according to column hAlign setting or given parameter
 * for Begin/End values checks the locale settings
 * @param {String} [sAlign] TextAlign enumeration
 * @return {String} left|center|right
 * @protected
 * 
 */
sap.m.Column.prototype.getCssAlign = function(sAlign) { return null; };

/**
 * Getter for property <code>demandPopin</code>.
 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
 * Setting this property to true, shows this column as pop-in instead of hiding it.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>demandPopin</code>
 * @public
 * 
 */
sap.m.Column.prototype.getDemandPopin = function() { return false; };

/**
 * Getter for aggregation <code>footer</code>.<br/>
 * Control to be displayed in the column footer.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Column.prototype.getFooter = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>hAlign</code>.
 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>hAlign</code>
 * @public
 * 
 */
sap.m.Column.prototype.getHAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Getter for aggregation <code>header</code>.<br/>
 * Control to be displayed in the column header.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Column.prototype.getHeader = function() { return new sap.ui.core.Control(); };

/**
 * Gets the initial order of the column
 * @returns {int} initial order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.getInitialOrder = function() { return 0; };

/**
 * Gets the last value of the column
 * @since 1.16
 * @protected
 * 
 */
sap.m.Column.prototype.getLastValue = function() {  };

/**
 * Getter for property <code>mergeDuplicates</code>.
 * Set "true" to merge repeating cells(duplicates) into one.
 * Also see "mergeFunctionName" property to customize.
 * Note: this property gets disabled if any column is in pop-in!
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>mergeDuplicates</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.Column.prototype.getMergeDuplicates = function() { return false; };

/**
 * Getter for property <code>mergeFunctionName</code>.
 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
 * Control itself uses this function to compare values of two repeating cells.
 * Default value "getText" is suitable for Label and Text control.
 * e.g. For "Icon" control "getSrc" can be used.
 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
 * 
 * Default value is <code>getText</code>
 * @return {string} the value of property <code>mergeFunctionName</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.Column.prototype.getMergeFunctionName = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.Column.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Column.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>minScreenWidth</code>.
 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
 * 
 * sap.m.Column.MediaQuery1->Range1 = 199
 * 
 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
 * Please also see "demandPopin" property
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>minScreenWidth</code>
 * @public
 * 
 */
sap.m.Column.prototype.getMinScreenWidth = function() { return ""; };

/**
 * Gets the order of the column
 * @returns {int} nOrder order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.getOrder = function() { return 0; };

/**
 * Getter for property <code>popinDisplay</code>.
 * Defines the display options of pop-in.
 * Possible values are
 * 1 - "Block"(Header is displayed in first line and value field in next line.)
 * 2 - "Inline" (Value field is displayed next to the header in same line.)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.PopinDisplay} the value of property <code>popinDisplay</code>
 * @since 1.13.2
 * @public
 * 
 */
sap.m.Column.prototype.getPopinDisplay = function() { return new sap.m.PopinDisplay(); };

/**
 * Getter for property <code>popinHAlign</code>.
 * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Controls with a text align do not inherit the horizontal alignment.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>popinHAlign</code>
 * @deprecated Since version 1.14. 
 * Use popinDisplay property instead.
 * @public
 * 
 */
sap.m.Column.prototype.getPopinHAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Getter for property <code>styleClass</code>.
 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * 
 */
sap.m.Column.prototype.getStyleClass = function() { return ""; };

/**
 * Getter for property <code>vAlign</code>.
 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
 * This property does not affect the vertical alignment of header and footer.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @public
 * 
 */
sap.m.Column.prototype.getVAlign = function() { return new sap.ui.core.VerticalAlign(); };

/**
 * Getter for property <code>visible</code>.
 * Specifies whether or not the column is visible. Invisible columns are not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Column.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Column.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks the column will be hidden
 * @protected
 * 
 */
sap.m.Column.prototype.isHidden = function() {  };

/**
 * Returns visible probability of the column
 * @param {boolean} [bReturnCache] Whether return cache or new result
 * @return {boolean}
 * @protected
 * 
 */
sap.m.Column.prototype.isNeverVisible = function(bReturnCache) { return false; };

/**
 * Checks the column will be shown as pop-in
 * @protected
 * 
 */
sap.m.Column.prototype.isPopin = function() {  };

/**
 * Gets called from the parent after all cells in column are rendered
 * @param {jQuery} $Table Table jQuery reference
 * @param {Boolean} [bAutoTableLayout] Table layout
 * @see sap.m.Column#bContentBoxSupport
 * @protected
 * 
 */
sap.m.Column.prototype.onColumnRendered = function($Table,bAutoTableLayout) {  };

/**
 * Gets called from the Table when the all items are removed
 * @since 1.16
 * @protected
 * 
 */
sap.m.Column.prototype.onItemsRemoved = function() {  };

/**
 * Setter for property <code>demandPopin</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDemandPopin new value for property <code>demandPopin</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setDemandPopin = function(bDemandPopin) { return new sap.m.Column(); };

/**
 * Display or hide the column from given table
 * This does not set the visibility property of the column
 * @param {Object} oTableDomRef Table DOM reference
 * @param {boolean} [bDisplay] whether visible or not
 * @protected
 * 
 */
sap.m.Column.prototype.setDisplay = function(oTableDomRef,bDisplay) {  };

/**
 * Display or hide the column from given table via checking media query changes
 * @param {Object} oTableDomRef Table DOM reference
 * @protected
 * 
 */
sap.m.Column.prototype.setDisplayViaMedia = function(oTableDomRef) {  };

/**
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.ui.core.Control} oFooter the footer to set
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setFooter = function(oFooter) { return new sap.m.Column(); };

/**
 * Setter for property <code>hAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextAlign} sHAlign new value for property <code>hAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setHAlign = function(sHAlign) { return new sap.m.Column(); };

/**
 * Setter for the aggregated <code>header</code>.
 * @param {sap.ui.core.Control} oHeader the header to set
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setHeader = function(oHeader) { return new sap.m.Column(); };

/**
 * Sets the visible column index
 * Negative index values can be used to clear
 * @param {int} nIndex index of the visible column
 * @protected
 * 
 */
sap.m.Column.prototype.setIndex = function(nIndex) {  };

/**
 * Sets the initial order of the column
 * @param {int} nOrder initial order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.setInitialOrder = function(nOrder) {  };

/**
 * Sets the last value of the column if mergeDuplicates property is true
 * @param {any} value Any Value
 * @returns {sap.m.Column}
 * @since 1.16
 * @protected
 * 
 */
sap.m.Column.prototype.setLastValue = function(value) { return new sap.m.Column(); };

/**
 * Setter for property <code>mergeDuplicates</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMergeDuplicates new value for property <code>mergeDuplicates</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Column.prototype.setMergeDuplicates = function(bMergeDuplicates) { return new sap.m.Column(); };

/**
 * Setter for property <code>mergeFunctionName</code>.
 * 
 * Default value is <code>getText</code>.
 * @param {string} sMergeFunctionName new value for property <code>mergeFunctionName</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Column.prototype.setMergeFunctionName = function(sMergeFunctionName) { return new sap.m.Column(); };

/**
 * Setter for property <code>minScreenWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sMinScreenWidth new value for property <code>minScreenWidth</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setMinScreenWidth = function(sMinScreenWidth) { return new sap.m.Column(); };

/**
 * Sets the order of the column
 * Does not do the visual effect
 * Table should be invalidate to re-render
 * @param {int} nOrder order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.setOrder = function(nOrder) {  };

/**
 * Setter for property <code>popinDisplay</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.PopinDisplay} sPopinDisplay new value for property <code>popinDisplay</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @since 1.13.2
 * @public
 * 
 */
sap.m.Column.prototype.setPopinDisplay = function(sPopinDisplay) { return new sap.m.Column(); };

/**
 * Setter for property <code>popinHAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextAlign} sPopinHAlign new value for property <code>popinHAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @deprecated Since version 1.14. 
 * Use popinDisplay property instead.
 * @public
 * 
 */
sap.m.Column.prototype.setPopinHAlign = function(sPopinHAlign) { return new sap.m.Column(); };

/**
 * Setter for property <code>styleClass</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sStyleClass new value for property <code>styleClass</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setStyleClass = function(sStyleClass) { return new sap.m.Column(); };

/**
 * Setter for property <code>vAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.VerticalAlign} sVAlign new value for property <code>vAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setVAlign = function(sVAlign) { return new sap.m.Column(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setVisible = function(bVisible) { return new sap.m.Column(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setWidth = function(sWidth) { return new sap.m.Column(); };


// ---- sap.m.ColumnListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ColumnListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ColumnListItem can be used to create rows for Table control.
 * Note: This control should not be used without Column definition in parent control.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ColumnListItem = function(sId,mSettings) {};
/**
 * Returns pop-in DOMRef as a jQuery Object
 * @protected
 * @since 1.26
 * 
 */
sap.m.ColumnListItem.prototype.$Popin = function() {  };

/**
 * Adds some cell into the aggregation named <code>cells</code>.
 * @param {sap.ui.core.Control}
 *            oCell the cell to add; to add; if empty, nothing is inserted
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.addCell = function(oCell) { return new sap.m.ColumnListItem(); };

/**
 * Binder for aggregation <code>cells</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.bindCells = function(oBindingInfo) { return new sap.m.ColumnListItem(); };

/**
 * Destroys all the cells in the aggregation
 * named <code>cells</code>.
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.destroyCells = function() { return new sap.m.ColumnListItem(); };

/**
 * Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ColumnListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>cells</code>.<br/>
 * Every item inside the cells aggregation defines one column of the row.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.getCells = function() { return new Array(); };

/**
 * Returns related list item from event which is coming from pop-in
 * @static
 * @protected
 * @since 1.26
 * @param {jQuery.Event} oEvent jQuery event object
 * @param {HTMLElement} oContainerDomRef max parent element to search in DOM to find pop-in
 * @returns {sap.m.ColumnListItem|undefined}
 * 
 */
sap.m.ColumnListItem.getItemByPopinEvent = function(oEvent,oContainerDomRef) { return new sap.m.ColumnListItem(); };

/**
 * Returns a metadata object for class sap.m.ColumnListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ColumnListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the tabbable DOM elements as a jQuery collection
 * When popin is available this separated dom should also be included
 * @returns {jQuery} jQuery object
 * @protected
 * @since 1.26
 * 
 */
sap.m.ColumnListItem.prototype.getTabbables = function() { return null; };

/**
 * Getter for property <code>vAlign</code>.
 * Sets the vertical alignment of the all cells in a table row(including selection and navigation). Possible values are "Inherit", "Top", "Middle", "Bottom"
 * Note: Column's "vAlign" property is stronger than this one.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @since 1.20
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.getVAlign = function() { return new sap.ui.core.VerticalAlign(); };

/**
 * Handles event delegation for pop-ins
 * @static
 * @protected
 * @param {jQuery.Event} oEvent jQuery event object
 * @param {HTMLElement} oContainerDomRef max parent element to search in DOM to find pop-in
 * @returns {sap.m.ColumnListItem|undefined} returns related list item when event handler is called
 * 
 */
sap.m.ColumnListItem.handleEvents = function(oEvent,oContainerDomRef) { return new sap.m.ColumnListItem(); };

/**
 * Determines whether control has pop-in or not
 * @protected
 * 
 */
sap.m.ColumnListItem.prototype.hasPopin = function() {  };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>cells</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.indexOfCell = function(oCell) { return 0; };

/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 * @param {sap.ui.core.Control}
 *            oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the cell should be inserted at; for
 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the cell is inserted at
 *              the last position
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.insertCell = function(oCell,iIndex) { return new sap.m.ColumnListItem(); };

/**
 * Checks whether popin is focused or not
 * @static
 * @protected
 * @param {jQuery.Event} oEvent jQuery event object
 * 
 */
sap.m.ColumnListItem.isPopinFocused = function(oEvent) {  };

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.removeAllCells = function() { return new Array(); };

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 * @param {int | string | sap.ui.core.Control} vCell the cellto remove or its index or id
 * @return {sap.ui.core.Control} the removed cell or null
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.removeCell = function(vCell) { return new sap.ui.core.Control(); };

/**
 * Pemove pop-in from DOM
 * @protected
 * 
 */
sap.m.ColumnListItem.prototype.removePopin = function() {  };

/**
 * Setter for property <code>vAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.VerticalAlign} sVAlign new value for property <code>vAlign</code>
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @since 1.20
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.setVAlign = function(sVAlign) { return new sap.m.ColumnListItem(); };

/**
 * Unbinder for aggregation <code>cells</code>.
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.unbindCells = function() { return new sap.m.ColumnListItem(); };


// ---- sap.m.ComboBox --------------------------------------------------------------------------

/**
 * Constructor for a new ComboBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ComboBoxBase#constructor sap.m.ComboBoxBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.
 * @extends sap.m.ComboBoxBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.22
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBox = function(sId,mSettings) {};
/**
 * Occurs when the user changes the selected item.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.ComboBox.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.m.ComboBox</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ComboBox</code>.<br> itself.
 * 
 * Occurs when the user changes the selected item.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ComboBox</code>.<br/> itself.
 * @return {sap.m.ComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ComboBox.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.ComboBox(); };

/**
 * Creates a picker.
 * To be overwritten by subclasses.
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker pop-up to be used.
 * @protected
 * 
 */
sap.m.ComboBox.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.m.ComboBox</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ComboBox.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.ComboBox(); };

/**
 * Creates a new subclass of class sap.m.ComboBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ComboBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event selectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code>The selected item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ComboBox} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ComboBox.prototype.fireSelectionChange = function(mArguments) { return new sap.m.ComboBox(); };

/**
 * Retrieves the default selected item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null}
 * @protected
 * 
 */
sap.m.ComboBox.prototype.getDefaultSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Returns a metadata object for class sap.m.ComboBox.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ComboBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Retrieves the selected item object from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * 
 */
sap.m.ComboBox.prototype.getSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>selectedItemId</code>.
 * Identifier of the selected item. If the identifier has no corresponding item, no changes will apply.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * 
 */
sap.m.ComboBox.prototype.getSelectedItemId = function() { return ""; };

/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item. If the key has no corresponding item, no changes will apply. If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * 
 */
sap.m.ComboBox.prototype.getSelectedKey = function() { return ""; };

/**
 * Removes all the controls in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea and clears the selection.
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.ComboBox.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.ComboBox.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Sets the start and end positions of the current text selection.
 * @param {integer} iSelectionStart The index into the text at which the first selected character is located.
 * @param {integer} iSelectionEnd The index into the text at which the last selected character is located.
 * @protected
 * @since 1.22.1
 * 
 */
sap.m.ComboBox.prototype.selectText = function(iSelectionStart,iSelectionEnd) {  };

/**
 * Setter for association <code>selectedItem</code>.
 * @param {string | sap.ui.core.Item | null} vItem new value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given or null.
 *    If the value of null is provided the first enabled item will be selected (if any).
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setSelectedItem = function(vItem) { return new sap.m.ComboBox(); };

/**
 * Setter for property <code>selectedItemId</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * If the provided <code>vItem</code> has a default value,
 * the first enabled item will be selected (if any).
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setSelectedItemId = function(vItem) { return new sap.m.ComboBox(); };

/**
 * Setter for property <code>selectedKey</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * If the provided <code>sKey</code> has a default value,
 * the first enabled item will be selected (if any).
 * In the case that an item has the default key value, it will be selected instead.
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setSelectedKey = function(sKey) { return new sap.m.ComboBox(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is empty/<code>undefined</code>.
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setValue = function(sValue) { return new sap.m.ComboBox(); };

/**
 * Synchronize selected item and key.
 * @protected
 * 
 */
sap.m.ComboBox.prototype.synchronizeSelection = function() {  };


// ---- sap.m.ComboBoxBase --------------------------------------------------------------------------

/**
 * Constructor for a new ComboBoxBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: 100%)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * An abstract class for ComboBoxes.
 * @extends sap.m.InputBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase = function(sId,mSettings) {};
/**
 * Adds some item <code>oItem</code> to the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item} oItem The item to add; if empty, nothing is added.
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.addItem = function(oItem) { return new sap.m.ComboBoxBase(); };

/**
 * Binder for aggregation <code>items</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ComboBoxBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.bindItems = function(oBindingInfo) { return new sap.m.ComboBoxBase(); };

/**
 * Closes the control's picker pop-up.
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.close = function() { return new sap.m.ComboBoxBase(); };

/**
 * Creates a picker.
 * To be overwritten by subclasses.
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker pop-up to be used.
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.destroyItems = function() { return new sap.m.ComboBox(); };

/**
 * Creates a new subclass of class sap.m.ComboBoxBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ComboBoxBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Retrieves the enabled items from the given array of items or from
 * this control's aggregation named <code>items</code>.
 * @param {sap.ui.core.Item[]} [aItems=getItems()] Items to filter.
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Retrieves the first item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item} The first item, or null if there are no items.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.getFirstItem = function() { return new sap.ui.core.Item(); };

/**
 * Retrieves the item from the aggregation named <code>items</code> at the given 0-based index.
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item} Item at the given index, or null if none.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item(); };

/**
 * Retrieves the item with the given key from the aggregation named <code>items</code>.
 * If duplicate keys exist, the first item matching the key is returned.
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item}
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of items to be displayed.
 * @return {sap.ui.core.Item[]}
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getItems = function() { return new Array(); };

/**
 * Retrieves the last item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item} The last item, or null if there are no items.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.getLastItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width of the text field. This value can be provided in %, em, px… and all CSS units.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.ComboBoxBase.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ComboBoxBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for the control's picker pop-up.
 * @returns {sap.m.Dialog | sap.m.Popover | null} The picker instance, creating it if necessary by calling <code>createPicker()</code> method.
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.getPicker = function() { return new sap.m.Dialog(); };

/**
 * Getter for property <code>_sPickerType</code>
 * @returns {string}
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.getPickerType = function() { return ""; };

/**
 * Getter for property <code>value</code>.
 * Defines the value of the control's input field.
 * 
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getValue = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts an item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item} oItem The item to insert; if empty, nothing is inserted.
 * @param {int} iIndex The <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at
 *             the last position.
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ComboBoxBase(); };

/**
 * Whether the control's picker pop-up is open. It returns true when the control's picker pop-up is currently open,
 * this includes opening and closing animations.
 * @returns {boolean} Determines whether the control's picker pop-up is currently open (this includes opening and closing animations).
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ComboBoxBase.prototype.isOpen = function() { return false; };

/**
 * Removes all the controls in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea and clears the selection.
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Setter for property <code>maxWidth</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth new value for property <code>maxWidth</code>
 * @return {sap.m.ComboBoxBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.ComboBoxBase(); };

/**
 * Setter for property <code>_sPickerType</code>.
 * @param {string} sPickerType
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.setPickerType = function(sPickerType) {  };

/**
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.ComboBoxBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.unbindItems = function() { return new sap.m.ComboBoxBase(); };


// ---- sap.m.CustomListItem --------------------------------------------------------------------------

/**
 * Constructor for a new CustomListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control with a content aggregation can be used to customize standard list items that we don't provide. List mode and ListItem type are applied to CustomListItems as well.
 * Note: Even the content aggregation allows any control, complex responsive layout controls (e.g. Table, Form) should not be aggregated as content.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CustomListItem = function(sId,mSettings) {};
/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.addContent = function(oContent) { return new sap.m.CustomListItem(); };

/**
 * Binder for aggregation <code>content</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.bindContent = function(oBindingInfo) { return new sap.m.CustomListItem(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.destroyContent = function() { return new sap.m.CustomListItem(); };

/**
 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this list item
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.CustomListItem.prototype.getContent = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.CustomListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.CustomListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.CustomListItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.CustomListItem(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.CustomListItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.CustomListItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Unbinder for aggregation <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.unbindContent = function() { return new sap.m.CustomListItem(); };


// ---- sap.m.CustomTile --------------------------------------------------------------------------

/**
 * Constructor for a new CustomTile.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Use the Custom Tile to show a application specific content in the tile.
 * The tile width is 8.5em and height is 10em
 * @extends sap.m.Tile
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CustomTile = function(sId,mSettings) {};
/**
 * Destroys the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomTile.prototype.destroyContent = function() { return new sap.m.CustomTile(); };

/**
 * Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Tile.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * Defines the Content of the CustomTile
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.CustomTile.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.m.CustomTile.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.CustomTile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent the content to set
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomTile.prototype.setContent = function(oContent) { return new sap.m.CustomTile(); };


// ---- sap.m.DatePicker --------------------------------------------------------------------------

/**
 * Constructor for a new DatePicker.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This is an date input control with a calendar DatePicker.
 * It internal uses the sap.ui.unified.Calendar. So the sap.ui.unified library should be loaded from applications using this control. (Otherwise it will be loaded by opening the DatePicker.)
 * @extends sap.m.InputBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DatePicker = function(sId,mSettings) {};
/**
 * This event gets fired when the input operation has finished and the value has changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input.
 * @param {boolean} oControlEvent.getParameters.valid Indicator for a valid date.
 * @public
 * 
 */
sap.m.DatePicker.prototype.change = function(oControlEvent) {  };

/**
 * Creates a new subclass of class sap.m.DatePicker with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DatePicker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the input.</li>
 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.DatePicker.prototype.fireChange = function(mArguments) { return new sap.m.DatePicker(); };

/**
 * Getter for property <code>dateValue</code>.
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 * If this property is used, the value property should not be changed from the caller.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>dateValue</code>
 * @public
 * 
 */
sap.m.DatePicker.prototype.getDateValue = function() { return new Object(); };

/**
 * Getter for property <code>displayFormat</code>.
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>displayFormat</code>
 * @public
 * 
 */
sap.m.DatePicker.prototype.getDisplayFormat = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.DatePicker.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.DatePicker.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>valueFormat</code>.
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * 
 */
sap.m.DatePicker.prototype.getValueFormat = function() { return ""; };

/**
 * Setter for property <code>dateValue</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oDateValue new value for property <code>dateValue</code>
 * @return {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setDateValue = function(oDateValue) { return new sap.m.DatePicker(); };

/**
 * Setter for property <code>displayFormat</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDisplayFormat new value for property <code>displayFormat</code>
 * @return {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.DatePicker(); };

/**
 * Setter for property <code>valueFormat</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValueFormat new value for property <code>valueFormat</code>
 * @return {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setValueFormat = function(sValueFormat) { return new sap.m.DatePicker(); };

/**
 * Defines the width of the DatePicker. Default value is 100%
 * @param {string} sWidth  new value for <code>width</code>
 * @returns {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setWidth = function(sWidth) { return new sap.m.DatePicker(); };


// ---- sap.m.DateRangeSelection --------------------------------------------------------------------------

/**
 * Constructor for a new DateRangeSelection.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDelimiter delimiter} : string (default: -)</li>
 * <li>{@link #getSecondDateValue secondDateValue} : object</li>
 * <li>{@link #getFrom from} : object</li>
 * <li>{@link #getTo to} : object</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.DatePicker#constructor sap.m.DatePicker}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This is a date range selection control. It internal uses the sap.ui.unified.Calendar. So the sap.ui.unified library should be loaded from applications using this control.
 * @extends sap.m.DatePicker
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DateRangeSelection = function(sId,mSettings) {};
/**
 * On change of date range event.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input.
 * @param {boolean} oControlEvent.getParameters.valid Indicator for a valid date.
 * @param {object} oControlEvent.getParameters.from Current starting date after change.
 * @param {object} oControlEvent.getParameters.to Current ending date after change.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.change = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.DateRangeSelection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.DateRangeSelection</code>.<br> itself.
 * 
 * Event thrown in case of change of date range.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.DateRangeSelection</code>.<br/> itself.
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.DateRangeSelection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.DateRangeSelection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.DateRangeSelection(); };

/**
 * Creates a new subclass of class sap.m.DateRangeSelection with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DateRangeSelection.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the input.</li>
 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
 * <li>'from' of type <code>object</code> Current starting date after change-</li>
 * <li>'to' of type <code>object</code> Current ending date after change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.fireChange = function(mArguments) { return new sap.m.DateRangeSelection(); };

/**
 * Getter for property <code>dateValue</code>.
 * 
 * Starting date of the range.
 * Default value is empty/undefined
 * @returns {object} the value of property secondDateValue
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.getDateValue = function() { return new Object(); };

/**
 * Getter for property <code>delimiter</code>.
 * Delimiter of starting and ending date. Default value is "-".
 * If no delimiter is given the one defined for the used locale is used.
 * 
 * Default value is <code>-</code>
 * @return {string} the value of property <code>delimiter</code>
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getDelimiter = function() { return ""; };

/**
 * Getter for property <code>from</code>.
 * Starting date of the range.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>from</code>
 * @deprecated Since version 1.22. 
 * Former property for starting date - since next release will be not supported. Use dateValue instead.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getFrom = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.DateRangeSelection.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.DateRangeSelection.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>secondDateValue</code>.
 * Ending date of the range.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>secondDateValue</code>
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getSecondDateValue = function() { return new Object(); };

/**
 * Getter for property <code>to</code>.
 * Ending date of the range.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>to</code>
 * @deprecated Since version 1.22. 
 * Former property for ending date - since next release will be not supported. Use secondDateValue instead.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getTo = function() { return new Object(); };

/**
 * Getter for property <code>valueFormat</code>.
 * 
 * Property <code>valueFormat</code> is not supported in <code>sap.m.DateRangeSelection</code> control.
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.getValueFormat = function() {  };

/**
 * Setter for property <code>dateValue</code>.
 * 
 * Starting date of the range.
 * Default value is empty/undefined
 * @param {object} oDateValue new value for property dateValue
 * @returns {sap.m.DateRangeSelection} <code>this</code> to allow method chaining.
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.setDateValue = function(oDateValue) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>delimiter</code>.
 * 
 * Default value is <code>-</code>.
 * @param {string} sDelimiter new value for property <code>delimiter</code>
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setDelimiter = function(sDelimiter) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>from</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oFrom new value for property <code>from</code>
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @deprecated Since version 1.22. 
 * Former property for starting date - since next release will be not supported. Use dateValue instead.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setFrom = function(oFrom) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>secondDateValue</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oSecondDateValue new value for property <code>secondDateValue</code>
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setSecondDateValue = function(oSecondDateValue) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>to</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oTo new value for property <code>to</code>
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @deprecated Since version 1.22. 
 * Former property for ending date - since next release will be not supported. Use secondDateValue instead.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setTo = function(oTo) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>valueFormat</code>.
 * 
 * Property <code>valueFormat</code> is not supported in <code>sap.m.DateRangeSelection</code> control.
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.setValueFormat = function() {  };


// ---- sap.m.DateTimeInput --------------------------------------------------------------------------

/**
 * Constructor for a new DateTimeInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.DateTimeInputType</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Allows end users to interact with date and/or time and select from a date and/or time pad.
 * Note: Since 1.22, this control should not be used as a date picker(type property "Date"), instead please use dedicated sap.m.DatePicker control.
 * @extends sap.m.InputBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.9.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DateTimeInput = function(sId,mSettings) {};
/**
 * This event gets fired when the selection has finished and the value has changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The string value of the control in given valueFormat(or locale format).
 * @param {object} oControlEvent.getParameters.dateValue The value of control as JavaScript Date Object or null if value is empty.
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.change = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.DateTimeInput</code>.<br> itself.
 * 
 * This event gets fired when the selection has finished and the value has changed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code>.<br/> itself.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.DateTimeInput(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.DateTimeInput(); };

/**
 * Creates a new subclass of class sap.m.DateTimeInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DateTimeInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The string value of the control in given valueFormat(or locale format).</li>
 * <li>'dateValue' of type <code>object</code>The value of control as JavaScript Date Object or null if value is empty.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.DateTimeInput.prototype.fireChange = function(mArguments) { return new sap.m.DateTimeInput(); };

/**
 * Getter for property <code>dateValue</code>.
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>dateValue</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getDateValue = function() { return new Object(); };

/**
 * Getter for property <code>displayFormat</code>.
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.
 * If user browser supports native picker then this property is overwritten by browser with locale settings.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>displayFormat</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getDisplayFormat = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.DateTimeInput.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.DateTimeInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>type</code>.
 * Type of DateTimeInput (e.g. Date, Time, DateTime)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.DateTimeInputType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getType = function() { return new sap.m.DateTimeInputType(); };

/**
 * Getter for property <code>valueFormat</code>.
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can only set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getValueFormat = function() { return ""; };

/**
 * <pre>
 * Getter for property <code>width</code>. Defines the width of the DateTimeInput, this value can be provided in %, em, px… and all possible CSS units.
 * 
 * Default value is 100%
 * </pre>
 * @public
 * @overwrite sap.m.InputBase#getWidth
 * @returns {sap.ui.core.CSSSize} the value of property width
 * 
 */
sap.m.DateTimeInput.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>dateValue</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oDateValue new value for property <code>dateValue</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setDateValue = function(oDateValue) { return new sap.m.DateTimeInput(); };

/**
 * Setter for property <code>displayFormat</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDisplayFormat new value for property <code>displayFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.DateTimeInput(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.DateTimeInputType} sType new value for property <code>type</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setType = function(sType) { return new sap.m.DateTimeInput(); };

/**
 * <pre>
 * This function can be used to assign new value and this is relevant with <code>valueFormat</code> property(see valueFormat) but independent from what is going to display on the field(see displayFormat).
 * Another way to assign new value is using dateValue property in JsView(see dateValue).
 * If you use both at the same time, latter wins.
 * 
 * Also "Now" literal can be assigned as a parameter to show the current date and/or time.
 * </pre>
 * @public
 * @see sap.m.DateTimeInput#getValueFormat
 * @see sap.m.DateTimeInput#getDisplayFormat
 * @see sap.m.DateTimeInput#getDateValue
 * @param {string} sValue new value for property <code>value</code>
 * @returns {sap.m.DateTimeInput} this to allow method chaining
 * 
 */
sap.m.DateTimeInput.prototype.setValue = function(sValue) { return new sap.m.DateTimeInput(); };

/**
 * Setter for property <code>valueFormat</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValueFormat new value for property <code>valueFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setValueFormat = function(sValueFormat) { return new sap.m.DateTimeInput(); };

/**
 * <pre>
 * Setter for property <code>width</code>
 * 
 * Default value is 100%
 * </pre>
 * @public
 * @overwrite sap.m.InputBase#setWidth
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @returns {sap.m.DateTimeInput} this to allow method chaining
 * 
 */
sap.m.DateTimeInput.prototype.setWidth = function(sWidth) { return new sap.m.DateTimeInput(); };


// ---- sap.m.DateTimeInputType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DateTimeInputType.toString = function() { return ""; };

// ---- sap.m.Dialog --------------------------------------------------------------------------

/**
 * Constructor for a new Dialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getType type} : sap.m.DialogType</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState</li>
 * <li>{@link #getStretchOnPhone stretchOnPhone} : boolean (default: false)</li>
 * <li>{@link #getStretch stretch} : boolean (default: false)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.IBar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog = function(sId,mSettings) {};
/**
 * This event will be fired after the dialog is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 * 
 */
sap.m.Dialog.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the dialog is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Dialog.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the dialog is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 * 
 */
sap.m.Dialog.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the dialog is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Dialog.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Returns the custom header instance when the customHeader aggregation is set. Otherwise it returns the internal managed
 * header instance. This method can be called within composite controls which use sap.m.Dialog inside.
 * @protected
 * 
 */
sap.m.Dialog.prototype._getAnyHeader = function() {  };

/**
 * Adds some button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to add; to add; if empty, nothing is inserted
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.addButton = function(oButton) { return new sap.m.Dialog(); };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.addContent = function(oContent) { return new sap.m.Dialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br> itself.
 * 
 * This event will be fired after the dialog is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br> itself.
 * 
 * This event will be fired after the dialog is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br> itself.
 * 
 * This event will be fired before the dialog is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br> itself.
 * 
 * This event will be fired before the dialog is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Close the dialog.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog.prototype.close = function() { return null; };

/**
 * Destroys the beginButton in the aggregation
 * named <code>beginButton</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyBeginButton = function() { return new sap.m.Dialog(); };

/**
 * Destroys all the buttons in the aggregation
 * named <code>buttons</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyButtons = function() { return new sap.m.Dialog(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyContent = function() { return new sap.m.Dialog(); };

/**
 * Destroys the customHeader in the aggregation
 * named <code>customHeader</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyCustomHeader = function() { return new sap.m.Dialog(); };

/**
 * Destroys the endButton in the aggregation
 * named <code>endButton</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyEndButton = function() { return new sap.m.Dialog(); };

/**
 * Destroys the subHeader in the aggregation
 * named <code>subHeader</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.12.2
 * @public
 * 
 */
sap.m.Dialog.prototype.destroySubHeader = function() { return new sap.m.Dialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Dialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code>This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireAfterClose = function(mArguments) { return new sap.m.Dialog(); };

/**
 * Fire event afterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireAfterOpen = function(mArguments) { return new sap.m.Dialog(); };

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code>This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireBeforeClose = function(mArguments) { return new sap.m.Dialog(); };

/**
 * Fire event beforeOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.Dialog(); };

/**
 * Getter for aggregation <code>beginButton</code>.<br/>
 * The button which is rendered to the left side (right side in RTL mode) of the endButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the endButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the endButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
 * @return {sap.m.Button}
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getBeginButton = function() { return new sap.m.Button(); };

/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Buttons can be added to the footer area of dialog through this aggregation. When this aggregation is set, any change to beginButton and endButton has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.
 * @return {sap.m.Button[]}
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getButtons = function() { return new Array(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the dialog.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Dialog.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>contentHeight</code>.
 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @since 1.12.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>contentWidth</code>.
 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width when runs on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @since 1.12.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * CustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.
 * @return {sap.m.IBar}
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getCustomHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for aggregation <code>endButton</code>.<br/>
 * The button which is rendered to the right side (left side in RTL mode) of the beginButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the beginButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the beginButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
 * @return {sap.m.Button}
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getEndButton = function() { return new sap.m.Button(); };

/**
 * Getter for property <code>horizontalScrolling</code>.
 * This property indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getHorizontalScrolling = function() { return false; };

/**
 * Getter for property <code>icon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.Dialog.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * 
 * Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.
 * @return {sap.ui.core.Control}
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Dialog.prototype.getInitialFocus = function() { return new sap.ui.core.Control(); };

/**
 * Id of the element which is the current target of the <code>leftButton</code> association, or null
 * 
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.
 * @return {sap.m.Button}
 * @deprecated Since version 1.15.1. 
 * 
 * LeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * @public
 * 
 */
sap.m.Dialog.prototype.getLeftButton = function() { return new sap.m.Button(); };

/**
 * Returns a metadata object for class sap.m.Dialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Dialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Id of the element which is the current target of the <code>rightButton</code> association, or null
 * 
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.
 * @return {sap.m.Button}
 * @deprecated Since version 1.15.1. 
 * 
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * @public
 * 
 */
sap.m.Dialog.prototype.getRightButton = function() { return new sap.m.Button(); };

/**
 * Getter for property <code>showHeader</code>.
 * This property decides whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getShowHeader = function() { return false; };

/**
 * Getter for property <code>state</code>.
 * State affects the icon and the title color. If other than None is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is None which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Dialog.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>stretch</code>.
 * When this property is set to true, the dialog is stretched to a full screen display. This property is only applicable to standard dialog and message type dialog ignores this property.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>stretch</code>
 * @since 1.13.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getStretch = function() { return false; };

/**
 * Getter for property <code>stretchOnPhone</code>.
 * When it's set to true, the dialog will be full screen when it runs on a phone.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>stretchOnPhone</code>
 * @since 1.11.2
 * @deprecated Since version 1.13.1. 
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * @public
 * 
 */
sap.m.Dialog.prototype.getStretchOnPhone = function() { return false; };

/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * @return {sap.m.IBar}
 * @since 1.12.2
 * @public
 * 
 */
sap.m.Dialog.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for property <code>title</code>.
 * Title text appears in the dialog header.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Dialog.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>type</code>.
 * The type of the dialog. In theme sap_bluecrystal, the type message will limit the dialog's width within 480px when runs on tablet and desktop.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.DialogType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Dialog.prototype.getType = function() { return new sap.m.DialogType(); };

/**
 * Getter for property <code>verticalScrolling</code>.
 * This property indicates if user can scroll vertically inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Dialog.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.insertButton = function(oButton,iIndex) { return new sap.m.Dialog(); };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Dialog(); };

/**
 * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.
 * @type boolean
 * @public
 * @since 1.9.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog.prototype.isOpen = function() { return false; };

/**
 * Open the dialog.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog.prototype.open = function() { return null; };

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 * @param {int | string | sap.m.Button} vButton the buttonto remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Dialog.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Dialog.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.m.Button} oBeginButton the beginButton to set
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setBeginButton = function(oBeginButton) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>contentHeight</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentHeight new value for property <code>contentHeight</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.12.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setContentHeight = function(sContentHeight) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>contentWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentWidth new value for property <code>contentWidth</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.12.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setContentWidth = function(sContentWidth) { return new sap.m.Dialog(); };

/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.IBar} oCustomHeader the customHeader to set
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Dialog(); };

/**
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.m.Button} oEndButton the endButton to set
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setEndButton = function(oEndButton) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>horizontalScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontalScrolling new value for property <code>horizontalScrolling</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.setIcon = function(sIcon) { return new sap.m.Dialog(); };

/**
 * Setter for the associated <code>initialFocus</code>.
 * @param {sap.ui.core.Control} oInitialFocus Id of an element which becomes the new target of this initialFocus association. Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Dialog.prototype.setInitialFocus = function(oInitialFocus) { return new sap.m.Dialog(); };

/**
 * Setter for the associated <code>leftButton</code>.
 * @param {sap.m.Button} oLeftButton Id of an element which becomes the new target of this leftButton association. Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.1. 
 * 
 * LeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * @public
 * 
 */
sap.m.Dialog.prototype.setLeftButton = function(oLeftButton) { return new sap.m.Dialog(); };

/**
 * Setter for the associated <code>rightButton</code>.
 * @param {sap.m.Button} oRightButton Id of an element which becomes the new target of this rightButton association. Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.1. 
 * 
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * @public
 * 
 */
sap.m.Dialog.prototype.setRightButton = function(oRightButton) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>showHeader</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader new value for property <code>showHeader</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>state</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sState new value for property <code>state</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Dialog.prototype.setState = function(sState) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>stretch</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStretch new value for property <code>stretch</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.13.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setStretch = function(bStretch) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>stretchOnPhone</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStretchOnPhone new value for property <code>stretchOnPhone</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @deprecated Since version 1.13.1. 
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * @public
 * 
 */
sap.m.Dialog.prototype.setStretchOnPhone = function(bStretchOnPhone) { return new sap.m.Dialog(); };

/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.IBar} oSubHeader the subHeader to set
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.12.2
 * @public
 * 
 */
sap.m.Dialog.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.setTitle = function(sTitle) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.DialogType} sType new value for property <code>type</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.setType = function(sType) { return new sap.m.Dialog(); };

/**
 * Setter for property <code>verticalScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling new value for property <code>verticalScrolling</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Dialog.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.Dialog(); };


// ---- sap.m.DialogType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DialogType.toString = function() { return ""; };

// ---- sap.m.DisplayListItem --------------------------------------------------------------------------

/**
 * Constructor for a new DisplayListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The display list item consists of a label and a value.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DisplayListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DisplayListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>label</code>.
 * List item label
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>label</code>
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.DisplayListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.DisplayListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>value</code>.
 * List item value
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getValue = function() { return ""; };

/**
 * Setter for property <code>label</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sLabel new value for property <code>label</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setLabel = function(sLabel) { return new sap.m.DisplayListItem(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue new value for property <code>value</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setValue = function(sValue) { return new sap.m.DisplayListItem(); };


// ---- sap.m.FacetFilter --------------------------------------------------------------------------

/**
 * Constructor for a new FacetFilter.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowPersonalization showPersonalization} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.m.FacetFilterType</li>
 * <li>{@link #getLiveSearch liveSearch} : boolean (default: true)</li>
 * <li>{@link #getShowSummaryBar showSummaryBar} : boolean (default: false)</li>
 * <li>{@link #getShowReset showReset} : boolean (default: true)</li>
 * <li>{@link #getShowPopoverOKButton showPopoverOKButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLists lists} : sap.m.FacetFilterList[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * FacetFilter is used to provide filtering functionality with multiple parameters.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilter = function(sId,mSettings) {};
/**
 * Fired when the reset button is pressed to inform that all facet filter lists need to be reset.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.FacetFilter.prototype.reset = function(oControlEvent) {  };

/**
 * Adds some list into the aggregation named <code>lists</code>.
 * @param {sap.m.FacetFilterList}
 *            oList the list to add; to add; if empty, nothing is inserted
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.addList = function(oList) { return new sap.m.FacetFilter(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'reset' event of this <code>sap.m.FacetFilter</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.FacetFilter</code>.<br> itself.
 * 
 * Fired when the reset button is pressed to inform that all facet filter lists need to be reset.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code>.<br/> itself.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.attachReset = function(oData,fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * Destroys all the lists in the aggregation
 * named <code>lists</code>.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.destroyLists = function() { return new sap.m.FacetFilter(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'reset' event of this <code>sap.m.FacetFilter</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.detachReset = function(fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * Creates a new subclass of class sap.m.FacetFilter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event reset to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilter.prototype.fireReset = function(mArguments) { return new sap.m.FacetFilter(); };

/**
 * Getter for aggregation <code>lists</code>.<br/>
 * Collection of FacetFilterList controls.
 * @return {sap.m.FacetFilterList[]}
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getLists = function() { return new Array(); };

/**
 * Getter for property <code>liveSearch</code>.
 * Enable/disable live search on all search fields except for the facet list search.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>liveSearch</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getLiveSearch = function() { return false; };

/**
 * Returns a metadata object for class sap.m.FacetFilter.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FacetFilter.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showPersonalization</code>.
 * If true and the FacetFilter type is Simple, then the add facet icon will be displayed and each facet button will also have a facet remove icon displayed beside it allowing the user to deactivate the facet.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showPersonalization</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowPersonalization = function() { return false; };

/**
 * Getter for property <code>showPopoverOKButton</code>.
 * If true an "OK" button is shown for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside the popover.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showPopoverOKButton</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowPopoverOKButton = function() { return false; };

/**
 * Getter for property <code>showReset</code>.
 * Show or hide the filter reset button.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showReset</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowReset = function() { return false; };

/**
 * Getter for property <code>showSummaryBar</code>.
 * Shows the summary bar instead of the facet filter buttons bar when set to true.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showSummaryBar</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowSummaryBar = function() { return false; };

/**
 * Getter for property <code>type</code>.
 * This property defines the default appearance of the FacetFilter on the device.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FacetFilterType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getType = function() { return new sap.m.FacetFilterType(); };

/**
 * Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation named <code>lists</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.FacetFilterList}
 *           oList the list whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.FacetFilter.prototype.indexOfList = function(oList) { return 0; };

/**
 * Inserts a list into the aggregation named <code>lists</code>.
 * @param {sap.m.FacetFilterList}
 *            oList the list to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the list should be inserted at; for
 *              a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the list is inserted at
 *              the last position
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.insertList = function(oList,iIndex) { return new sap.m.FacetFilter(); };

/**
 * Opens the facet filter dialog.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilter.prototype.openFilterDialog = function() { return null; };

/**
 * Removes all the controls in the aggregation named <code>lists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.FacetFilterList[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.FacetFilter.prototype.removeAllLists = function() { return new Array(); };

/**
 * Removes an list from the aggregation named <code>lists</code>.
 * @param {int | string | sap.m.FacetFilterList} vList the listto remove or its index or id
 * @return {sap.m.FacetFilterList} the removed list or null
 * @public
 * 
 */
sap.m.FacetFilter.prototype.removeList = function(vList) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>liveSearch</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bLiveSearch new value for property <code>liveSearch</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setLiveSearch = function(bLiveSearch) { return new sap.m.FacetFilter(); };

/**
 * Setter for property <code>showPersonalization</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowPersonalization new value for property <code>showPersonalization</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowPersonalization = function(bShowPersonalization) { return new sap.m.FacetFilter(); };

/**
 * Setter for property <code>showPopoverOKButton</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowPopoverOKButton new value for property <code>showPopoverOKButton</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowPopoverOKButton = function(bShowPopoverOKButton) { return new sap.m.FacetFilter(); };

/**
 * Setter for property <code>showReset</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowReset new value for property <code>showReset</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowReset = function(bShowReset) { return new sap.m.FacetFilter(); };

/**
 * Setter for property <code>showSummaryBar</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSummaryBar new value for property <code>showSummaryBar</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowSummaryBar = function(bShowSummaryBar) { return new sap.m.FacetFilter(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FacetFilterType} sType new value for property <code>type</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setType = function(sType) { return new sap.m.FacetFilter(); };


// ---- sap.m.FacetFilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new FacetFilterItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getCount count} : int</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Represents a value for the FacetFilterList control.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.FacetFilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>count</code>.
 * Number of objects that match this item in the target data set.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>count</code>
 * @deprecated Since version 7.20.0. 
 * Use setCounter instead.
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getCount = function() { return 0; };

/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.FacetFilterItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FacetFilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getText = function() { return ""; };

/**
 * Setter for property <code>count</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iCount new value for property <code>count</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @deprecated Since version 7.20.0. 
 * Use setCounter instead.
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setCount = function(iCount) { return new sap.m.FacetFilterItem(); };

/**
 * Setter for property <code>key</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sKey new value for property <code>key</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setKey = function(sKey) { return new sap.m.FacetFilterItem(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setText = function(sText) { return new sap.m.FacetFilterItem(); };


// ---- sap.m.FacetFilterList --------------------------------------------------------------------------

/**
 * Constructor for a new FacetFilterList.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getWordWrap wordWrap} : boolean (default: false)</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * <li>{@link #getActive active} : boolean (default: true)</li>
 * <li>{@link #getEnableCaseInsensitiveSearch enableCaseInsensitiveSearch} : boolean (default: false)</li>
 * <li>{@link #getAllCount allCount} : int</li>
 * <li>{@link #getSequence sequence} : int</li>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getShowRemoveFacetIcon showRemoveFacetIcon} : boolean (default: true)</li>
 * <li>{@link #getRetainListSequence retainListSequence} : boolean (default: false)</li>
 * <li>{@link #getDataType dataType} : sap.m.FacetFilterListDataType</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:listOpen listOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:listClose listClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * FacetFilterList represents a list of values for the FacetFilter control.
 * @extends sap.m.List
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList = function(sId,mSettings) {};
/**
 * Triggered after the list of items is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.FacetFilterItem[]} oControlEvent.getParameters.selectedItems Array of selected items. Items returned are only copies and therefore can only be used to read properties, not set them.
 * @param {boolean} oControlEvent.getParameters.allSelected True if the select All checkbox is selected. This will be false if all items are actually selected (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.
 * @param {object} oControlEvent.getParameters.selectedKeys Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves. Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.listClose = function(oControlEvent) {  };

/**
 * Fired before the filter list is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.listOpen = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'listClose' event of this <code>sap.m.FacetFilterList</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.FacetFilterList</code>.<br> itself.
 * 
 * Triggered after the list of items is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code>.<br/> itself.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.attachListClose = function(oData,fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'listOpen' event of this <code>sap.m.FacetFilterList</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.FacetFilterList</code>.<br> itself.
 * 
 * Fired before the filter list is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code>.<br/> itself.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.attachListOpen = function(oData,fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'listClose' event of this <code>sap.m.FacetFilterList</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.detachListClose = function(fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'listOpen' event of this <code>sap.m.FacetFilterList</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.detachListOpen = function(fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Creates a new subclass of class sap.m.FacetFilterList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.List.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilterList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event listClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItems' of type <code>sap.m.FacetFilterItem[]</code>Array of selected items. Items returned are only copies and therefore can only be used to read properties, not set them.</li>
 * <li>'allSelected' of type <code>boolean</code>True if the select All checkbox is selected. This will be false if all items are actually selected (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.</li>
 * <li>'selectedKeys' of type <code>object</code>Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves. Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilterList.prototype.fireListClose = function(mArguments) { return new sap.m.FacetFilterList(); };

/**
 * Fire event listOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilterList.prototype.fireListOpen = function(mArguments) { return new sap.m.FacetFilterList(); };

/**
 * Getter for property <code>active</code>.
 * Indicates that the list is displayed as a button when the FacetFilter type is set to Simple.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>active</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getActive = function() { return false; };

/**
 * Getter for property <code>allCount</code>.
 * Number of objects that match this item in the target data set when all filter items are selected.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>allCount</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getAllCount = function() { return 0; };

/**
 * Getter for property <code>dataType</code>.
 * FacetFilterList data type. Only String data type will provide search function.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FacetFilterListDataType} the value of property <code>dataType</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getDataType = function() { return new sap.m.FacetFilterListDataType(); };

/**
 * Getter for property <code>enableCaseInsensitiveSearch</code>.
 * If true, enable case-insensitive search for OData .
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>enableCaseInsensitiveSearch</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getEnableCaseInsensitiveSearch = function() { return false; };

/**
 * Getter for property <code>key</code>.
 * Unique identifier for this filter list.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.FacetFilterList.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FacetFilterList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>multiSelect</code>.
 * Specifies whether multiple or single selection is used.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @deprecated Since version 1.20.0. 
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getMultiSelect = function() { return false; };

/**
 * Getter for property <code>retainListSequence</code>.
 * Property to retain the list sequence if it is inactive and made active again .
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>retainListSequence</code>
 * @since 1.22.1
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getRetainListSequence = function() { return false; };

/**
 * Returns the keys of the selected elements as an associative array. An empty object is returned if no items are selected.
 * @type object
 * @public
 * @since 1.20.3
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.getSelectedKeys = function() { return new Object(); };

/**
 * Getter for property <code>sequence</code>.
 * Sequence that determines the order in which facet list is shown on the facet filter. Lists are rendered by ascending order of sequence.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>sequence</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getSequence = function() { return 0; };

/**
 * Getter for property <code>showRemoveFacetIcon</code>.
 * Specifies whether remove icon for facet is visible or hidden.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showRemoveFacetIcon</code>
 * @since 1.20.4
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getShowRemoveFacetIcon = function() { return false; };

/**
 * Getter for property <code>title</code>.
 * The title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to Simple. It is also displayed as a list item in the facet page of the dialog.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>wordWrap</code>.
 * If true, item text wraps when it is too long.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>wordWrap</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getWordWrap = function() { return false; };

/**
 * Remove the specified key from the selected keys cache and deselect the item.
 * @param {string} sKey
 *         The key of the selected item to be removed from the cache. If null then the text parameter will be used as the key.
 * @param {string} sText
 *         The text of the selected item to be removed from the cache. If the key parameter is null then text will be used as the key.
 * @type void
 * @public
 * @since 1.20.4
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.removeSelectedKey = function(sKey,sText) { return null; };

/**
 * Remove all selected keys from the selected keys cache and deselect all items.
 * @type void
 * @public
 * @since 1.20.4
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.removeSelectedKeys = function() { return null; };

/**
 * Setter for property <code>active</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bActive new value for property <code>active</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setActive = function(bActive) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>allCount</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iAllCount new value for property <code>allCount</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setAllCount = function(iAllCount) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>dataType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FacetFilterListDataType} sDataType new value for property <code>dataType</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setDataType = function(sDataType) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>enableCaseInsensitiveSearch</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableCaseInsensitiveSearch new value for property <code>enableCaseInsensitiveSearch</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setEnableCaseInsensitiveSearch = function(bEnableCaseInsensitiveSearch) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>key</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sKey new value for property <code>key</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setKey = function(sKey) { return new sap.m.FacetFilterList(); };

/**
 * Override to allow only MultiSelect and SingleSelectMaster list modes. If an invalid mode is given
 * then the mode will not be changed.
 * @param {sap.m.ListMode} mode The list mode
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setMode = function(mode) {  };

/**
 * Setter for property <code>multiSelect</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bMultiSelect new value for property <code>multiSelect</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20.0. 
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setMultiSelect = function(bMultiSelect) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>retainListSequence</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRetainListSequence new value for property <code>retainListSequence</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @since 1.22.1
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setRetainListSequence = function(bRetainListSequence) { return new sap.m.FacetFilterList(); };

/**
 * Use this method to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant. Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical items are removed by filtering or sorting. If aKeys is undefined, null, or {} (empty object) then all keys are deleted. After this method completes only those items with matching keys will be selected. All other items in the list will be deselected.
 * @param {object} oAKeys
 *         Associative array indicating which FacetFilterItems should be selected in the list. Each property must be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no property value is set then the property key is used for the text.
 * @type void
 * @public
 * @since 1.20.3
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.setSelectedKeys = function(oAKeys) { return null; };

/**
 * Setter for property <code>sequence</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iSequence new value for property <code>sequence</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setSequence = function(iSequence) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>showRemoveFacetIcon</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowRemoveFacetIcon new value for property <code>showRemoveFacetIcon</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @since 1.20.4
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setShowRemoveFacetIcon = function(bShowRemoveFacetIcon) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setTitle = function(sTitle) { return new sap.m.FacetFilterList(); };

/**
 * Setter for property <code>wordWrap</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bWordWrap new value for property <code>wordWrap</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setWordWrap = function(bWordWrap) { return new sap.m.FacetFilterList(); };


// ---- sap.m.FacetFilterListDataType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FacetFilterListDataType.toString = function() { return ""; };

// ---- sap.m.FacetFilterType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FacetFilterType.toString = function() { return ""; };

// ---- sap.m.FeedInput --------------------------------------------------------------------------

/**
 * Constructor for a new FeedInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:post post} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Feed Input allows the user to enter text for a new feed entry and then post it.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.22
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FeedInput = function(sId,mSettings) {};
/**
 * The post event is triggered when the user has entered a value and pressed the post button. After firing this event the value is reset.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value of the feed input before reseting it.
 * @public
 * 
 */
sap.m.FeedInput.prototype.post = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'post' event of this <code>sap.m.FeedInput</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.FeedInput</code>.<br> itself.
 * 
 * The post event is triggered when the user has entered a value and pressed the post button. After firing this event the value is reset.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedInput</code>.<br/> itself.
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.attachPost = function(oData,fnFunction,oListener) { return new sap.m.FeedInput(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'post' event of this <code>sap.m.FeedInput</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.detachPost = function(fnFunction,oListener) { return new sap.m.FeedInput(); };

/**
 * Creates a new subclass of class sap.m.FeedInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FeedInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event post to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The value of the feed input before reseting it.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FeedInput.prototype.firePost = function(mArguments) { return new sap.m.FeedInput(); };

/**
 * Getter for property <code>enabled</code>.
 * Set this flag to "false" to disable both text input and post button.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * Some mobile devices support higher resolution images while others do not. Therefore you should provide image resources for all relevant densities.
 * If the property is set to "true" one or more requests are sent to the server trying to get the density perfect version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided as well.
 * 
 * If you do not have higher resolution images you should set the property to "false" to avoid unnecessary roundtrips.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>maxLength</code>.
 * The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.FeedInput.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FeedInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>placeholder</code>.
 * The placeholder text shown in the input area as long as the user has not entered any text value.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getPlaceholder = function() { return ""; };

/**
 * Getter for property <code>showIcon</code>.
 * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getShowIcon = function() { return false; };

/**
 * Getter for property <code>value</code>.
 * The text value of the feed input. As long as the user has not entered any text the post butoon is disabled
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.FeedInput.prototype.getValue = function() { return ""; };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setEnabled = function(bEnabled) { return new sap.m.FeedInput(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setIcon = function(sIcon) { return new sap.m.FeedInput(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.FeedInput(); };

/**
 * Setter for property <code>maxLength</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength new value for property <code>maxLength</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setMaxLength = function(iMaxLength) { return new sap.m.FeedInput(); };

/**
 * Setter for property <code>placeholder</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sPlaceholder new value for property <code>placeholder</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.FeedInput(); };

/**
 * Setter for property <code>showIcon</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowIcon new value for property <code>showIcon</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setShowIcon = function(bShowIcon) { return new sap.m.FeedInput(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue new value for property <code>value</code>
 * @return {sap.m.FeedInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.setValue = function(sValue) { return new sap.m.FeedInput(); };


// ---- sap.m.FeedListItem --------------------------------------------------------------------------

/**
 * Constructor for a new FeedListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getSenderActive senderActive} : boolean (default: true)</li>
 * <li>{@link #getIconActive iconActive} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: true)</li>
 * <li>{@link #getMaxCharacters maxCharacters} : int</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:senderPress senderPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The control provides a set of properties for text, sender information, time stamp.
 * Beginning with release 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FeedListItem = function(sId,mSettings) {};
/**
 * Event is fired when the icon is pressed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's icon to be used for positioning.
 * @public
 * 
 */
sap.m.FeedListItem.prototype.iconPress = function(oControlEvent) {  };

/**
 * Event is fired when name of the sender is pressed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's sender string to be used for positioning.
 * @public
 * 
 */
sap.m.FeedListItem.prototype.senderPress = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br> itself.
 * 
 * Event is fired when the icon is pressed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.attachIconPress = function(oData,fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br> itself.
 * 
 * Event is fired when name of the sender is pressed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.attachSenderPress = function(oData,fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.detachIconPress = function(fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.detachSenderPress = function(fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FeedListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event iconPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code>Dom reference of the feed item's icon to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FeedListItem.prototype.fireIconPress = function(mArguments) { return new sap.m.FeedListItem(); };

/**
 * Fire event senderPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code>Dom reference of the feed item's sender string to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FeedListItem.prototype.fireSenderPress = function(mArguments) { return new sap.m.FeedListItem(); };

/**
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the list item is active.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
 * Icon is only shown if showIcon = true.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconActive</code>.
 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIconActive = function() { return false; };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>info</code>.
 * The Info text.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>info</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getInfo = function() { return ""; };

/**
 * Getter for property <code>maxCharacters</code>.
 * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>maxCharacters</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getMaxCharacters = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.FeedListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FeedListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>sender</code>.
 * Sender of the chunk
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>sender</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getSender = function() { return ""; };

/**
 * Getter for property <code>senderActive</code>.
 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>senderActive</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getSenderActive = function() { return false; };

/**
 * Getter for property <code>showIcon</code>.
 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getShowIcon = function() { return false; };

/**
 * Getter for property <code>text</code>.
 * The FeedListItem text.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>timestamp</code>.
 * This chunks timestamp
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getTimestamp = function() { return ""; };

/**
 * Setter for property <code>activeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sActiveIcon new value for property <code>activeIcon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIcon = function(sIcon) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>iconActive</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconActive new value for property <code>iconActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIconActive = function(bIconActive) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>info</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sInfo new value for property <code>info</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setInfo = function(sInfo) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>maxCharacters</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iMaxCharacters new value for property <code>maxCharacters</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setMaxCharacters = function(iMaxCharacters) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>sender</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sSender new value for property <code>sender</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setSender = function(sSender) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>senderActive</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSenderActive new value for property <code>senderActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setSenderActive = function(bSenderActive) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>showIcon</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowIcon new value for property <code>showIcon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setShowIcon = function(bShowIcon) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setText = function(sText) { return new sap.m.FeedListItem(); };

/**
 * Setter for property <code>timestamp</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTimestamp new value for property <code>timestamp</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setTimestamp = function(sTimestamp) { return new sap.m.FeedListItem(); };

/**
 * Redefinition of sap.m.ListItemBase.setType: type = "sap.m.ListType.Navigation" behaves like type = "sap.m.ListType.Active" for a FeedListItem
 * @public
 * @param {sap.m.ListType} type	new value for property type
 * @returns {sap.m.FeedListItem} this allows method chaining
 * 
 */
sap.m.FeedListItem.prototype.setType = function(type) { return new sap.m.FeedListItem(); };


// ---- sap.m.FlexAlignItems --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignItems.toString = function() { return ""; };

// ---- sap.m.FlexAlignSelf --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignSelf.toString = function() { return ""; };

// ---- sap.m.FlexBox --------------------------------------------------------------------------

/**
 * Constructor for a new FlexBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>
 * <li>{@link #getDirection direction} : sap.m.FlexDirection</li>
 * <li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>
 * <li>{@link #getRenderType renderType} : sap.m.FlexRendertype</li>
 * <li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent</li>
 * <li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The FlexBox control builds the container for a flexible box layout.
 * 
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FlexBox = function(sId,mSettings) {};
/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Control}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.addItem = function(oItem) { return new sap.m.FlexBox(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.destroyItems = function() { return new sap.m.FlexBox(); };

/**
 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FlexBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>alignItems</code>.
 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer <10.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FlexAlignItems} the value of property <code>alignItems</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getAlignItems = function() { return new sap.m.FlexAlignItems(); };

/**
 * Getter for property <code>direction</code>.
 * Determines the direction of the layout of child elements
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FlexDirection} the value of property <code>direction</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getDirection = function() { return new sap.m.FlexDirection(); };

/**
 * Getter for property <code>displayInline</code>.
 * Determines whether the flexbox is in block or inline mode
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>displayInline</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getDisplayInline = function() { return false; };

/**
 * Getter for property <code>fitContainer</code>.
 * Determines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>fitContainer</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getFitContainer = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * The height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @since 1.9.1
 * @public
 * 
 */
sap.m.FlexBox.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * Flex items within the FlexBox layout
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.FlexBox.prototype.getItems = function() { return new Array(); };

/**
 * Getter for property <code>justifyContent</code>.
 * Determines the layout behavior along the main axis. "SpaceAround" is currently not supported in most non-Webkit browsers.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FlexJustifyContent} the value of property <code>justifyContent</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getJustifyContent = function() { return new sap.m.FlexJustifyContent(); };

/**
 * Returns a metadata object for class sap.m.FlexBox.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FlexBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>renderType</code>.
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FlexRendertype} the value of property <code>renderType</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getRenderType = function() { return new sap.m.FlexRendertype(); };

/**
 * Getter for property <code>width</code>.
 * The width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @since 1.9.1
 * @public
 * 
 */
sap.m.FlexBox.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.FlexBox.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Control}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.insertItem = function(oItem,iIndex) { return new sap.m.FlexBox(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.FlexBox.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Control} vItem the itemto remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * 
 */
sap.m.FlexBox.prototype.removeItem = function(vItem) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>alignItems</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FlexAlignItems} sAlignItems new value for property <code>alignItems</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setAlignItems = function(sAlignItems) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>direction</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FlexDirection} sDirection new value for property <code>direction</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setDirection = function(sDirection) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>displayInline</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisplayInline new value for property <code>displayInline</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setDisplayInline = function(bDisplayInline) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>fitContainer</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFitContainer new value for property <code>fitContainer</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setFitContainer = function(bFitContainer) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @since 1.9.1
 * @public
 * 
 */
sap.m.FlexBox.prototype.setHeight = function(sHeight) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>justifyContent</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FlexJustifyContent} sJustifyContent new value for property <code>justifyContent</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setJustifyContent = function(sJustifyContent) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>renderType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FlexRendertype} sRenderType new value for property <code>renderType</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setRenderType = function(sRenderType) { return new sap.m.FlexBox(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @since 1.9.1
 * @public
 * 
 */
sap.m.FlexBox.prototype.setWidth = function(sWidth) { return new sap.m.FlexBox(); };


// ---- sap.m.FlexDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexDirection.toString = function() { return ""; };

// ---- sap.m.FlexItemData --------------------------------------------------------------------------

/**
 * Constructor for a new FlexItemData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf</li>
 * <li>{@link #getOrder order} : int (default: 0)</li>
 * <li>{@link #getGrowFactor growFactor} : float (default: 0)</li>
 * <li>{@link #getShrinkFactor shrinkFactor} : float (default: 1)</li>
 * <li>{@link #getStyleClass styleClass} : string (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Holds layout data for a FlexBox
 * @extends sap.ui.core.LayoutData
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FlexItemData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FlexItemData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>alignSelf</code>.
 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.FlexAlignSelf} the value of property <code>alignSelf</code>
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getAlignSelf = function() { return new sap.m.FlexAlignSelf(); };

/**
 * Getter for property <code>growFactor</code>.
 * Determines the flexibility of the flex item when allocatable space is remaining.
 * 
 * Default value is <code>0</code>
 * @return {float} the value of property <code>growFactor</code>
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getGrowFactor = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.m.FlexItemData.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.FlexItemData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>order</code>.
 * Determines the display order of flex items independent of their source code order.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>order</code>
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getOrder = function() { return 0; };

/**
 * Getter for property <code>shrinkFactor</code>.
 * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
 * 
 * http://www.w3.org/TR/css3-flexbox/#flex-shrink-factor
 * 
 * This property is not supported in Internet Explorer 9, Android Native Browser/Webview <4.4, and Safari <7.
 * 
 * Default value is <code>1</code>
 * @return {float} the value of property <code>shrinkFactor</code>
 * @since 1.24
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getShrinkFactor = function() { return 0.0; };

/**
 * Getter for property <code>styleClass</code>.
 * The style class will be applied to the flex item and can be used for CSS selectors
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>styleClass</code>
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getStyleClass = function() { return ""; };

/**
 * Setter for property <code>alignSelf</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.FlexAlignSelf} sAlignSelf new value for property <code>alignSelf</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setAlignSelf = function(sAlignSelf) { return new sap.m.FlexItemData(); };

/**
 * Setter for property <code>growFactor</code>.
 * 
 * Default value is <code>0</code>.
 * @param {float} fGrowFactor new value for property <code>growFactor</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setGrowFactor = function(fGrowFactor) { return new sap.m.FlexItemData(); };

/**
 * Setter for property <code>order</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iOrder new value for property <code>order</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setOrder = function(iOrder) { return new sap.m.FlexItemData(); };

/**
 * Setter for property <code>shrinkFactor</code>.
 * 
 * Default value is <code>1</code>.
 * @param {float} fShrinkFactor new value for property <code>shrinkFactor</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @since 1.24
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setShrinkFactor = function(fShrinkFactor) { return new sap.m.FlexItemData(); };

/**
 * Setter for property <code>styleClass</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sStyleClass new value for property <code>styleClass</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setStyleClass = function(sStyleClass) { return new sap.m.FlexItemData(); };


// ---- sap.m.FlexJustifyContent --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexJustifyContent.toString = function() { return ""; };

// ---- sap.m.FlexRendertype --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexRendertype.toString = function() { return ""; };

// ---- sap.m.GroupHeaderListItem --------------------------------------------------------------------------

/**
 * Constructor for a new GroupHeaderListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCount count} : string</li>
 * <li>{@link #getUpperCase upperCase} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The group header list item is used to display the title of a group and act as separator between groups in Lists.
 * 
 * There are several API parts inherited from ListItemBase which do not apply here:
 * The properties "type", "unread", "selected" and "counter" are currently ignored.
 * Tap events will not be fired.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.GroupHeaderListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GroupHeaderListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>count</code>.
 * A text to be displayed in the group header in brackets next to the group title. Usually the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
 * Will not be displayed if not set.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>count</code>
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getCount = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.GroupHeaderListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.GroupHeaderListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>title</code>.
 * The title of the group header.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>upperCase</code>.
 * Title will be put to capital letters by default, otherwise set this property to 'false'
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>upperCase</code>
 * @since 1.13.2
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getUpperCase = function() { return false; };

/**
 * Setter for property <code>count</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sCount new value for property <code>count</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setCount = function(sCount) { return new sap.m.GroupHeaderListItem(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setTitle = function(sTitle) { return new sap.m.GroupHeaderListItem(); };

/**
 * Setter for property <code>upperCase</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUpperCase new value for property <code>upperCase</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @since 1.13.2
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setUpperCase = function(bUpperCase) { return new sap.m.GroupHeaderListItem(); };


// ---- sap.m.GrowingEnablement --------------------------------------------------------------------------

/**
 * Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities for growing
 * @extends sap.ui.base.Object
 * @experimental Since 1.16. This class is experimental and provides only limited functionality. Also the API might be changed in future.
 * @param {sap.m.ListBase} oControl the ListBase control of which this Growing is the delegate
 * @constructor
 * @protected
 * 
 */
sap.m.GrowingEnablement = function(oControl) {};
/**
 * Creates a new subclass of class sap.m.GrowingEnablement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GrowingEnablement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.GrowingEnablement.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.GrowingEnablement.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.GrowingList --------------------------------------------------------------------------

/**
 * Constructor for a new GrowingList.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThreshold threshold} : int (default: 20)</li>
 * <li>{@link #getTriggerText triggerText} : string</li>
 * <li>{@link #getScrollToLoad scrollToLoad} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.
 * @extends sap.m.List
 * @version 1.26.9
 * @constructor
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "List" or "Table" control with setting "growing" property to "true"
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.GrowingList = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.GrowingList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.List.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GrowingList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.GrowingList.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.GrowingList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>scrollToLoad</code>.
 * If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
 * NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>scrollToLoad</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.GrowingList.prototype.getScrollToLoad = function() { return false; };

/**
 * Getter for property <code>threshold</code>.
 * Number of items requested from the server. To activate this you should set growing property to "true"
 * 
 * Default value is <code>20</code>
 * @return {int} the value of property <code>threshold</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.GrowingList.prototype.getThreshold = function() { return 0; };

/**
 * Getter for property <code>triggerText</code>.
 * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
 * This property can be used only if growing property is set "true" and scrollToLoad property is set "false".
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>triggerText</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.GrowingList.prototype.getTriggerText = function() { return ""; };

/**
 * Setter for property <code>scrollToLoad</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bScrollToLoad new value for property <code>scrollToLoad</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.GrowingList.prototype.setScrollToLoad = function(bScrollToLoad) { return new sap.m.GrowingList(); };

/**
 * Setter for property <code>threshold</code>.
 * 
 * Default value is <code>20</code>.
 * @param {int} iThreshold new value for property <code>threshold</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.GrowingList.prototype.setThreshold = function(iThreshold) { return new sap.m.GrowingList(); };

/**
 * Setter for property <code>triggerText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTriggerText new value for property <code>triggerText</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.GrowingList.prototype.setTriggerText = function(sTriggerText) { return new sap.m.GrowingList(); };


// ---- sap.m.HBox --------------------------------------------------------------------------

/**
 * Constructor for a new HBox.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.
 * 
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.m.FlexBox
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.HBox = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.HBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.HBox.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.HBox.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.HeaderLevel --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.HeaderLevel.toString = function() { return ""; };

// ---- sap.m.IBar --------------------------------------------------------------------------


// ---- sap.m.IBarHTMLTag --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.IBarHTMLTag.toString = function() { return ""; };

// ---- sap.m.IBarInPageEnabler --------------------------------------------------------------------------

/**
 * @class Helper Class for implementing the IBar interface. Should be created once per IBar instance.
 * @version 1.22
 * @protected
 * 
 */
sap.m.IBarInPageEnabler = function() {};
/**
 * Adds the sapMBarChildClass to a control.
 * @param {sap.ui.core.Control} oControl
 * @protected
 * @static
 * 
 */
sap.m.IBarInPageEnabler.addChildClassTo = function(oControl) {  };

/**
 * Renders a div with display none.
 * @param {sap.ui.core.RenderManager} oRM the RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
 * @protected
 * @static
 * 
 */
sap.m.IBarInPageEnabler.renderInvisible = function(oRM,oControl) {  };

/**
 * Renders the tooltip for the given control
 * @protected
 * @param {sap.ui.core.RenderManager} oRM the RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
 * 
 */
sap.m.IBarInPageEnabler.renderTooltip = function(oRM,oControl) {  };


// ---- sap.m.IconTab --------------------------------------------------------------------------


// ---- sap.m.IconTabBar --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabBar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li>
 * <li>{@link #getExpandable expandable} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getUpperCase upperCase} : boolean (default: false)</li>
 * <li>{@link #getStretchContentHeight stretchContentHeight} : boolean (default: false)</li>
 * <li>{@link #getApplyContentPadding applyContentPadding} : boolean (default: true)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A tab bar with large icons
 * @extends sap.ui.core.Control
 * @implements sap.m.ObjectHeaderContainer
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabBar = function(sId,mSettings) {};
/**
 * Indicates that the tab will expand or collapse
 * @event
 * @since 1.15.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.expand If the tab will expand, this is true.
 * @param {boolean} oControlEvent.getParameters.collapse If the tab will collapse, this is true.
 * @public
 * 
 */
sap.m.IconTabBar.prototype.expand = function(oControlEvent) {  };

/**
 * This event will be fired when an item is selected.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item.
 * @param {string} oControlEvent.getParameters.key The key of the selected item.
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.selectedItem This parameter is deprecated since 1.15.0! Please use parameter "item" instead.
 * @param {string} oControlEvent.getParameters.selectedKey This parameter is deprecated since 1.15.0! Please use parameter "key" instead.
 * @public
 * 
 */
sap.m.IconTabBar.prototype.select = function(oControlEvent) {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.addContent = function(oContent) { return new sap.m.IconTabBar(); };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.IconTab}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.addItem = function(oItem) { return new sap.m.IconTabBar(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br> itself.
 * 
 * Indicates that the tab will expand or collapse
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.attachExpand = function(oData,fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br> itself.
 * 
 * This event will be fired when an item is selected.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Forwards aggregations with the name of items to the internal list.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.IconTabBar(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.destroyContent = function() { return new sap.m.IconTabBar(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.destroyItems = function() { return new sap.m.IconTabBar(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabBar.prototype.detachExpand = function(fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event expand to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'expand' of type <code>boolean</code>If the tab will expand, this is true.</li>
 * <li>'collapse' of type <code>boolean</code>If the tab will collapse, this is true.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.fireExpand = function(mArguments) { return new sap.m.IconTabBar(); };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.m.IconTabFilter</code>The selected item.</li>
 * <li>'key' of type <code>string</code>The key of the selected item.</li>
 * <li>'selectedItem' of type <code>sap.m.IconTabFilter</code>This parameter is deprecated since 1.15.0! Please use parameter "item" instead.</li>
 * <li>'selectedKey' of type <code>string</code>This parameter is deprecated since 1.15.0! Please use parameter "key" instead.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.IconTabBar.prototype.fireSelect = function(mArguments) { return new sap.m.IconTabBar(); };

/**
 * Getter for property <code>applyContentPadding</code>.
 * Determines whether the IconTabBar content will fit to the full area (if set to false paddings are removed).
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>applyContentPadding</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getApplyContentPadding = function() { return false; };

/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the IconTabBar. Depending on the theme you can change the state of the background
 * from "Solid" over "Translucent" to "Transparent".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The contents displayed below the IconTabBar.
 * If there are multiple contents, they are rendered after each other. The developer has to manage to display the right one or use the content aggregation inside the IconTabFilter (which will be displayed instead if it is set).
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>expandable</code>.
 * Defines if the tabs can be collapsed and expanded
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>expandable</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getExpandable = function() { return false; };

/**
 * Getter for property <code>expanded</code>.
 * Indicates if the actual tab is expanded or not
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>expanded</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getExpanded = function() { return false; };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items displayed in the IconTabBar
 * @return {sap.m.IconTab[]}
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.IconTabBar.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.IconTabBar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Reflector for the internal header's selectedKey property
 * @overwrite
 * @public
 * @returns {string} the current property value
 * 
 */
sap.m.IconTabBar.prototype.getSelectedKey = function() { return ""; };

/**
 * Getter for property <code>showSelection</code>.
 * Defines whether the current selection should be visualized
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showSelection</code>
 * @deprecated Since version 1.15.0. 
 * Regarding to changes of this control this property is not needed anymore.
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getShowSelection = function() { return false; };

/**
 * Getter for property <code>stretchContentHeight</code>.
 * Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container. As a
 * prerequisite, the height of the parent container must be defined as a fixed value.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>stretchContentHeight</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getStretchContentHeight = function() { return false; };

/**
 * Getter for property <code>upperCase</code>.
 * Determines whether the text of the icon tab filter (not the count) is uppercased.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>upperCase</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getUpperCase = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.IconTabBar.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.IconTab}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.IconTabBar.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.insertContent = function(oContent,iIndex) { return new sap.m.IconTabBar(); };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.IconTab}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.insertItem = function(oItem,iIndex) { return new sap.m.IconTabBar(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.IconTab[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.IconTab} vItem the itemto remove or its index or id
 * @return {sap.m.IconTab} the removed item or null
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeItem = function(vItem) { return new sap.m.IconTab(); };

/**
 * Setter for property <code>applyContentPadding</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bApplyContentPadding new value for property <code>applyContentPadding</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setApplyContentPadding = function(bApplyContentPadding) { return new sap.m.IconTabBar(); };

/**
 * Setter for property <code>backgroundDesign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign new value for property <code>backgroundDesign</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.IconTabBar(); };

/**
 * Sets the expandable flag without rerendering
 * @overwrite
 * @public
 * @param {boolean} bExpandable new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setExpandable = function(bExpandable) { return new sap.m.IconTabBar(); };

/**
 * Sets the expanded flag and toggles the expand/collapse animation if the control is already rendered
 * @overwrite
 * @public
 * @param {boolean} bExpanded new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setExpanded = function(bExpanded) { return new sap.m.IconTabBar(); };

/**
 * Reflector for the internal header's selectedKey property
 * @overwrite
 * @public
 * @param {string} sValue the new value
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setSelectedKey = function(sValue) { return new sap.m.IconTabBar(); };

/**
 * Setter for property <code>showSelection</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSelection new value for property <code>showSelection</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.0. 
 * Regarding to changes of this control this property is not needed anymore.
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setShowSelection = function(bShowSelection) { return new sap.m.IconTabBar(); };

/**
 * Setter for property <code>stretchContentHeight</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStretchContentHeight new value for property <code>stretchContentHeight</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setStretchContentHeight = function(bStretchContentHeight) { return new sap.m.IconTabBar(); };

/**
 * Setter for property <code>upperCase</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUpperCase new value for property <code>upperCase</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setUpperCase = function(bUpperCase) { return new sap.m.IconTabBar(); };


// ---- sap.m.IconTabFilter --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabFilter.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCount count} : string (default: )</li>
 * <li>{@link #getShowAll showAll} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getIconColor iconColor} : sap.ui.core.IconColor</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.m.IconTabFilterDesign</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The filter item class
 * @extends sap.ui.core.Item
 * @implements sap.m.IconTab
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabFilter = function(sId,mSettings) {};
/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.addContent = function(oContent) { return new sap.m.IconTabFilter(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.destroyContent = function() { return new sap.m.IconTabFilter(); };

/**
 * Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabFilter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content to show for this item (optional).
 * If this content is set, it will be displayed instead of the general content inside the IconTabBar.
 * @return {sap.ui.core.Control[]}
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>count</code>.
 * The number of available items if this filter is applied
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>count</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getCount = function() { return ""; };

/**
 * Getter for property <code>design</code>.
 * Design for the filter item.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.IconTabFilterDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getDesign = function() { return new sap.m.IconTabFilterDesign(); };

/**
 * Getter for property <code>icon</code>.
 * The icon to display for this item.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconColor</code>.
 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
 * Instead of the semantic icon color the brand color can be used, this is named Default.
 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.IconColor} the value of property <code>iconColor</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIconColor = function() { return new sap.ui.core.IconColor(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.IconTabFilter.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.IconTabFilter.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showAll</code>.
 * Enables special visualization for disabled filter (show all items)
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showAll</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getShowAll = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * If set to false, the control is not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.insertContent = function(oContent,iIndex) { return new sap.m.IconTabFilter(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>count</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sCount new value for property <code>count</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setCount = function(sCount) { return new sap.m.IconTabFilter(); };

/**
 * Setter for property <code>design</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.IconTabFilterDesign} sDesign new value for property <code>design</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setDesign = function(sDesign) { return new sap.m.IconTabFilter(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIcon = function(sIcon) { return new sap.m.IconTabFilter(); };

/**
 * Setter for property <code>iconColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.IconColor} sIconColor new value for property <code>iconColor</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIconColor = function(sIconColor) { return new sap.m.IconTabFilter(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.IconTabFilter(); };

/**
 * Setter for property <code>showAll</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowAll new value for property <code>showAll</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setShowAll = function(bShowAll) { return new sap.m.IconTabFilter(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setVisible = function(bVisible) { return new sap.m.IconTabFilter(); };


// ---- sap.m.IconTabFilterDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.IconTabFilterDesign.toString = function() { return ""; };

// ---- sap.m.IconTabHeader --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabHeader.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control display a number of iconTabFilters and Separators. If the available horizontal space is exceeded, it will allow for scrolling horziontally to show all items.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabHeader = function(sId,mSettings) {};
/**
 * This event will be fired when an item is selected.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item.
 * @param {string} oControlEvent.getParameters.key The key of the selected item.
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.select = function(oControlEvent) {  };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.IconTab}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.addItem = function(oItem) { return new sap.m.IconTabHeader(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.IconTabHeader</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.IconTabHeader</code>.<br> itself.
 * 
 * This event will be fired when an item is selected.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabHeader</code>.<br/> itself.
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.IconTabHeader(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.destroyItems = function() { return new sap.m.IconTabHeader(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.IconTabHeader</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.IconTabHeader(); };

/**
 * Creates a new subclass of class sap.m.IconTabHeader with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabHeader.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.m.IconTabFilter</code>The selected item.</li>
 * <li>'key' of type <code>string</code>The key of the selected item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.IconTabHeader.prototype.fireSelect = function(mArguments) { return new sap.m.IconTabHeader(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items displayed in the IconTabBar
 * @return {sap.m.IconTab[]}
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.IconTabHeader.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.IconTabHeader.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item.
 * 
 * If the key has no corresponding aggregated item, no changes will apply.
 * If duplicate keys exists the first item matching the key is used.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>selectedKey</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getSelectedKey = function() { return ""; };

/**
 * Getter for property <code>showSelection</code>.
 * Defines whether the current selection should be visualized.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showSelection</code>
 * @deprecated Since version 1.15.0.
 * Regarding to changes of this control this property is not needed anymore.
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getShowSelection = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.IconTab}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.IconTab}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.insertItem = function(oItem,iIndex) { return new sap.m.IconTabHeader(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.IconTab[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.IconTab} vItem the itemto remove or its index or id
 * @return {sap.m.IconTab} the removed item or null
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.removeItem = function(vItem) { return new sap.m.IconTab(); };

/**
 * Sets the selected item based on key
 * @overwrite
 * @public
 * @param {string} sKey the key of the item to be selected
 * @return {sap.m.IconTabHeader} this pointer for chaining
 * 
 */
sap.m.IconTabHeader.prototype.setSelectedKey = function(sKey) { return new sap.m.IconTabHeader(); };

/**
 * Setter for property <code>showSelection</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSelection new value for property <code>showSelection</code>
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.0.
 * Regarding to changes of this control this property is not needed anymore.
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setShowSelection = function(bShowSelection) { return new sap.m.IconTabHeader(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.IconTabHeader} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setVisible = function(bVisible) { return new sap.m.IconTabHeader(); };


// ---- sap.m.IconTabSeparator --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabSeparator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A tab separator item class
 * @extends sap.ui.core.Element
 * @implements sap.m.IconTab
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabSeparator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabSeparator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>icon</code>.
 * The icon to display for this separator. If no icon is given, a separator line will be used instead.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.IconTabSeparator.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.IconTabSeparator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setIcon = function(sIcon) { return new sap.m.IconTabSeparator(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.IconTabSeparator(); };


// ---- sap.m.Image --------------------------------------------------------------------------

/**
 * Constructor for a new Image.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li>
 * <li>{@link #getDensityAware densityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: )</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.
 * 
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Image = function(sId,mSettings) {};
/**
 * Event is fired when the user clicks on the control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Image.prototype.press = function(oControlEvent) {  };

/**
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Image.prototype.tap = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Image</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br> itself.
 * 
 * Event is fired when the user clicks on the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Image</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br> itself.
 * 
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Image</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Image</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Image.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Image.prototype.firePress = function(mArguments) { return new sap.m.Image(); };

/**
 * Fire event tap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Image.prototype.fireTap = function(mArguments) { return new sap.m.Image(); };

/**
 * Getter for property <code>activeSrc</code>.
 * The source property when this image is tapped.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.URI} the value of property <code>activeSrc</code>
 * @public
 * 
 */
sap.m.Image.prototype.getActiveSrc = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>alt</code>
 * @public
 * 
 */
sap.m.Image.prototype.getAlt = function() { return ""; };

/**
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * 
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * 
 */
sap.m.Image.prototype.getDecorative = function() { return false; };

/**
 * Getter for property <code>densityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>densityAware</code>
 * @public
 * 
 */
sap.m.Image.prototype.getDensityAware = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Image.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Image.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Image.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * 
 */
sap.m.Image.prototype.getSrc = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>useMap</code>
 * @public
 * 
 */
sap.m.Image.prototype.getUseMap = function() { return ""; };

/**
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Image.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
 * @param {sap.ui.core.URI} sActiveSrc
 * @public
 * 
 */
sap.m.Image.prototype.setActiveSrc = function(sActiveSrc) {  };

/**
 * Setter for property <code>alt</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sAlt new value for property <code>alt</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setAlt = function(sAlt) { return new sap.m.Image(); };

/**
 * Setter for property <code>decorative</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDecorative new value for property <code>decorative</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setDecorative = function(bDecorative) { return new sap.m.Image(); };

/**
 * Setter for property <code>densityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDensityAware new value for property <code>densityAware</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setDensityAware = function(bDensityAware) { return new sap.m.Image(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setHeight = function(sHeight) { return new sap.m.Image(); };

/**
 * This overrides the default setter of the src property and update the dom node.
 * @param {sap.ui.core.URI} sSrc
 * @public
 * 
 */
sap.m.Image.prototype.setSrc = function(sSrc) {  };

/**
 * Setter for property <code>useMap</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sUseMap new value for property <code>useMap</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setUseMap = function(sUseMap) { return new sap.m.Image(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setWidth = function(sWidth) { return new sap.m.Image(); };


// ---- sap.m.ImageHelper --------------------------------------------------------------------------

/**
 * Creates or updates an image control.
 * @param {string} sImgId id of the image to be dealt with.
 * @param {sap.m.Image} oImageControl the image to update. If undefined, a new image will be created.
 * @param {sap.ui.core.Control} oParent oImageControl's parentControl.
 * @param {Map} mProperties map object that contains key value pairs if image propeties. The 'src' property
 * MUST be contained. Also the map's keys must be names of image properties
 * @param {Array} aCssClassesToAdd array of css classes which will be added if the image needs to be created.
 * @param {Array} aCssClassesToRemove all css clases that oImageControl has and which are contained in this array
 * are removed bevore adding the css classes listed in aCssClassesToAdd.
 * @returns the new or updated image control
 * @protected
 * 
 * @memberof sap.m.ImageHelper
 */
sap.m.ImageHelper.prototype.getImageControl = function(sImgId,oImageControl,oParent,mProperties,aCssClassesToAdd,aCssClassesToRemove) {  };


// ---- sap.m.Input --------------------------------------------------------------------------

/**
 * Constructor for a new Input.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.InputType</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getDateFormat dateFormat} : string (default: YYYY-MM-dd)</li>
 * <li>{@link #getShowValueHelp showValueHelp} : boolean (default: false)</li>
 * <li>{@link #getShowSuggestion showSuggestion} : boolean (default: false)</li>
 * <li>{@link #getValueHelpOnly valueHelpOnly} : boolean (default: false)</li>
 * <li>{@link #getFilterSuggests filterSuggests} : boolean (default: true)</li>
 * <li>{@link #getMaxSuggestionWidth maxSuggestionWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getStartSuggestion startSuggestion} : int (default: 1)</li>
 * <li>{@link #getShowTableSuggestionValueHelp showTableSuggestionValueHelp} : boolean (default: true)</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getFieldWidth fieldWidth} : sap.ui.core.CSSSize (default: 50%)</li>
 * <li>{@link #getValueLiveUpdate valueLiveUpdate} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSuggestionItems suggestionItems} : sap.ui.core.Item[]</li>
 * <li>{@link #getSuggestionColumns suggestionColumns} : sap.m.Column[]</li>
 * <li>{@link #getSuggestionRows suggestionRows} : sap.m.ColumnListItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:valueHelpRequest valueHelpRequest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:suggestionItemSelected suggestionItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enables users to input data.
 * @extends sap.m.InputBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Input = function(sId,mSettings) {};
/**
 * This event is fired when the value of the input is changed - e.g. at each keypress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input.
 * @public
 * 
 */
sap.m.Input.prototype.liveChange = function(oControlEvent) {  };

/**
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
 * @event
 * @since 1.16.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.suggestValue The current value which has been typed in the input.
 * @param {sap.m.ListBase} oControlEvent.getParameters.suggestionColumns The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions, fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input control.
 * @public
 * 
 */
sap.m.Input.prototype.suggest = function(oControlEvent) {  };

/**
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this value will not be set.
 * @param {sap.m.ColumnListItem} oControlEvent.getParameters.selectedRow This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.
 * 
 * Note: The row result function to select a result value for the string is already executed at this time. To pick different value for the input field or to do follow up steps after the item has been selected.
 * @public
 * 
 */
sap.m.Input.prototype.suggestionItemSelected = function(oControlEvent) {  };

/**
 * When the value help indicator is clicked, this event will be fired.
 * @event
 * @since 1.16
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.fromSuggestions The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has been pressed.
 * @public
 * 
 */
sap.m.Input.prototype.valueHelpRequest = function(oControlEvent) {  };

/**
 * Adds some suggestionColumn into the aggregation named <code>suggestionColumns</code>.
 * @param {sap.m.Column}
 *            oSuggestionColumn the suggestionColumn to add; to add; if empty, nothing is inserted
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.addSuggestionColumn = function(oSuggestionColumn) { return new sap.m.Input(); };

/**
 * Adds some suggestionItem into the aggregation named <code>suggestionItems</code>.
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem to add; to add; if empty, nothing is inserted
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.addSuggestionItem = function(oSuggestionItem) { return new sap.m.Input(); };

/**
 * Adds some suggestionRow into the aggregation named <code>suggestionRows</code>.
 * @param {sap.m.ColumnListItem}
 *            oSuggestionRow the suggestionRow to add; to add; if empty, nothing is inserted
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.addSuggestionRow = function(oSuggestionRow) { return new sap.m.Input(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Input</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br> itself.
 * 
 * This event is fired when the value of the input is changed - e.g. at each keypress
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.m.Input</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br> itself.
 * 
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.attachSuggest = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'suggestionItemSelected' event of this <code>sap.m.Input</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br> itself.
 * 
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.attachSuggestionItemSelected = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br> itself.
 * 
 * When the value help indicator is clicked, this event will be fired.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.attachValueHelpRequest = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Forwards aggregations with the name of items or columns to the internal table.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {sap.m.Input} this pointer for chaining
 * 
 */
sap.m.Input.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.Input(); };

/**
 * Binder for aggregation <code>suggestionColumns</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.bindSuggestionColumns = function(oBindingInfo) { return new sap.m.Input(); };

/**
 * Binder for aggregation <code>suggestionRows</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.bindSuggestionRows = function(oBindingInfo) { return new sap.m.Input(); };

/**
 * Destroys all the suggestionColumns in the aggregation
 * named <code>suggestionColumns</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.destroySuggestionColumns = function() { return new sap.m.Input(); };

/**
 * Destroys all the suggestionItems in the aggregation
 * named <code>suggestionItems</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.destroySuggestionItems = function() { return new sap.m.Input(); };

/**
 * Destroys all the suggestionRows in the aggregation
 * named <code>suggestionRows</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.destroySuggestionRows = function() { return new sap.m.Input(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Input</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.m.Input</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.detachSuggest = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'suggestionItemSelected' event of this <code>sap.m.Input</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16.3
 * @public
 * 
 */
sap.m.Input.prototype.detachSuggestionItemSelected = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Input.prototype.detachValueHelpRequest = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Input.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The new value of the input.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Input.prototype.fireLiveChange = function(mArguments) { return new sap.m.Input(); };

/**
 * Fire event suggest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'suggestValue' of type <code>string</code>The current value which has been typed in the input.</li>
 * <li>'suggestionColumns' of type <code>sap.m.ListBase</code>The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions, fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input control.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.fireSuggest = function(mArguments) { return new sap.m.Input(); };

/**
 * Fire event suggestionItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code>This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this value will not be set.</li>
 * <li>'selectedRow' of type <code>sap.m.ColumnListItem</code>This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.
 * 
 * Note: The row result function to select a result value for the string is already executed at this time. To pick different value for the input field or to do follow up steps after the item has been selected.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.fireSuggestionItemSelected = function(mArguments) { return new sap.m.Input(); };

/**
 * Fire event valueHelpRequest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'fromSuggestions' of type <code>boolean</code>The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has been pressed.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * 
 */
sap.m.Input.prototype.fireValueHelpRequest = function(mArguments) { return new sap.m.Input(); };

/**
 * Getter for property <code>dateFormat</code>.
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 * 
 * Default value is <code>YYYY-MM-dd</code>
 * @return {string} the value of property <code>dateFormat</code>
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * @public
 * 
 */
sap.m.Input.prototype.getDateFormat = function() { return ""; };

/**
 * Getter for property <code>description</code>.
 * The description is a text after the input field, e.g. units of measurement, currencies.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>description</code>
 * @public
 * 
 */
sap.m.Input.prototype.getDescription = function() { return ""; };

/**
 * Getter for property <code>fieldWidth</code>.
 * This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
 * 
 * Default value is <code>50%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>fieldWidth</code>
 * @public
 * 
 */
sap.m.Input.prototype.getFieldWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>filterSuggests</code>.
 * Defines whether to filter the provided suggestions before showing them to the user.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>filterSuggests</code>
 * @public
 * 
 */
sap.m.Input.prototype.getFilterSuggests = function() { return false; };

/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.Input.prototype.getMaxLength = function() { return 0; };

/**
 * Getter for property <code>maxSuggestionWidth</code>.
 * If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
 * Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxSuggestionWidth</code>
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.getMaxSuggestionWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Input.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Input.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showSuggestion</code>.
 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showSuggestion</code>
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.getShowSuggestion = function() { return false; };

/**
 * Getter for property <code>showTableSuggestionValueHelp</code>.
 * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.
 * 
 * NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showTableSuggestionValueHelp</code>
 * @since 1.22.1
 * @public
 * 
 */
sap.m.Input.prototype.getShowTableSuggestionValueHelp = function() { return false; };

/**
 * Getter for property <code>showValueHelp</code>.
 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showValueHelp</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.Input.prototype.getShowValueHelp = function() { return false; };

/**
 * Getter for property <code>showValueStateMessage</code>.
 * Whether the value state message should be shown. This property is already available for sap.m.Input since 1.16.0.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showValueStateMessage</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.getShowValueStateMessage = function() { return false; };

/**
 * Getter for property <code>startSuggestion</code>.
 * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.
 * 
 * Default value is <code>1</code>
 * @return {int} the value of property <code>startSuggestion</code>
 * @since 1.21.2
 * @public
 * 
 */
sap.m.Input.prototype.getStartSuggestion = function() { return 0; };

/**
 * Getter for aggregation <code>suggestionColumns</code>.<br/>
 * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".
 * @return {sap.m.Column[]}
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionColumns = function() { return new Array(); };

/**
 * Getter for aggregation <code>suggestionItems</code>.<br/>
 * SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup. o display suggestions with two text values, it is also possible to add sap.ui.core/ListItems as SuggestionItems (since 1.21.1). For the selected ListItem, only the first value is returned to the input field.
 * @return {sap.ui.core.Item[]}
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionItems = function() { return new Array(); };

/**
 * Getter for aggregation <code>suggestionRows</code>.<br/>
 * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells.
 * The items of this aggregation are to be bound directly or to set in the suggest event method.
 * Note: If this aggregation is filled, the aggregation suggestionItems will be ignored.
 * @return {sap.m.ColumnListItem[]}
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionRows = function() { return new Array(); };

/**
 * Getter for property <code>type</code>.
 * Type of input (e.g. Text, Number, Email, Phone)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.InputType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Input.prototype.getType = function() { return new sap.m.InputType(); };

/**
 * Getter for property <code>valueHelpOnly</code>.
 * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>valueHelpOnly</code>
 * @since 1.21.0
 * @public
 * 
 */
sap.m.Input.prototype.getValueHelpOnly = function() { return false; };

/**
 * Getter for property <code>valueLiveUpdate</code>.
 * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>valueLiveUpdate</code>
 * @since 1.24
 * @public
 * 
 */
sap.m.Input.prototype.getValueLiveUpdate = function() { return false; };

/**
 * Getter for property <code>valueStateText</code>.
 * The text which is shown in the value state message popup. If not specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.
 * 
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>valueStateText</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.getValueStateText = function() { return ""; };

/**
 * Returns the width of the input.
 * @public
 * @return {string} The current width or 100% as default
 * 
 */
sap.m.Input.prototype.getWidth = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>suggestionColumns</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oSuggestionColumn the suggestionColumn whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.indexOfSuggestionColumn = function(oSuggestionColumn) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>suggestionItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oSuggestionItem the suggestionItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.indexOfSuggestionItem = function(oSuggestionItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation named <code>suggestionRows</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ColumnListItem}
 *           oSuggestionRow the suggestionRow whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.indexOfSuggestionRow = function(oSuggestionRow) { return 0; };

/**
 * Inserts a suggestionColumn into the aggregation named <code>suggestionColumns</code>.
 * @param {sap.m.Column}
 *            oSuggestionColumn the suggestionColumn to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionColumn should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionColumn is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionColumn is inserted at
 *              the last position
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.insertSuggestionColumn = function(oSuggestionColumn,iIndex) { return new sap.m.Input(); };

/**
 * Inserts a suggestionItem into the aggregation named <code>suggestionItems</code>.
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionItem is inserted at
 *              the last position
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.insertSuggestionItem = function(oSuggestionItem,iIndex) { return new sap.m.Input(); };

/**
 * Inserts a suggestionRow into the aggregation named <code>suggestionRows</code>.
 * @param {sap.m.ColumnListItem}
 *            oSuggestionRow the suggestionRow to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionRow should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionRow is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionRow is inserted at
 *              the last position
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.insertSuggestionRow = function(oSuggestionRow,iIndex) { return new sap.m.Input(); };

/**
 * Fire valueHelpRequest event on tap
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.Input.prototype.ontap = function(oEvent) {  };

/**
 * Removes all the controls in the aggregation named <code>suggestionColumns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.removeAllSuggestionColumns = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>suggestionItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.removeAllSuggestionItems = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>suggestionRows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ColumnListItem[]} an array of the removed elements (might be empty)
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.removeAllSuggestionRows = function() { return new Array(); };

/**
 * Removes an suggestionColumn from the aggregation named <code>suggestionColumns</code>.
 * @param {int | string | sap.m.Column} vSuggestionColumn the suggestionColumnto remove or its index or id
 * @return {sap.m.Column} the removed suggestionColumn or null
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.removeSuggestionColumn = function(vSuggestionColumn) { return new sap.m.Column(); };

/**
 * Removes an suggestionItem from the aggregation named <code>suggestionItems</code>.
 * @param {int | string | sap.ui.core.Item} vSuggestionItem the suggestionItemto remove or its index or id
 * @return {sap.ui.core.Item} the removed suggestionItem or null
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.removeSuggestionItem = function(vSuggestionItem) { return new sap.ui.core.Item(); };

/**
 * Removes an suggestionRow from the aggregation named <code>suggestionRows</code>.
 * @param {int | string | sap.m.ColumnListItem} vSuggestionRow the suggestionRowto remove or its index or id
 * @return {sap.m.ColumnListItem} the removed suggestionRow or null
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.removeSuggestionRow = function(vSuggestionRow) { return new sap.m.ColumnListItem(); };

/**
 * Setter for property <code>dateFormat</code>.
 * 
 * Default value is <code>YYYY-MM-dd</code>.
 * @param {string} sDateFormat new value for property <code>dateFormat</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * @public
 * 
 */
sap.m.Input.prototype.setDateFormat = function(sDateFormat) { return new sap.m.Input(); };

/**
 * Setter for property <code>description</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDescription new value for property <code>description</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setDescription = function(sDescription) { return new sap.m.Input(); };

/**
 * Setter for property <code>fieldWidth</code>.
 * 
 * Default value is <code>50%</code>.
 * @param {sap.ui.core.CSSSize} sFieldWidth new value for property <code>fieldWidth</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setFieldWidth = function(sFieldWidth) { return new sap.m.Input(); };

/**
 * Sets a custom filter function for suggestions. The default is to check whether the first item text begins with the typed value. For one and two-value suggestions this callback function will operate on sap.ui.core.Item types, for tabular suggestions the function will operate on sap.m.ColumnListItem types.
 * @param {function} fnFilter The filter function is called when displaying suggestion items and has two input parameters: the first one is the string that is currently typed in the input field and the second one is the item that is being filtered. Returning true will add this item to the popup, returning false will not display it.
 * @returns {sap.m.Input} this pointer for chaining
 * @since 1.16.1
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Input.prototype.setFilterFunction = function(fnFilter) { return new sap.m.Input(); };

/**
 * Setter for property <code>filterSuggests</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFilterSuggests new value for property <code>filterSuggests</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setFilterSuggests = function(bFilterSuggests) { return new sap.m.Input(); };

/**
 * Setter for property <code>maxLength</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength new value for property <code>maxLength</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setMaxLength = function(iMaxLength) { return new sap.m.Input(); };

/**
 * Setter for property <code>maxSuggestionWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sMaxSuggestionWidth new value for property <code>maxSuggestionWidth</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.setMaxSuggestionWidth = function(sMaxSuggestionWidth) { return new sap.m.Input(); };

/**
 * Sets a custom result filter function for tabular suggestions to select the text that is passed to the input field. Default is to check whether the first cell with a "text" property begins with the typed value. For one value and two-value suggestions this callback function is not called.
 * @param {function} fnFilter The result function is called with one parameter: the sap.m.ColumnListItem that is selected. The function must return a result string that will be displayed as the input field's value.
 * @returns {sap.m.Input} this pointer for chaining
 * @public
 * @since 1.21.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Input.prototype.setRowResultFunction = function(fnFilter) { return new sap.m.Input(); };

/**
 * Setter for property <code>showSuggestion</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSuggestion new value for property <code>showSuggestion</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16.1
 * @public
 * 
 */
sap.m.Input.prototype.setShowSuggestion = function(bShowSuggestion) { return new sap.m.Input(); };

/**
 * Setter for property <code>showTableSuggestionValueHelp</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowTableSuggestionValueHelp new value for property <code>showTableSuggestionValueHelp</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.22.1
 * @public
 * 
 */
sap.m.Input.prototype.setShowTableSuggestionValueHelp = function(bShowTableSuggestionValueHelp) { return new sap.m.Input(); };

/**
 * Setter for property <code>showValueHelp</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowValueHelp new value for property <code>showValueHelp</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Input.prototype.setShowValueHelp = function(bShowValueHelp) { return new sap.m.Input(); };

/**
 * Setter for property <code>showValueStateMessage</code>.
 * 
 * Default value is <code>true</code> 
 * @param {boolean} bShowValueStateMessage  new value for property <code>showValueStateMessage</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>startSuggestion</code>.
 * 
 * Default value is <code>1</code>.
 * @param {int} iStartSuggestion new value for property <code>startSuggestion</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.2
 * @public
 * 
 */
sap.m.Input.prototype.setStartSuggestion = function(iStartSuggestion) { return new sap.m.Input(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.InputType} sType new value for property <code>type</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setType = function(sType) { return new sap.m.Input(); };

/**
 * Setter for property <code>valueHelpOnly</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bValueHelpOnly new value for property <code>valueHelpOnly</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.0
 * @public
 * 
 */
sap.m.Input.prototype.setValueHelpOnly = function(bValueHelpOnly) { return new sap.m.Input(); };

/**
 * Setter for property <code>valueLiveUpdate</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bValueLiveUpdate new value for property <code>valueLiveUpdate</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.24
 * @public
 * 
 */
sap.m.Input.prototype.setValueLiveUpdate = function(bValueLiveUpdate) { return new sap.m.Input(); };

/**
 * Setter for property <code>valueStateText</code>.
 * 
 * Default value is empty/<code>undefined</code> 
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.setValueStateText = function(sValueStateText) { return new sap.m.InputBase(); };

/**
 * Defines the width of the input. Default value is 100%
 * @public
 * @param {string} sWidth
 * 
 */
sap.m.Input.prototype.setWidth = function(sWidth) {  };

/**
 * Unbinder for aggregation <code>suggestionColumns</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.unbindSuggestionColumns = function() { return new sap.m.Input(); };

/**
 * Unbinder for aggregation <code>suggestionRows</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.Input.prototype.unbindSuggestionRows = function() { return new sap.m.Input(); };


// ---- sap.m.InputBase --------------------------------------------------------------------------

/**
 * Constructor for a new InputBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Base control for Input fields.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.InputBase = function(sId,mSettings) {};
/**
 * This event gets fired when the input operation has finished and the value has changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input.
 * @public
 * 
 */
sap.m.InputBase.prototype.change = function(oControlEvent) {  };

/**
 * Applies the focus info.
 * To be overwritten by subclasses.
 * @param {object} oFocusInfo
 * @protected
 * 
 */
sap.m.InputBase.prototype.applyFocusInfo = function(oFocusInfo) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.InputBase</code>.<br> itself.
 * 
 * This event gets fired when the input operation has finished and the value has changed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.InputBase(); };

/**
 * Registers an event listener to the browser input event.
 * @param {function} fnCallback Function to be called when the value of the input element is changed.
 * @deprecated Since 1.22. Instead use event delegation(oninput) to listen input event.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @protected
 * 
 */
sap.m.InputBase.prototype.bindToInputEvent = function(fnCallback) { return new sap.m.InputBase(); };

/**
 * Binder for property <code>value</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.bindValue = function(oBindingInfo) { return new sap.m.InputBase(); };

/**
 * Close value state message.
 * @since 1.26
 * @protected
 * 
 */
sap.m.InputBase.prototype.closeValueStateMessage = function() {  };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.InputBase(); };

/**
 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.InputBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The new value of the input.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.InputBase.prototype.fireChange = function(mArguments) { return new sap.m.InputBase(); };

/**
 * Fires the change event for the listeners
 * @protected
 * @param {String} sValue value of the input.
 * @param {Object} [oParams] extra event parameters.
 * @since 1.22.1
 * 
 */
sap.m.InputBase.prototype.fireChangeEvent = function(sValue,oParams) {  };

/**
 * Get the reference element which the message popup should dock to.
 * @return {object} DOM element which the message popup should dock to
 * @since 1.26
 * @protected
 * 
 */
sap.m.InputBase.prototype.getDomRefForValueStateMessage = function() { return new Object(); };

/**
 * Getter for property <code>editable</code>.
 * Controls if a user can change the value.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @since 1.12.0
 * @public
 * 
 */
sap.m.InputBase.prototype.getEditable = function() { return false; };

/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the input value (default is true).
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getEnabled = function() { return false; };

/**
 * Returns an object representing the serialized focus information.
 * To be overwritten by subclasses.
 * @return {object} An object representing the serialized focus information.
 * @protected
 * 
 */
sap.m.InputBase.prototype.getFocusInfo = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.InputBase.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.InputBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * The "name" property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>placeholder</code>.
 * Text shown when no value available.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getPlaceholder = function() { return ""; };

/**
 * Getter for property <code>showValueStateMessage</code>.
 * Whether the value state message should be shown. This property is already available for sap.m.Input since 1.16.0.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showValueStateMessage</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.InputBase.prototype.getShowValueStateMessage = function() { return false; };

/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.InputBase.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Getter for property <code>value</code>.
 * Defines the value of the input.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getValue = function() { return ""; };

/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>valueStateText</code>.
 * The text which is shown in the value state message popup. If not specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>valueStateText</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.InputBase.prototype.getValueStateText = function() { return ""; };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Handles the change event.
 * @protected
 * @param {object} oEvent
 * @returns {true|undefined} true when change event is fired
 * 
 */
sap.m.InputBase.prototype.onChange = function(oEvent) { return null; };

/**
 * Hook method that gets called when the input value is reverted with hitting escape.
 * It may require to re-implement this method from sub classes for control specific behaviour.
 * @protected
 * @param {String} sValue Reverted value of the input.
 * @since 1.26
 * 
 */
sap.m.InputBase.prototype.onValueRevertedByEscape = function(sValue) {  };

/**
 * Open value state message popup.
 * @since 1.26
 * @protected
 * 
 */
sap.m.InputBase.prototype.openValueStateMessage = function() {  };

/**
 * Selects the text within the input field between the specified start and end positions.
 * Only supported for input control’s type of Text, Url, Tel and Password.
 * @param {integer} iSelectionStart The index into the text at which the first selected character is located.
 * @param {integer} iSelectionEnd The index into the text at which the last selected character is located.
 * @returns {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.22.1
 * 
 */
sap.m.InputBase.prototype.selectText = function(iSelectionStart,iSelectionEnd) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>editable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable new value for property <code>editable</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @since 1.12.0
 * @public
 * 
 */
sap.m.InputBase.prototype.setEditable = function(bEditable) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setEnabled = function(bEnabled) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setName = function(sName) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>placeholder</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sPlaceholder new value for property <code>placeholder</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>showValueStateMessage</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValueStateMessage new value for property <code>showValueStateMessage</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.InputBase.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>textAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign new value for property <code>textAlign</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.InputBase.prototype.setTextAlign = function(sTextAlign) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is empty/<code>undefined</code>.
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setValue = function(sValue) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>valueState</code>.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sValueState New value for property <code>valueState</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setValueState = function(sValueState) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>valueStateText</code>.
 * 
 * Default value is empty/<code>undefined</code> 
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.InputBase.prototype.setValueStateText = function(sValueStateText) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setWidth = function(sWidth) { return new sap.m.InputBase(); };

/**
 * Unbinder for property <code>value</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.unbindValue = function() { return new sap.m.InputBase(); };

/**
 * Sets the DOM value of the input field and handles placeholder visibility.
 * @param {string} sValue value of the input field.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @since 1.22
 * @protected
 * 
 */
sap.m.InputBase.prototype.updateDomValue = function(sValue) { return new sap.m.InputBase(); };


// ---- sap.m.InputListItem --------------------------------------------------------------------------

/**
 * Constructor for a new InputListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * List item should be used for a label and an input field.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.InputListItem = function(sId,mSettings) {};
/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.addContent = function(oContent) { return new sap.m.InputListItem(); };

/**
 * Binder for aggregation <code>content</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.bindContent = function(oBindingInfo) { return new sap.m.InputListItem(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.destroyContent = function() { return new sap.m.InputListItem(); };

/**
 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.InputListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content controls can be added
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.InputListItem.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>label</code>.
 * Label of the list item
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>label</code>
 * @public
 * 
 */
sap.m.InputListItem.prototype.getLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.InputListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.InputListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.InputListItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.InputListItem(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.InputListItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.InputListItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>label</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sLabel new value for property <code>label</code>
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.setLabel = function(sLabel) { return new sap.m.InputListItem(); };

/**
 * Unbinder for aggregation <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.unbindContent = function() { return new sap.m.InputListItem(); };


// ---- sap.m.InputType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.InputType.toString = function() { return ""; };

// ---- sap.m.Label --------------------------------------------------------------------------

/**
 * Constructor for a new Label.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.m.LabelDesign</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Label,sap.ui.core.IShrinkable
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Label = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Label.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>design</code>.
 * set design of a label to either Standard or Bold
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.LabelDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.m.Label.prototype.getDesign = function() { return new sap.m.LabelDesign(); };

/**
 * Id of the element which is the current target of the <code>labelFor</code> association, or null
 * 
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Label.prototype.getLabelFor = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.m.Label.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Label.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>required</code>.
 * Indicates that user input is required in the input this label labels.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>required</code>
 * @public
 * 
 */
sap.m.Label.prototype.getRequired = function() { return false; };

/**
 * Getter for property <code>text</code>.
 * Label Text to be displayed
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Label.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>textAlign</code>.
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.m.Label.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.Label.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Getter for property <code>width</code>.
 * Width of Label
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Label.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>design</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.LabelDesign} sDesign new value for property <code>design</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setDesign = function(sDesign) { return new sap.m.Label(); };

/**
 * Setter for the associated <code>labelFor</code>.
 * @param {sap.ui.core.Control} oLabelFor Id of an element which becomes the new target of this labelFor association. Alternatively, an element instance may be given.
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setLabelFor = function(oLabelFor) { return new sap.m.Label(); };

/**
 * Setter for property <code>required</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRequired new value for property <code>required</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setRequired = function(bRequired) { return new sap.m.Label(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setText = function(sText) { return new sap.m.Label(); };

/**
 * Setter for property <code>textAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign new value for property <code>textAlign</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Label(); };

/**
 * Setter for property <code>textDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection new value for property <code>textDirection</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Label(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setWidth = function(sWidth) { return new sap.m.Label(); };


// ---- sap.m.LabelDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.LabelDesign.toString = function() { return ""; };

// ---- sap.m.Link --------------------------------------------------------------------------

/**
 * Constructor for a new Link.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: false)</li>
 * <li>{@link #getSubtle subtle} : boolean (default: false)</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Link = function(sId,mSettings) {};
/**
 * Event is fired when the user triggers the link control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Link.prototype.press = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Link</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Link</code>.<br> itself.
 * 
 * Event is fired when the user triggers the link control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Link</code>.<br/> itself.
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Link(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Link</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Link(); };

/**
 * Creates a new subclass of class sap.m.Link with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Link.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * 
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * 
 */
sap.m.Link.prototype.firePress = function(mArguments) { return false; };

/**
 * Getter for property <code>emphasized</code>.
 * Set this property to true if the link should appear emphasized.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>emphasized</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Link.prototype.getEmphasized = function() { return false; };

/**
 * Getter for property <code>enabled</code>.
 * Whether the link can be triggered by the user.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Link.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>href</code>.
 * The link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * 
 */
sap.m.Link.prototype.getHref = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.Link.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Link.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>subtle</code>.
 * Subtle link is only to be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other usecase
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>subtle</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Link.prototype.getSubtle = function() { return false; };

/**
 * Getter for property <code>target</code>.
 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>target</code>
 * @public
 * 
 */
sap.m.Link.prototype.getTarget = function() { return ""; };

/**
 * Getter for property <code>text</code>.
 * Link text to be displayed.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Link.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>width</code>.
 * Width of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Link.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>wrapping</code>.
 * Whether the link text is allowed to wrap when tehre is not sufficient space.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.m.Link.prototype.getWrapping = function() { return false; };

/**
 * Setter for property <code>emphasized</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEmphasized new value for property <code>emphasized</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.Link.prototype.setEmphasized = function(bEmphasized) { return new sap.m.Link(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setEnabled = function(bEnabled) { return new sap.m.Link(); };

/**
 * Setter for property <code>href</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sHref new value for property <code>href</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setHref = function(sHref) { return new sap.m.Link(); };

/**
 * Setter for property <code>subtle</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSubtle new value for property <code>subtle</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.Link.prototype.setSubtle = function(bSubtle) { return new sap.m.Link(); };

/**
 * Setter for property <code>target</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTarget new value for property <code>target</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setTarget = function(sTarget) { return new sap.m.Link(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setText = function(sText) { return new sap.m.Link(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setWidth = function(sWidth) { return new sap.m.Link(); };

/**
 * Setter for property <code>wrapping</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bWrapping new value for property <code>wrapping</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setWrapping = function(bWrapping) { return new sap.m.Link(); };


// ---- sap.m.List --------------------------------------------------------------------------

/**
 * Constructor for a new List.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The List control provides a container for all types of list items.
 * For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..
 * @extends sap.m.ListBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.List = function(sId,mSettings) {};
/**
 * Adds some column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to add; to add; if empty, nothing is inserted
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.addColumn = function(oColumn) { return new sap.m.List(); };

/**
 * Destroys all the columns in the aggregation
 * named <code>columns</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.destroyColumns = function() { return new sap.m.List(); };

/**
 * Creates a new subclass of class sap.m.List with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.List.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the list. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @since 1.14
 * @public
 * 
 */
sap.m.List.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns
 * @return {sap.m.Column[]}
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.getColumns = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.List.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.List.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.List(); };

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.m.Column} vColumn the columnto remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @public
 * 
 */
sap.m.List.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * Setter for property <code>backgroundDesign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign new value for property <code>backgroundDesign</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @since 1.14
 * @public
 * 
 */
sap.m.List.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.List(); };


// ---- sap.m.ListBase --------------------------------------------------------------------------

/**
 * Constructor for a new ListBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInset inset} : boolean (default: false)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign</li>
 * <li>{@link #getFooterText footerText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li>
 * <li>{@link #getShowUnread showUnread} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: true)</li>
 * <li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getModeAnimationOn modeAnimationOn} : boolean (default: true)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators</li>
 * <li>{@link #getSwipeDirection swipeDirection} : sap.m.SwipeDirection</li>
 * <li>{@link #getGrowing growing} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int (default: 20)</li>
 * <li>{@link #getGrowingTriggerText growingTriggerText} : string</li>
 * <li>{@link #getGrowingScrollToLoad growingScrollToLoad} : boolean (default: false)</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ListItemBase[]</li>
 * <li>{@link #getSwipeContent swipeContent} : sap.ui.core.Control</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:swipe swipe} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:growingStarted growingStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:growingFinished growingFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateStarted updateStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateFinished updateFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * sap.m.ListBase Control provides a basic functionality of List and Table. Selection, deletion, unread states and inset style are also maintained here.
 * 
 * Note: The ListBase including all contained items is completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists with many items. As such the usage of a list is not recommended for these use cases.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase = function(sId,mSettings) {};
/**
 * This event is called when "growing" feature is enabled and after new page loaded and DOM updated.
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 * 
 */
sap.m.ListBase.prototype.growingFinished = function(oControlEvent) {  };

/**
 * This event is called when "growing" feature is enabled and before new page loaded.
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 * 
 */
sap.m.ListBase.prototype.growingStarted = function(oControlEvent) {  };

/**
 * This event is called when an item is pressed regardless of the selection mode.
 * NOTE: This event is fired for all kind of list items unless the item's type is "Inactive".
 * @event
 * @since 1.20
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the pressed event.
 * NOTE: This event is fired also for "GroupHeaderListItem" which does not have binding context.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the container.
 * @public
 * 
 */
sap.m.ListBase.prototype.itemPress = function(oControlEvent) {  };

/**
 * Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect"
 * @event
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the select.
 * @public
 * 
 */
sap.m.ListBase.prototype.select = function(oControlEvent) {  };

/**
 * Event is fired when selection is changed via user interaction inside the control.
 * @event
 * @since 1.16
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item whose selection has changed. In "multi-selection" mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.ListItemBase[]} oControlEvent.getParameters.listItems This parameter is filled with array of list items whose selection has changed. This parameter can be used for multi-selection mode.
 * @param {boolean} oControlEvent.getParameters.selected This flag indicates whether the "listItem" parameter is selected or not.
 * @public
 * 
 */
sap.m.ListBase.prototype.selectionChange = function(oControlEvent) {  };

/**
 * This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The listitem which fired the swipe.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.swipeContent Given swipeContent control to show on the right hand side of a list item.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl Holds which control caused the swipe event in within the Item.
 * @public
 * 
 */
sap.m.ListBase.prototype.swipe = function(oControlEvent) {  };

/**
 * This event is called after items binding and afterwards related DOM is updated.
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.reason The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This parameter can be used if "growing" feature is enabled.
 * @public
 * 
 */
sap.m.ListBase.prototype.updateFinished = function(oControlEvent) {  };

/**
 * This event is called before items binding is updated.
 * Note: Event handler should not invalidate the control.
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.reason The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This parameter can be used if "growing" feature is enabled.
 * @public
 * 
 */
sap.m.ListBase.prototype.updateStarted = function(oControlEvent) {  };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.addItem = function(oItem) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * Event is fired when delete icon is pressed by user.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.attachDelete = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'growingFinished' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * This event is called when "growing" feature is enabled and after new page loaded and DOM updated.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.attachGrowingFinished = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'growingStarted' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * This event is called when "growing" feature is enabled and before new page loaded.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * 
 */
sap.m.ListBase.prototype.attachGrowingStarted = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'itemPress' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * This event is called when an item is pressed regardless of the selection mode.
 * NOTE: This event is fired for all kind of list items unless the item's type is "Inactive".
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.attachItemPress = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect"
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * 
 */
sap.m.ListBase.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * Event is fired when selection is changed via user interaction inside the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.attachSwipe = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'updateFinished' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * This event is called after items binding and afterwards related DOM is updated.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.attachUpdateFinished = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'updateStarted' event of this <code>sap.m.ListBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br> itself.
 * 
 * This event is called before items binding is updated.
 * Note: Event handler should not invalidate the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.attachUpdateStarted = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Binder for aggregation <code>items</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.bindItems = function(oBindingInfo) { return new sap.m.ListBase(); };

/**
 * Destroys the headerToolbar in the aggregation
 * named <code>headerToolbar</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyHeaderToolbar = function() { return new sap.m.ListBase(); };

/**
 * Destroys the infoToolbar in the aggregation
 * named <code>infoToolbar</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyInfoToolbar = function() { return new sap.m.ListBase(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyItems = function() { return new sap.m.ListBase(); };

/**
 * Destroys the swipeContent in the aggregation
 * named <code>swipeContent</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.destroySwipeContent = function() { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.detachDelete = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'growingFinished' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @public
 * 
 */
sap.m.ListBase.prototype.detachGrowingFinished = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'growingStarted' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @public
 * 
 */
sap.m.ListBase.prototype.detachGrowingStarted = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'itemPress' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.20
 * @public
 * 
 */
sap.m.ListBase.prototype.detachItemPress = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSwipe = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'updateFinished' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16.3
 * @public
 * 
 */
sap.m.ListBase.prototype.detachUpdateFinished = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'updateStarted' event of this <code>sap.m.ListBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16.3
 * @public
 * 
 */
sap.m.ListBase.prototype.detachUpdateStarted = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ListBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event delete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code>The list item which fired the delete.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListBase.prototype.fireDelete = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event growingFinished to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'actual' of type <code>int</code>Actual number of items.</li>
 * <li>'total' of type <code>int</code>Total number of items.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.fireGrowingFinished = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event growingStarted to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'actual' of type <code>int</code>Actual number of items.</li>
 * <li>'total' of type <code>int</code>Total number of items.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * 
 */
sap.m.ListBase.prototype.fireGrowingStarted = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event itemPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code>The list item which fired the pressed event.
 * NOTE: This event is fired also for "GroupHeaderListItem" which does not have binding context.</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code>The control which caused the press event within the container.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.fireItemPress = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code>The list item which fired the select.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * 
 */
sap.m.ListBase.prototype.fireSelect = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event selectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code>The list item whose selection has changed. In "multi-selection" mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.</li>
 * <li>'listItems' of type <code>sap.m.ListItemBase[]</code>This parameter is filled with array of list items whose selection has changed. This parameter can be used for multi-selection mode.</li>
 * <li>'selected' of type <code>boolean</code>This flag indicates whether the "listItem" parameter is selected or not.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.fireSelectionChange = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event swipe to attached listeners.
 * 
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code>The listitem which fired the swipe.</li>
 * <li>'swipeContent' of type <code>sap.ui.core.Control</code>Given swipeContent control to show on the right hand side of a list item.</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code>Holds which control caused the swipe event in within the Item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * 
 */
sap.m.ListBase.prototype.fireSwipe = function(mArguments) { return false; };

/**
 * Fire event updateFinished to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'reason' of type <code>string</code>The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"</li>
 * <li>'actual' of type <code>int</code>Actual number of items.</li>
 * <li>'total' of type <code>int</code>The total count of bound items. This parameter can be used if "growing" feature is enabled.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.fireUpdateFinished = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Fire event updateStarted to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'reason' of type <code>string</code>The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"</li>
 * <li>'actual' of type <code>int</code>Actual number of items.</li>
 * <li>'total' of type <code>int</code>The total count of bound items. This parameter can be used if "growing" feature is enabled.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.fireUpdateStarted = function(mArguments) { return new sap.m.ListBase(); };

/**
 * Getter for property <code>enableBusyIndicator</code>.
 * When this property is set to "true", the List/Table will automatically display a BusyIndicator when it detects that data is being loaded or filtered. This BusyIndicator blocks the interaction with the items until data loading is finished.
 * For the List/Table controls BusyIndicator will be shown after one second. This behavior can be customized by setting the "busyIndicatorDelay" property.
 * When this property is set to "false", items will stay on the List/Table until data loading is finished.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableBusyIndicator</code>
 * @since 1.20.2
 * @public
 * 
 */
sap.m.ListBase.prototype.getEnableBusyIndicator = function() { return false; };

/**
 * Getter for property <code>footerText</code>.
 * Footer Text
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>footerText</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getFooterText = function() { return ""; };

/**
 * Getter for property <code>growing</code>.
 * Sets the growing(paging) feature of control.
 * Note: This feature only works with item binding and should not be used with two way binding!
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>growing</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowing = function() { return false; };

/**
 * Returns growing information as object with "actual" and "total" keys.
 * Note: This function returns "null" if "growing" feature is disabled.
 * @type object
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getGrowingInfo = function() { return new Object(); };

/**
 * Getter for property <code>growingScrollToLoad</code>.
 * If true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.
 * This property can be used only if "growing" property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>growingScrollToLoad</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingScrollToLoad = function() { return false; };

/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items requested from the server. To activate this you should set "growing" property to "true".
 * 
 * Default value is <code>20</code>
 * @return {int} the value of property <code>growingThreshold</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingThreshold = function() { return 0; };

/**
 * Getter for property <code>growingTriggerText</code>.
 * This text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text ("More") coming from the message bundle.
 * This property can be used only if "growing" property is set "true"
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>growingTriggerText</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingTriggerText = function() { return ""; };

/**
 * Getter for property <code>headerDesign</code>.
 * List header style. Possible vales are "Standard" and "Plain"
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ListHeaderDesign} the value of property <code>headerDesign</code>
 * @since 1.14
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderDesign = function() { return new sap.m.ListHeaderDesign(); };

/**
 * Getter for property <code>headerText</code>.
 * The header text appearing in the list/table header.
 * Note: if "headerToolbar" aggregation is set, then this property is ignored.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>headerText</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderText = function() { return ""; };

/**
 * Getter for aggregation <code>headerToolbar</code>.<br/>
 * Header can be used as a Toolbar to add extra controls for user interactions.
 * Note: This aggregation overwrites "headerText" property.
 * @return {sap.m.Toolbar}
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Getter for property <code>includeItemInSelection</code>.
 * This property decides if the list item interacts with the selection. If it is "true", a tap on the item will set the selection control in front of the list item.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>includeItemInSelection</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getIncludeItemInSelection = function() { return false; };

/**
 * Getter for aggregation <code>infoToolbar</code>.<br/>
 * InfoBar is placed below the header and can be used to show extra information to the user.
 * @return {sap.m.Toolbar}
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Getter for property <code>inset</code>.
 * Inset style false/true
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>inset</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getInset = function() { return false; };

/**
 * Returns ItemNavigation for controls uses List
 * @since 1.16.5
 * @returns {sap.ui.core.delegate.ItemNavigation|undefined}
 * @protected
 * 
 */
sap.m.ListBase.prototype.getItemNavigation = function() { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of this list or rows of the table.
 * @return {sap.m.ListItemBase[]}
 * @public
 * 
 */
sap.m.ListBase.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ListBase.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ListBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>mode</code>.
 * Mode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ListMode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getMode = function() { return new sap.m.ListMode(); };

/**
 * Getter for property <code>modeAnimationOn</code>.
 * Defines if animations will be shown when activating or deactivating selection modes.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>modeAnimationOn</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getModeAnimationOn = function() { return false; };

/**
 * Getter for property <code>noDataText</code>.
 * This text is displayed when the control has no data.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getNoDataText = function() { return ""; };

/**
 * Getter for property <code>rememberSelections</code>.
 * By default, if you have binding then the control remembers selections after binding update(sorting, filter, refresh). If this is not a desired behavior for your use case, you can switch this off with setting it to "false".
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @since 1.16.6
 * @public
 * 
 */
sap.m.ListBase.prototype.getRememberSelections = function() { return false; };

/**
 * Returns the binding contexts of the selected items.
 * Note: This method returns an empty array if no databinding is used.
 * @param {boolean} bAll
 *         Set true to include even invisible selected items(e.g. the selections from the previous filters).
 *         Note: In single selection modes, only the last selected item's binding context is returned in array.
 * @type object[]
 * @public
 * @since 1.18.6
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSelectedContexts = function(bAll) { return new Array(); };

/**
 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
 * @type sap.m.ListItemBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSelectedItem = function() { return new sap.m.ListItemBase(); };

/**
 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
 * @type sap.m.ListItemBase[]
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSelectedItems = function() { return new Array(); };

/**
 * Getter for property <code>showNoData</code>.
 * Enables an information text(see "noDataText" property) when the control has no data.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showNoData</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowNoData = function() { return false; };

/**
 * Getter for property <code>showSeparators</code>.
 * Defines which separator style will be used.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ListSeparators} the value of property <code>showSeparators</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowSeparators = function() { return new sap.m.ListSeparators(); };

/**
 * Getter for property <code>showUnread</code>.
 * Activates the unread feature for all items.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showUnread</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowUnread = function() { return false; };

/**
 * Getter for aggregation <code>swipeContent</code>.<br/>
 * User can swipe to bring in this control on the right hand side of a list item.
 * Note: This functionality gets disabled for non-touch devices.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.ListBase.prototype.getSwipeContent = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>swipeDirection</code>.
 * Direction of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.SwipeDirection} the value of property <code>swipeDirection</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getSwipeDirection = function() { return new sap.m.SwipeDirection(); };

/**
 * Returns swiped list item. When no item is swiped, "null" is returned.
 * @type sap.m.ListItemBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSwipedItem = function() { return new sap.m.ListItemBase(); };

/**
 * Getter for property <code>width</code>.
 * Sets the width of the list.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ListItemBase}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ListBase.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ListBase(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ListBase.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ListItemBase} vItem the itemto remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * 
 */
sap.m.ListBase.prototype.removeItem = function(vItem) { return new sap.m.ListItemBase(); };

/**
 * Removes visible selections of the current selection mode.
 * @param {boolean} bAll
 *         Since version 1.16.3. This control keeps old selections after filter or sorting. Set this parameter "true" to remove all selections.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.removeSelections = function(bAll) { return new sap.m.ListBase(); };

/**
 * Select all items in "MultiSelection" mode.
 * @type sap.m.ListBase
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.selectAll = function() { return new sap.m.ListBase(); };

/**
 * Setter for property <code>enableBusyIndicator</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableBusyIndicator new value for property <code>enableBusyIndicator</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.20.2
 * @public
 * 
 */
sap.m.ListBase.prototype.setEnableBusyIndicator = function(bEnableBusyIndicator) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>footerText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sFooterText new value for property <code>footerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setFooterText = function(sFooterText) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>growing</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGrowing new value for property <code>growing</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowing = function(bGrowing) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>growingScrollToLoad</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGrowingScrollToLoad new value for property <code>growingScrollToLoad</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingScrollToLoad = function(bGrowingScrollToLoad) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>growingThreshold</code>.
 * 
 * Default value is <code>20</code>.
 * @param {int} iGrowingThreshold new value for property <code>growingThreshold</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingThreshold = function(iGrowingThreshold) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>growingTriggerText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sGrowingTriggerText new value for property <code>growingTriggerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingTriggerText = function(sGrowingTriggerText) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>headerDesign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ListHeaderDesign} sHeaderDesign new value for property <code>headerDesign</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.14
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderDesign = function(sHeaderDesign) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>headerText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sHeaderText new value for property <code>headerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderText = function(sHeaderText) { return new sap.m.ListBase(); };

/**
 * Setter for the aggregated <code>headerToolbar</code>.
 * @param {sap.m.Toolbar} oHeaderToolbar the headerToolbar to set
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderToolbar = function(oHeaderToolbar) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>includeItemInSelection</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIncludeItemInSelection new value for property <code>includeItemInSelection</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setIncludeItemInSelection = function(bIncludeItemInSelection) { return new sap.m.ListBase(); };

/**
 * Setter for the aggregated <code>infoToolbar</code>.
 * @param {sap.m.Toolbar} oInfoToolbar the infoToolbar to set
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.ListBase.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>inset</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bInset new value for property <code>inset</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setInset = function(bInset) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>mode</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ListMode} sMode new value for property <code>mode</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setMode = function(sMode) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>modeAnimationOn</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bModeAnimationOn new value for property <code>modeAnimationOn</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setModeAnimationOn = function(bModeAnimationOn) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>noDataText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNoDataText new value for property <code>noDataText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setNoDataText = function(sNoDataText) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>rememberSelections</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bRememberSelections new value for property <code>rememberSelections</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @since 1.16.6
 * @public
 * 
 */
sap.m.ListBase.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.ListBase(); };

/**
 * Selects or deselects the given list item.
 * @param {sap.m.ListItemBase} oListItem
 *         The list item whose selection to be changed. This parameter is mandatory.
 * @param {boolean} bSelect
 *         Sets selected status of the list item. Default value is true.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.setSelectedItem = function(oListItem,bSelect) { return new sap.m.ListBase(); };

/**
 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
 * @param {string} sId
 *         The id of the list item whose selection to be changed.
 * @param {boolean} bSelect
 *         Sets selected status of the list item. Default value is true.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.setSelectedItemById = function(sId,bSelect) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>showNoData</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowNoData new value for property <code>showNoData</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowNoData = function(bShowNoData) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>showSeparators</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ListSeparators} sShowSeparators new value for property <code>showSeparators</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowSeparators = function(sShowSeparators) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>showUnread</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowUnread new value for property <code>showUnread</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowUnread = function(bShowUnread) { return new sap.m.ListBase(); };

/**
 * Setter for the aggregated <code>swipeContent</code>.
 * @param {sap.ui.core.Control} oSwipeContent the swipeContent to set
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setSwipeContent = function(oSwipeContent) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>swipeDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.SwipeDirection} sSwipeDirection new value for property <code>swipeDirection</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setSwipeDirection = function(sSwipeDirection) { return new sap.m.ListBase(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setWidth = function(sWidth) { return new sap.m.ListBase(); };

/**
 * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.
 * Note: If users try to tap inside of the list but outside of the swipeContent then control hides automatically.
 * @param {any} oCallback
 *         This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.swipeOut = function(oCallback) { return new sap.m.ListBase(); };

/**
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.unbindItems = function() { return new sap.m.ListBase(); };


// ---- sap.m.ListHeaderDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListHeaderDesign.toString = function() { return ""; };

// ---- sap.m.ListItemBase --------------------------------------------------------------------------

/**
 * Constructor for a new ListItemBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ListType</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getUnread unread} : boolean (default: false)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getCounter counter} : int</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:detailPress detailPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ListItemBase contains the core features of all specific list items.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListItemBase = function(sId,mSettings) {};
/**
 * Event is fired when the user clicks on the detail button of the control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detailPress = function(oControlEvent) {  };

/**
 * detail tap event
 * @event
 * @deprecated Since version 7.20.0. 
 * This event is deprecated, use the detailPress event instead.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detailTap = function(oControlEvent) {  };

/**
 * Event is fired when the user clicks on the control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.press = function(oControlEvent) {  };

/**
 * tap event
 * @event
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the press event instead.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.tap = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br> itself.
 * 
 * Event is fired when the user clicks on the detail button of the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachDetailPress = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br> itself.
 * 
 * detail tap event
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 7.20.0. 
 * This event is deprecated, use the detailPress event instead.
 * 
 */
sap.m.ListItemBase.prototype.attachDetailTap = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br> itself.
 * 
 * Event is fired when the user clicks on the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br> itself.
 * 
 * tap event
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the press event instead.
 * 
 */
sap.m.ListItemBase.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachDetailPress = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @deprecated Since version 7.20.0. 
 * This event is deprecated, use the detailPress event instead.
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachDetailTap = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the press event instead.
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ListItemBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event detailPress to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.fireDetailPress = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * Fire event detailTap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 7.20.0. 
 * This event is deprecated, use the detailPress event instead.
 * 
 */
sap.m.ListItemBase.prototype.fireDetailTap = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.firePress = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * Fire event tap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.20.0. 
 * This event is deprecated, use the press event instead.
 * 
 */
sap.m.ListItemBase.prototype.fireTap = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * Getter for property <code>counter</code>.
 * Property sets a counter bubble with the integer given.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>counter</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getCounter = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.ListItemBase.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ListItemBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>selected</code>.
 * This property defines the select state of the list item when using Single/Multi-Selection.
 * 
 * Note: Binding the "selected" property in single selection mode, may cause unwanted results, if you have more than one selected item in your binding
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getSelected = function() { return false; };

/**
 * Returns the tabbable DOM elements as a jQuery collection
 * @returns {jQuery} jQuery object
 * @protected
 * @since 1.26
 * 
 */
sap.m.ListItemBase.prototype.getTabbables = function() { return null; };

/**
 * Getter for property <code>type</code>.
 * Type of the list item, defines the behaviour
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ListType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getType = function() { return new sap.m.ListType(); };

/**
 * Getter for property <code>unread</code>.
 * If the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>unread</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getUnread = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * Invisible list items are not rendered
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getVisible = function() { return false; };

/**
 * returns the state of the item selection as a boolean
 * @type boolean
 * @public
 * @deprecated Since version 1.10.2. 
 * API Change makes this method unnecessary
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListItemBase.prototype.isSelected = function() { return false; };

/**
 * Setter for property <code>counter</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iCounter new value for property <code>counter</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setCounter = function(iCounter) { return new sap.m.ListItemBase(); };

/**
 * Setter for property <code>selected</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected new value for property <code>selected</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setSelected = function(bSelected) { return new sap.m.ListItemBase(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ListType} sType new value for property <code>type</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setType = function(sType) { return new sap.m.ListItemBase(); };

/**
 * Setter for property <code>unread</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUnread new value for property <code>unread</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setUnread = function(bUnread) { return new sap.m.ListItemBase(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setVisible = function(bVisible) { return new sap.m.ListItemBase(); };


// ---- sap.m.ListMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListMode.toString = function() { return ""; };

// ---- sap.m.ListSeparators --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListSeparators.toString = function() { return ""; };

// ---- sap.m.ListType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListType.toString = function() { return ""; };

// ---- sap.m.MessageBox --------------------------------------------------------------------------

/**
 * Displays an alert dialog with the given message and an OK button (no icons).
 * 
 * <pre>
 * sap.m.MessageBox.alert("This message should appear in the alert", {
 *     title: "Alert",                        // default
 *     onClose: null,                         // default
 *     styleClass: ""                         // default
 * });
 * </pre>
 * 
 * If a callback is given, it is called after the alert dialog has been closed
 * by the user via the OK button. The callback is called with the following signature:
 * 
 * <pre>
 *   function (oAction)
 * </pre>
 * 
 * where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button 
 * 	or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.
 * 
 * The alert dialog opened by this method is processed asynchronously.
 * Applications have to use the <code>fnCallback</code> to continue work after the
 * user closed the alert dialog.
 * @param {string | sap.ui.core.Control} vMessage Message to be displayed in the alert dialog
 * @param {object} [mOptions] Optionally other options
 * @param {function} [mOptions.onClose] callback function to be called when the user closes the dialog
 * @param {string} [mOptions.title='Alert'] Title to be displayed in the alert dialog
 * @param {string} [mOptions.id] ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] Added since version 1.21.2. CSS style class which is added to the alert dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @public
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.alert = function(vMessage,mOptions) {  };

/**
 * Displays a confirmation dialog with the given message, a QUESTION icon, an OK button
 * and a Cancel button. If a callback is given, it is called after the confirmation box 
 * has been closed by the user via one of the buttons.
 * 
 * <pre>
 * sap.m.MessageBox.confirm("This message should appear in the confirm", {
 *     title: "Confirm",                      // default
 *     onClose: null                          // default
 *     styleClass: ""                         // default
 * });
 * </pre>
 * 
 * The callback is called with the following signature
 * 
 * <pre>
 *   function(oAction)
 * </pre>
 * 
 * where oAction is set by one of the following three values:
 * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
 * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
 * 3. null: Confirm dialog is closed by Calling <code>sap.m.InstanceManager.closeAllDialogs()</code>
 * 
 * The confirmation dialog opened by this method is processed asynchronously.
 * Applications have to use the <code>fnCallback</code> to continue work after the
 * user closed the confirmation dialog
 * @param {string | sap.ui.core.Control} vMessage Message to display in the confirmation dialog
 * @param {object} [mOptions] Optionally other options
 * @param {function} [mOptions.onClose] Callback to be called when the user closes the dialog
 * @param {string} [mOptions.onClose='Confirmation'] Title to display in the confirmation dialog
 * @param {string} [mOptions.id] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] Added since version 1.21.2. CSS style class which is added to the confirmation dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @public
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.confirm = function(vMessage,mOptions) {  };

/**
 * Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.
 * After the user has tapped a button, the <code>onClose</code> function is invoked when given.
 * 
 * The only mandatory parameter is <code>vMessage</code>. Either a string with the corresponding text or even
 * a layout control could be provided.
 * 
 * <pre>
 * sap.m.MessageBox.show("This message should appear in the message box", {
 *     icon: sap.m.MessageBox.Icon.NONE,      // default
 *     title: "",                             // default
 *     actions: sap.m.MessageBox.Action.OK    // default
 *     onClose: null                          // default
 *     styleClass: ""                         // default
 * });
 * </pre>
 * 
 * The created dialog is executed asynchronously. When it has been created and registered for rendering,
 * this function returns without waiting for a user reaction.
 * 
 * When applications have to react on the users choice, they have to provide a callback function and
 * postpone any reaction on the user choice until that callback is triggered.
 * 
 * The signature of the callback is
 * 
 * function (oAction);
 * 
 * where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,
 * a sap.m.MessageBox.Action.Close is returned.
 * @param {string | sap.ui.core.Control} vMessage The message to be displayed.
 * @param {object} [mOptions] Optionally other options.
 * @param {sap.m.MessageBox.Icon} [mOptions.icon] The icon to be displayed.
 * @param {string} [mOptions.title] The title of the message box.
 * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [mOptions.actions=sap.m.MessageBox.Action.OK] Either a single action, or an array of two actions.
 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. From UI5 version 1.21, more than 2 actions are supported.
 *      For the former versions, if more than two actions are given, only the first two actions are taken. Custom action string(s) can be provided, and then the translation
 *      of custom action string(s) needs to be done by the application.
 * @param {function} [mOptions.onClose] Function to be called when the user taps a button or closes the message box.
 * @param {string} [mOptions.id] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] Added since version 1.21.2. CSS style class which is added to the dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @public
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.show = function(vMessage,mOptions) {  };


// ---- sap.m.MessageBox.Action --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MessageBox.Action.toString = function() { return ""; };

// ---- sap.m.MessageBox.Icon --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MessageBox.Icon.toString = function() { return ""; };

// ---- sap.m.MessageToast --------------------------------------------------------------------------

/**
 * Creates and displays a simple message toast notification message with the given text, and optionally other options.
 * 
 * The only mandatory parameter is <code>sMessage</code>.
 * @param {string} sMessage The message to be displayed.
 * @param {object} [mOptions] Optionally other options.
 * @param {int} [mOptions.duration=3000] Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.
 * @param {sap.ui.core.CSSSize} [mOptions.width='15em'] The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.
 * @param {sap.ui.core.Popup.Dock} [mOptions.my='center bottom'] Specifies which point of the message toast should be aligned.
 * @param {sap.ui.core.Popup.Dock} [mOptions.at='center bottom'] Specifies the point of the reference element to which the message toast should be aligned.
 * @param {sap.ui.core.Control|Element|jQuery|Window|undefined} [mOptions.of=window] Specifies the reference element to which the message toast should be aligned, by default it is aligned to the browser visual viewport.
 * @param {string} [mOptions.offset='0 0'] The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the message toast 10 pixels to the right).
 * @param {string} [mOptions.collision='fit fit'] Specifies how the position of the message toast should be adjusted in case it overflows the screen in some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none".
 * @param {function} [mOptions.onClose=null] Function to be called when the message toast closes.
 * @param {boolean} [mOptions.autoClose=true] Specify whether the message toast should close as soon as the end user touches the screen.
 * @param {string} [mOptions.animationTimingFunction='ease'] Describes how the close animation will progress. Possible values "ease", "linear", "ease-in", "ease-out", "ease-in-out". This feature is not supported in android and ie9 browsers.
 * @param {int} [mOptions.animationDuration=1000] Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer. For not animation set to 0. This feature is not supported in android and ie9 browsers.
 * @param {boolean} [mOptions.closeOnBrowserNavigation=true] Whether the message toast closes on browser navigation.
 * @type void
 * @public
 * 
 * @memberof sap.m.MessageToast
 */
sap.m.MessageToast.show = function(sMessage,mOptions) { return null; };


// ---- sap.m.MultiComboBox --------------------------------------------------------------------------

/**
 * Constructor for a new MultiComboBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelectedKeys selectedKeys} : string[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionFinish selectionFinish} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ComboBoxBase#constructor sap.m.ComboBoxBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The MultiComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.
 * @extends sap.m.ComboBoxBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiComboBox = function(sId,mSettings) {};
/**
 * Event is fired when selection of an item is changed.
 * Note: please do not use the "change" event inherited from sap.m.InputBase
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.changedItem Item which selection is changed
 * @param {boolean} oControlEvent.getParameters.selected Selection state: true if item is selected, false if
 * item is not selected
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Event is fired when user has finished a selection of items in a list box and list box has been closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item[]} oControlEvent.getParameters.selectedItems The selected items which are selected after list box has been closed.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.selectionFinish = function(oControlEvent) {  };

/**
 * Adds some item <code>oItem</code> to the association named <code>selectedItems</code>.
 * @param {sap.ui.core.Item}
 *          oItem The selected item to add; if empty, nothing is added.
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.addSelectedItem = function(oItem) { return new sap.m.MultiComboBox(); };

/**
 * Adds selected items. Only items with valid keys are added as selected.
 * @param {string[]} aKeys
 *         An array of item keys that identifies the items to be added as selected
 * @type sap.m.MultiComboBox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiComboBox.prototype.addSelectedKeys = function(aKeys) { return new sap.m.MultiComboBox(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.m.MultiComboBox</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.MultiComboBox</code>.<br> itself.
 * 
 * Event is fired when selection of an item is changed.
 * Note: please do not use the "change" event inherited from sap.m.InputBase
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code>.<br/> itself.
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'selectionFinish' event of this <code>sap.m.MultiComboBox</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.MultiComboBox</code>.<br> itself.
 * 
 * Event is fired when user has finished a selection of items in a list box and list box has been closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code>.<br/> itself.
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.attachSelectionFinish = function(oData,fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Clear the selection.
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.clearSelection = function() {  };

/**
 * Creates a picker. To be overwritten by subclasses.
 * @param {string}
 *          sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker pop-up to be used.
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.destroyItems = function() { return new sap.m.MultiComboBox(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.m.MultiComboBox</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionFinish' event of this <code>sap.m.MultiComboBox</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.detachSelectionFinish = function(fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Creates a new subclass of class sap.m.MultiComboBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MultiComboBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event selectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'changedItem' of type <code>sap.ui.core.Item</code>Item which selection is changed</li>
 * <li>'selected' of type <code>boolean</code>Selection state: true if item is selected, false if
 * item is not selected</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.fireSelectionChange = function(mArguments) { return new sap.m.MultiComboBox(); };

/**
 * Fire event selectionFinish to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItems' of type <code>sap.ui.core.Item[]</code>The selected items which are selected after list box has been closed.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.fireSelectionFinish = function(mArguments) { return new sap.m.MultiComboBox(); };

/**
 * Get the reference element which the message popup should dock to.
 * @return {object} Dom Element which the message popup should dock to.
 * @since 1.26
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.getDomRefForValueStateMessage = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.MultiComboBox.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.MultiComboBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Retrieves the selected item objects from the association named <code>selectedItems</code>.
 * @returns {sap.ui.core.Item[]} Array of sap.ui.core.Item instances. The current target of the <code>selectedItems</code>
 *          association.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.getSelectedItems = function() { return new Array(); };

/**
 * Getter for property <code>selectedKeys</code>.
 * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
 * 
 * Default value is <code>undefined</code>
 * @return {string[]} the value of property <code>selectedKeys</code>
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.getSelectedKeys = function() { return new Array(); };

/**
 * This hook method is called after the MultiComboBox's Pop-up is rendered.
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.onAfterRenderingPicker = function() {  };

/**
 * This hook method is called before the MultiComboBox's Pop-up is rendered.
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.onBeforeRenderingPicker = function() {  };

/**
 * Removes all the items in the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item[]} An array of sap.ui.core.Item of the removed items (might be empty).
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes all the controls in the association named <code>selectedItems</code>.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeAllSelectedItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int |
 *          string | sap.ui.core.Item} oItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeItem = function(oItem) { return new sap.ui.core.Item(); };

/**
 * Removes an selectedItem from the association named <code>selectedItems</code>.
 * @param {int | string | sap.ui.core.Item} vSelectedItem the selectedItemto remove or its index or id
 * @return {sap.ui.core.Item} the removed selectedItem or null
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeSelectedItem = function(vSelectedItem) { return new sap.ui.core.Item(); };

/**
 * Removes selected items. Only items with valid keys are removed.
 * @param {string[]} aKeys
 *         An array of item keys that identifies the items to be removed
 * @type sap.m.MultiComboBox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiComboBox.prototype.removeSelectedKeys = function(aKeys) { return new sap.m.MultiComboBox(); };

/**
 * Setter for association <code>selectedItems</code>.
 * @param {string[] |
 *          sap.ui.core.Item[] | null} aItems new values for association <code>selectedItems</code>. Array of
 *          sap.ui.core.Item Id which becomes the new target of this <code>selectedItems</code> association.
 *          Alternatively, an array of sap.ui.core.Item instance may be given or null.
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.setSelectedItems = function(aItems) { return new sap.m.MultiComboBox(); };

/**
 * Setter for property <code>selectedKeys</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string[]} sSelectedKeys new value for property <code>selectedKeys</code>
 * @return {sap.m.MultiComboBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.setSelectedKeys = function(sSelectedKeys) { return new sap.m.MultiComboBox(); };


// ---- sap.m.MultiInput --------------------------------------------------------------------------

/**
 * Constructor for a new MultiInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTokens tokens} : sap.m.Token[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tokenChange tokenChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Input#constructor sap.m.Input}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * MultiInput provides functionality to add / remove / enter tokens
 * @extends sap.m.Input
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiInput = function(sId,mSettings) {};
/**
 * fired when the tokens aggregation changed (add / remove token)
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.type type of tokenChange event. 
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
 * @param {sap.m.Token} oControlEvent.getParameters.token the added token or removed token. 
 * This parameter is used when tokenChange type is "added" or "removed".
 * @param {sap.m.Token[]} oControlEvent.getParameters.tokens the array of removed tokens. 
 * This parameter is used when tokenChange type is "removedAll".
 * @param {sap.m.Token[]} oControlEvent.getParameters.addedTokens the array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChange".
 * @param {sap.m.Token[]} oControlEvent.getParameters.removedTokens the array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChange".
 * @public
 * 
 */
sap.m.MultiInput.prototype.tokenChange = function(oControlEvent) {  };

/**
 * Adds some token into the aggregation named <code>tokens</code>.
 * @param {sap.m.Token}
 *            oToken the token to add; to add; if empty, nothing is inserted
 * @return {sap.m.MultiInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiInput.prototype.addToken = function(oToken) { return new sap.m.MultiInput(); };

/**
 * Function adds an validation callback called before any new token gets added to the tokens aggregation
 * @param {function} fValidator
 * @public
 * 
 */
sap.m.MultiInput.prototype.addValidator = function(fValidator) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'tokenChange' event of this <code>sap.m.MultiInput</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.MultiInput</code>.<br> itself.
 * 
 * fired when the tokens aggregation changed (add / remove token)
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiInput</code>.<br/> itself.
 * @return {sap.m.MultiInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiInput.prototype.attachTokenChange = function(oData,fnFunction,oListener) { return new sap.m.MultiInput(); };

/**
 * Function overwrites clone function to add tokens to MultiInput
 * @public
 * @return {sap.ui.core.Element} reference to the newly created clone
 * 
 */
sap.m.MultiInput.prototype.clone = function() { return new sap.ui.core.Element(); };

/**
 * Destroys all the tokens in the aggregation
 * named <code>tokens</code>.
 * @return {sap.m.MultiInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiInput.prototype.destroyTokens = function() { return new sap.m.MultiInput(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tokenChange' event of this <code>sap.m.MultiInput</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.MultiInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiInput.prototype.detachTokenChange = function(fnFunction,oListener) { return new sap.m.MultiInput(); };

/**
 * Creates a new subclass of class sap.m.MultiInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Input.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MultiInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event tokenChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'type' of type <code>string</code>type of tokenChange event. 
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".</li>
 * <li>'token' of type <code>sap.m.Token</code>the added token or removed token. 
 * This parameter is used when tokenChange type is "added" or "removed".</li>
 * <li>'tokens' of type <code>sap.m.Token[]</code>the array of removed tokens. 
 * This parameter is used when tokenChange type is "removedAll".</li>
 * <li>'addedTokens' of type <code>sap.m.Token[]</code>the array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChange".</li>
 * <li>'removedTokens' of type <code>sap.m.Token[]</code>the array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChange".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.MultiInput} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.MultiInput.prototype.fireTokenChange = function(mArguments) { return new sap.m.MultiInput(); };

/**
 * get the reference element which the message popup should dock to
 * @return {DOMRef} Dom Element which the message popup should dock to
 * @protected
 * 
 */
sap.m.MultiInput.prototype.getDomRefForValueStateMessage = function() { return null; };

/**
 * Returns a metadata object for class sap.m.MultiInput.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.MultiInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Function returns domref which acts as reference point for the opening suggestion menu
 * @public
 * @returns {domRef}
 *          the domref at which to open the suggestion menu
 * 
 */
sap.m.MultiInput.prototype.getPopupAnchorDomRef = function() { return null; };

/**
 * Getter for aggregation <code>tokens</code>.<br/>
 * the currently displayed tokens
 * @return {sap.m.Token[]}
 * @public
 * 
 */
sap.m.MultiInput.prototype.getTokens = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.Token</code> in the aggregation named <code>tokens</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Token}
 *           oToken the token whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.MultiInput.prototype.indexOfToken = function(oToken) { return 0; };

/**
 * Inserts a token into the aggregation named <code>tokens</code>.
 * @param {sap.m.Token}
 *            oToken the token to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the token should be inserted at; for
 *              a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the token is inserted at
 *              the last position
 * @return {sap.m.MultiInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.MultiInput.prototype.insertToken = function(oToken,iIndex) { return new sap.m.MultiInput(); };

/**
 * when press ESC, deselect all tokens and all texts
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.MultiInput.prototype.onsapescape = function(oEvent) {  };

/**
 * when tap on text field, deselect all tokens
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.MultiInput.prototype.ontap = function(oEvent) {  };

/**
 * Removes all the controls in the aggregation named <code>tokens</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Token[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeAllTokens = function() { return new Array(); };

/**
 * Function removes all validation callbacks
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeAllValidators = function() {  };

/**
 * Removes an token from the aggregation named <code>tokens</code>.
 * @param {int | string | sap.m.Token} vToken the tokento remove or its index or id
 * @return {sap.m.Token} the removed token or null
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeToken = function(vToken) { return new sap.m.Token(); };

/**
 * Function removes an validation callback
 * @param {function} fValidator
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeValidator = function(fValidator) {  };

/**
 * Function sets an array of tokens, existing tokens will get overridden
 * @param {sap.m.Token[]}
 *          aTokens - the new token set
 * @public
 * 
 */
sap.m.MultiInput.prototype.setTokens = function(aTokens) {  };


// ---- sap.m.NavContainer --------------------------------------------------------------------------

/**
 * Constructor for a new NavContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDefaultTransitionName defaultTransitionName} : string (default: slide)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.
 * 
 * All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer = function(sId,mSettings) {};
/**
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 * 
 */
sap.m.NavContainer.prototype.afterNavigate = function(oControlEvent) {  };

/**
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 * 
 */
sap.m.NavContainer.prototype.navigate = function(oControlEvent) {  };

/**
 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * 
 * "to" and "back" are the transition functions for the forward and backward navigation.
 * Both will be called with the following parameters:
 * - oFromPage: the Control which is currently being displayed by the NavContainer
 * - oToPage: the Control which should be displayed by the NavContainer after the transition
 * - fCallback: a function which MUST be called when the transition has completed
 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
 * 
 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:
 * oFromPage.addStyleClass("sapMNavItemHidden");
 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
 * 
 * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a
 * setTimeout(..., 0)
 * block (delayed, but without waiting).
 * 
 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
 * 
 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
 * @param {string} sName
 *         The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
 * 
 * Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * @param {object} oTo
 *         The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @param {object} oBack
 *         The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @type sap.m.NavContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.addCustomTransition = function(sName,oTo,oBack) { return new sap.m.NavContainer(); };

/**
 * Adds some page into the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *            oPage the page to add; to add; if empty, nothing is inserted
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.addPage = function(oPage) { return new sap.m.NavContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br> itself.
 * 
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.attachAfterNavigate = function(oData,fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br> itself.
 * 
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * @param {object} oBackData
 *         Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         Since version 1.7.1. This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.back = function(oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * @param {string} sPageId
 *         The ID of the screen to which back navigation should happen. The ID or the control itself can be given. The nearest such page among the previous pages in the history stack will be used.
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @since 1.7.2
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.backToPage = function(sPageId,oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @since 1.7.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.backToTop = function(oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * Returns whether the current page is the top/initial page.
 * 
 * Note: going to the initial page again with a row of "to" navigations causes the initial page to be displayed again, but logically one is not at the top level, so this method returns "false" in this case.
 * @type boolean
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.currentPageIsTopPage = function() { return false; };

/**
 * Destroys all the pages in the aggregation
 * named <code>pages</code>.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.destroyPages = function() { return new sap.m.NavContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @since 1.7.1
 * @public
 * 
 */
sap.m.NavContainer.prototype.detachAfterNavigate = function(fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @since 1.7.1
 * @public
 * 
 */
sap.m.NavContainer.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NavContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code>The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code>The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code>The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code>The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code>Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code>Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code>How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @protected
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.fireAfterNavigate = function(mArguments) { return new sap.m.NavContainer(); };

/**
 * Fire event navigate to attached listeners.
 * 
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code>The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code>The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code>The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code>The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code>Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code>Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code>Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code>How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.fireNavigate = function(mArguments) { return false; };

/**
 * Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.
 * 
 * Returns undefined if no page has been added yet.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.getCurrentPage = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>defaultTransitionName</code>.
 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
 * 
 * Default value is <code>slide</code>
 * @return {string} the value of property <code>defaultTransitionName</code>
 * @since 1.7.1
 * @public
 * 
 */
sap.m.NavContainer.prototype.getDefaultTransitionName = function() { return ""; };

/**
 * Getter for property <code>height</code>.
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.NavContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Id of the element which is the current target of the <code>initialPage</code> association, or null
 * 
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.NavContainer.prototype.getInitialPage = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.m.NavContainer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.NavContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the control with the given ID from the "pages" aggregation (if available).
 * @param {string} sId
 *         The ID of the aggregated control to find.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.getPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.NavContainer.prototype.getPages = function() { return new Array(); };

/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 * @type sap.ui.core.Control
 * @public
 * @since 1.7.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.getPreviousPage = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>visible</code>.
 * Whether the NavContainer is visible.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.NavContainer.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.NavContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.NavContainer.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * Inserts a page into the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *            oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the page should be inserted at; for
 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the page is inserted at
 *              the last position
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.insertPage = function(oPage,iIndex) { return new sap.m.NavContainer(); };

/**
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * 
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the NavContainer's history stack.
 * @param {string} sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the NavContainer, otherwise this will cause an error.
 * @param {string} sTransitionName
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 *         This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
 * @type sap.m.NavContainer
 * @public
 * @since 1.16.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.insertPreviousPage = function(sPageId,sTransitionName,oData) { return new sap.m.NavContainer(); };

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.NavContainer.prototype.removeAllPages = function() { return new Array(); };

/**
 * Removes an page from the aggregation named <code>pages</code>.
 * @param {int | string | sap.ui.core.Control} vPage the pageto remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * 
 */
sap.m.NavContainer.prototype.removePage = function(vPage) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>defaultTransitionName</code>.
 * 
 * Default value is <code>slide</code>.
 * @param {string} sDefaultTransitionName new value for property <code>defaultTransitionName</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @since 1.7.1
 * @public
 * 
 */
sap.m.NavContainer.prototype.setDefaultTransitionName = function(sDefaultTransitionName) { return new sap.m.NavContainer(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setHeight = function(sHeight) { return new sap.m.NavContainer(); };

/**
 * Setter for the associated <code>initialPage</code>.
 * @param {sap.ui.core.Control} oInitialPage Id of an element which becomes the new target of this initialPage association. Alternatively, an element instance may be given.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setInitialPage = function(oInitialPage) { return new sap.m.NavContainer(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setVisible = function(bVisible) { return new sap.m.NavContainer(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setWidth = function(sWidth) { return new sap.m.NavContainer(); };

/**
 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
 * 
 * Note that any modifications to the target page (like setting its title, or anything else that could cause a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page animation.
 * 
 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 * @param {string} sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.NavContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.to = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.NavContainer(); };


// ---- sap.m.NavContainerChild --------------------------------------------------------------------------

/**
 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.AfterHide = function() {  };

/**
 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.AfterShow = function() {  };

/**
 * This event is fired before the NavContainer shows this child control for the first time.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.BeforeFirstShow = function() {  };

/**
 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.BeforeHide = function() {  };

/**
 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.BeforeShow = function() {  };


// ---- sap.m.ObjectAttribute --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectAttribute.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getActive active} : boolean</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectAttribute displays a text field that can be normal or active. Object attribute fires a press event when the user selects active text.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectAttribute = function(sId,mSettings) {};
/**
 * Event is fired when the user clicks active text
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object attributes' text to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.press = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ObjectAttribute</code>.<br> itself.
 * 
 * Event is fired when the user clicks active text
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code>.<br/> itself.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectAttribute(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ObjectAttribute(); };

/**
 * Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectAttribute.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code>Dom reference of the object attributes' text to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectAttribute.prototype.firePress = function(mArguments) { return new sap.m.ObjectAttribute(); };

/**
 * Getter for property <code>active</code>.
 * Indicates if the object attribute text is selectable by the user.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>active</code>
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getActive = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectAttribute.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ObjectAttribute.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * The object attribute text.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>title</code>.
 * The object attribute title.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getTitle = function() { return ""; };

/**
 * Setter for property <code>active</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bActive new value for property <code>active</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setActive = function(bActive) { return new sap.m.ObjectAttribute(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setText = function(sText) { return new sap.m.ObjectAttribute(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setTitle = function(sTitle) { return new sap.m.ObjectAttribute(); };


// ---- sap.m.ObjectHeader --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectHeader.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIntroActive introActive} : boolean</li>
 * <li>{@link #getTitleActive titleActive} : boolean</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconActive iconActive} : boolean</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean (default: false)</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean (default: false)</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean (default: false)</li>
 * <li>{@link #getShowTitleSelector showTitleSelector} : boolean (default: false)</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState</li>
 * <li>{@link #getCondensed condensed} : boolean (default: false)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign</li>
 * <li>{@link #getResponsive responsive} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getStatuses statuses} : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderContainer headerContainer} : sap.m.ObjectHeaderContainer</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:introPress introPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:titleSelectorPress titleSelectorPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectHeader is a display control that enables the user to easily identify a specific object. The object header title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectHeader = function(sId,mSettings) {};
/**
 * Event is fired when the title icon is active and the user tap/click on it
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' icon to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.iconPress = function(oControlEvent) {  };

/**
 * Event is fired when the title is active and the user tap/click on it
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' intro to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.introPress = function(oControlEvent) {  };

/**
 * Event is fired when the title is active and the user tap/click on it
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' title to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.titlePress = function(oControlEvent) {  };

/**
 * Event is fired when the object header title selector (down-arrow) is pressed
 * @event
 * @since 1.16.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' titleArrow to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.titleSelectorPress = function(oControlEvent) {  };

/**
 * Adds some attribute into the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addAttribute = function(oAttribute) { return new sap.m.ObjectHeader(); };

/**
 * Adds some status into the aggregation named <code>statuses</code>.
 * @param {sap.ui.core.Control}
 *            oStatus the status to add; to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addStatus = function(oStatus) { return new sap.m.ObjectHeader(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br> itself.
 * 
 * Event is fired when the title icon is active and the user tap/click on it
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachIconPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br> itself.
 * 
 * Event is fired when the title is active and the user tap/click on it
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachIntroPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br> itself.
 * 
 * Event is fired when the title is active and the user tap/click on it
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachTitlePress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'titleSelectorPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br> itself.
 * 
 * Event is fired when the object header title selector (down-arrow) is pressed
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.attachTitleSelectorPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Destroys all the attributes in the aggregation
 * named <code>attributes</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyAttributes = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys the firstStatus in the aggregation
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyFirstStatus = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys the headerContainer in the aggregation
 * named <code>headerContainer</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyHeaderContainer = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys the secondStatus in the aggregation
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroySecondStatus = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys all the statuses in the aggregation
 * named <code>statuses</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyStatuses = function() { return new sap.m.ObjectHeader(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachIconPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachIntroPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachTitlePress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'titleSelectorPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachTitleSelectorPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectHeader.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event iconPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code>Dom reference of the object header' icon to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireIconPress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * Fire event introPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code>Dom reference of the object header' intro to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireIntroPress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * Fire event titlePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code>Dom reference of the object header' title to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireTitlePress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * Fire event titleSelectorPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code>Dom reference of the object header' titleArrow to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.fireTitleSelectorPress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The list of Object Attributes
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getAttributes = function() { return new Array(); };

/**
 * Getter for property <code>backgroundDesign</code>.
 * NOTE: Only applied if you set "condensed=true" or "responsive=true".
 * This property is used to set the background color of the ObjectHeader. Possible values are "Solid", "Translucent" and "Transparent".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Getter for property <code>condensed</code>.
 * Displays the condensed object header with title, one attribute, number and number unit.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>condensed</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getCondensed = function() { return false; };

/**
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status shown on the right side of the attributes above the second status.
 * If it is not set the first attribute will expand to take the entire row.
 * @return {sap.m.ObjectStatus}
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getFirstStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Getter for aggregation <code>headerContainer</code>.<br/>
 * This aggregation takes only effect when you set "responsive" to true.
 * This is an association for the end area of the object header. It can either be filled with an sap.m.IconTabBar or a sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.
 * @return {sap.m.ObjectHeaderContainer}
 * @since 1.21.1
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getHeaderContainer = function() { return new sap.m.ObjectHeaderContainer(); };

/**
 * Getter for property <code>icon</code>.
 * Object header icon
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconActive</code>.
 * Indicates that the object header icon is clickable
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconActive = function() { return false; };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>intro</code>.
 * Introductory text for the object header.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>intro</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntro = function() { return ""; };

/**
 * Getter for property <code>introActive</code>.
 * Indicates that the intro is clickable
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>introActive</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntroActive = function() { return false; };

/**
 * Getter for property <code>markFavorite</code>.
 * Set the favorite state to true or false. The showMarkers property must be true for this property to take effect.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>markFavorite</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getMarkFavorite = function() { return false; };

/**
 * Getter for property <code>markFlagged</code>.
 * Set the flagged state to true or false. The showMarkers property must be true for this property to take effect.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>markFlagged</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getMarkFlagged = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectHeader.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ObjectHeader.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>number</code>.
 * Object header number field
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumber = function() { return ""; };

/**
 * Getter for property <code>numberState</code>.
 * Object header number and numberUnit value state.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>numberState</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumberState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>numberUnit</code>.
 * Object header number units qualifier.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumberUnit = function() { return ""; };

/**
 * Getter for property <code>responsive</code>.
 * If this property is set to true the ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.
 * Be aware that the design and behavior of the responsive ObjectHeader can change without further notification.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>responsive</code>
 * @since 1.21.1
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getResponsive = function() { return false; };

/**
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status shown on the right side of the attributes below the first status.
 * If it is not set the second attribute will expand to take the entire row.
 * @return {sap.m.ObjectStatus}
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getSecondStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Getter for property <code>showMarkers</code>.
 * Indicates if object header supports showing markers such as flagged and favorite.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showMarkers</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getShowMarkers = function() { return false; };

/**
 * Getter for property <code>showTitleSelector</code>.
 * When it is true, the selector arrow icon/image is shown and can be pressed.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showTitleSelector</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getShowTitleSelector = function() { return false; };

/**
 * Getter for aggregation <code>statuses</code>.<br/>
 * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
 * @return {sap.ui.core.Control[]}
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getStatuses = function() { return new Array(); };

/**
 * Getter for property <code>title</code>.
 * Object header title
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>titleActive</code>.
 * Indicates that the title is clickable
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>titleActive</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleActive = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * Indicates if object header is visible. Invisible object headers are not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *           oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>statuses</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oStatus the status whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfStatus = function(oStatus) { return 0; };

/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * Inserts a status into the aggregation named <code>statuses</code>.
 * @param {sap.ui.core.Control}
 *            oStatus the status to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the status should be inserted at; for
 *              a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the status is inserted at
 *              the last position
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertStatus = function(oStatus,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>statuses</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllStatuses = function() { return new Array(); };

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attributeto remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * Removes an status from the aggregation named <code>statuses</code>.
 * @param {int | string | sap.ui.core.Control} vStatus the statusto remove or its index or id
 * @return {sap.ui.core.Control} the removed status or null
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeStatus = function(vStatus) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>backgroundDesign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign new value for property <code>backgroundDesign</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.ObjectHeader(); };

/**
 * Set the condensed flag
 * @override
 * @public
 * @param {boolean} bCondensed the new value
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setCondensed = function(bCondensed) { return new sap.m.ObjectHeader(); };

/**
 * Setter for the aggregated <code>firstStatus</code>.
 * @param {sap.m.ObjectStatus} oFirstStatus the firstStatus to set
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setFirstStatus = function(oFirstStatus) { return new sap.m.ObjectHeader(); };

/**
 * Setter for the aggregated <code>headerContainer</code>.
 * @param {sap.m.ObjectHeaderContainer} oHeaderContainer the headerContainer to set
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setHeaderContainer = function(oHeaderContainer) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIcon = function(sIcon) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>iconActive</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bIconActive new value for property <code>iconActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconActive = function(bIconActive) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>intro</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sIntro new value for property <code>intro</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntro = function(sIntro) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>introActive</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bIntroActive new value for property <code>introActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntroActive = function(bIntroActive) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>markFavorite</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMarkFavorite new value for property <code>markFavorite</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setMarkFavorite = function(bMarkFavorite) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>markFlagged</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMarkFlagged new value for property <code>markFlagged</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setMarkFlagged = function(bMarkFlagged) { return new sap.m.ObjectHeader(); };

/**
 * Set the number value to the internal aggregation
 * @override
 * @public
 * @param {string} sNumber the new value
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setNumber = function(sNumber) { return new sap.m.ObjectHeader(); };

/**
 * Set the number state to the internal aggregation
 * @override
 * @public
 * @param {sap.ui.core.ValueState} sState the new value
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setNumberState = function(sState) { return new sap.m.ObjectHeader(); };

/**
 * Set the number unit to the internal aggregation
 * @override
 * @public
 * @param {string} sUnit the new value
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setNumberUnit = function(sUnit) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>responsive</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bResponsive new value for property <code>responsive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.21.1
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setResponsive = function(bResponsive) { return new sap.m.ObjectHeader(); };

/**
 * Setter for the aggregated <code>secondStatus</code>.
 * @param {sap.m.ObjectStatus} oSecondStatus the secondStatus to set
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setSecondStatus = function(oSecondStatus) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>showMarkers</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowMarkers new value for property <code>showMarkers</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setShowMarkers = function(bShowMarkers) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>showTitleSelector</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowTitleSelector new value for property <code>showTitleSelector</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setShowTitleSelector = function(bShowTitleSelector) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitle = function(sTitle) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>titleActive</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bTitleActive new value for property <code>titleActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleActive = function(bTitleActive) { return new sap.m.ObjectHeader(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setVisible = function(bVisible) { return new sap.m.ObjectHeader(); };


// ---- sap.m.ObjectHeaderContainer --------------------------------------------------------------------------


// ---- sap.m.ObjectIdentifier --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectIdentifier.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getBadgeNotes badgeNotes} : boolean</li>
 * <li>{@link #getBadgePeople badgePeople} : boolean</li>
 * <li>{@link #getBadgeAttachments badgeAttachments} : boolean</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTitleActive titleActive} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectIdentifier is a display control that enables the user to easily identify a specific object. The object identifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectIdentifier = function(sId,mSettings) {};
/**
 * Event is fired when the title is active and the user taps/clicks on it.
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object identifier's title
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.titlePress = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.m.ObjectIdentifier</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ObjectIdentifier</code>.<br> itself.
 * 
 * Event is fired when the title is active and the user taps/clicks on it.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectIdentifier</code>.<br/> itself.
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.ObjectIdentifier.prototype.attachTitlePress = function(oData,fnFunction,oListener) { return new sap.m.ObjectIdentifier(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.m.ObjectIdentifier</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.detachTitlePress = function(fnFunction,oListener) { return new sap.m.ObjectIdentifier(); };

/**
 * Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectIdentifier.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event titlePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code>Dom reference of the object identifier's title</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.ObjectIdentifier.prototype.fireTitlePress = function(mArguments) { return new sap.m.ObjectIdentifier(); };

/**
 * Getter for property <code>badgeAttachments</code>.
 * Indicates whether or not the attachments icon is displayed.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>badgeAttachments</code>
 * @deprecated Since version 1.24.0. 
 * Will be replaced in the future by a more generic mechansism.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgeAttachments = function() { return false; };

/**
 * Getter for property <code>badgeNotes</code>.
 * Indicates whether or not the notes icon is displayed.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>badgeNotes</code>
 * @deprecated Since version 1.24.0. 
 * Will be replaced in the future by a more generic mechansism.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgeNotes = function() { return false; };

/**
 * Getter for property <code>badgePeople</code>.
 * Indicates whether or not the address book icon is displayed.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>badgePeople</code>
 * @deprecated Since version 1.24.0. 
 * Will be replaced in the future by a more generic mechansism.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgePeople = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectIdentifier.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ObjectIdentifier.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * The object text.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>title</code>.
 * The object title.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>titleActive</code>.
 * Indicates if the object identifier's title is clickable.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>titleActive</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getTitleActive = function() { return false; };

/**
 * Getter for property <code>visible</code>.
 * Indicates if the object identifier is visible. An invisible object identifier is not being rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getVisible = function() { return false; };

/**
 * Setter for property <code>badgeAttachments</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bBadgeAttachments new value for property <code>badgeAttachments</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @deprecated Since version 1.24.0. 
 * Will be replaced in the future by a more generic mechansism.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgeAttachments = function(bBadgeAttachments) { return new sap.m.ObjectIdentifier(); };

/**
 * Setter for property <code>badgeNotes</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bBadgeNotes new value for property <code>badgeNotes</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @deprecated Since version 1.24.0. 
 * Will be replaced in the future by a more generic mechansism.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgeNotes = function(bBadgeNotes) { return new sap.m.ObjectIdentifier(); };

/**
 * Setter for property <code>badgePeople</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bBadgePeople new value for property <code>badgePeople</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @deprecated Since version 1.24.0. 
 * Will be replaced in the future by a more generic mechansism.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgePeople = function(bBadgePeople) { return new sap.m.ObjectIdentifier(); };

/**
 * Setter for property text.
 * Default value is empty/undefined
 * @public
 * @param {string} sText new value for property text
 * @returns {sap.m.ObjectIdentifier} this to allow method chaining
 * 
 */
sap.m.ObjectIdentifier.prototype.setText = function(sText) { return new sap.m.ObjectIdentifier(); };

/**
 * Setter for property title.
 * Default value is empty/undefined
 * @public
 * @param {string} sTitle new value for property title
 * @returns {sap.m.ObjectIdentifier} this to allow method chaining
 * 
 */
sap.m.ObjectIdentifier.prototype.setTitle = function(sTitle) { return new sap.m.ObjectIdentifier(); };

/**
 * Setter for property titleActive.
 * Default value is false
 * @public
 * @param {boolean} bValue new value for property titleActive
 * @returns {sap.m.ObjectIdentifier} this to allow method chaining
 * 
 */
sap.m.ObjectIdentifier.prototype.setTitleActive = function(bValue) { return new sap.m.ObjectIdentifier(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setVisible = function(bVisible) { return new sap.m.ObjectIdentifier(); };


// ---- sap.m.ObjectListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectListItem is a display control that provides summary information about an object as an item in a list. The object list item title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectListItem = function(sId,mSettings) {};
/**
 * Adds some attribute into the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; to add; if empty, nothing is inserted
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.addAttribute = function(oAttribute) { return new sap.m.ObjectListItem(); };

/**
 * Destroys all the attributes in the aggregation
 * named <code>attributes</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyAttributes = function() { return new sap.m.ObjectListItem(); };

/**
 * Destroys the firstStatus in the aggregation
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyFirstStatus = function() { return new sap.m.ObjectListItem(); };

/**
 * Destroys the secondStatus in the aggregation
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroySecondStatus = function() { return new sap.m.ObjectListItem(); };

/**
 * Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the object list item is active.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * List of attributes displayed below the title to the left of the status fields.
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getAttributes = function() { return new Array(); };

/**
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status text field shown on the right side of the attributes.
 * @return {sap.m.ObjectStatus}
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getFirstStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Getter for property <code>icon</code>.
 * Object list item icon displayed to the left of the title.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>intro</code>.
 * Introductory text for the object list item.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>intro</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIntro = function() { return ""; };

/**
 * Getter for property <code>markFavorite</code>.
 * Set the favorite state for the object list item
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>markFavorite</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getMarkFavorite = function() { return false; };

/**
 * Getter for property <code>markFlagged</code>.
 * Set the flagged state for the object list item
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>markFlagged</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getMarkFlagged = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ObjectListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>number</code>.
 * Object list item number
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumber = function() { return ""; };

/**
 * Getter for property <code>numberState</code>.
 * Object list item number and numberUnit value state.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>numberState</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumberState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>numberUnit</code>.
 * The number units qualifier of the object list item
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumberUnit = function() { return ""; };

/**
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status text field shown on the right side of the attributes.
 * @return {sap.m.ObjectStatus}
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getSecondStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Getter for property <code>showMarkers</code>.
 * Set to true if the object list item can be marked with icons such as favorite and flag.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>showMarkers</code>
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getShowMarkers = function() { return false; };

/**
 * Getter for property <code>title</code>.
 * Object list item title
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *           oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.ObjectListItem(); };

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attributeto remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * Setter for property <code>activeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sActiveIcon new value for property <code>activeIcon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.ObjectListItem(); };

/**
 * Setter for the aggregated <code>firstStatus</code>.
 * @param {sap.m.ObjectStatus} oFirstStatus the firstStatus to set
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setFirstStatus = function(oFirstStatus) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIcon = function(sIcon) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>intro</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sIntro new value for property <code>intro</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIntro = function(sIntro) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>markFavorite</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bMarkFavorite new value for property <code>markFavorite</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setMarkFavorite = function(bMarkFavorite) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>markFlagged</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bMarkFlagged new value for property <code>markFlagged</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setMarkFlagged = function(bMarkFlagged) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>number</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNumber new value for property <code>number</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setNumber = function(sNumber) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>numberState</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sNumberState new value for property <code>numberState</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setNumberState = function(sNumberState) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>numberUnit</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNumberUnit new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.ObjectListItem(); };

/**
 * Setter for the aggregated <code>secondStatus</code>.
 * @param {sap.m.ObjectStatus} oSecondStatus the secondStatus to set
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setSecondStatus = function(oSecondStatus) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>showMarkers</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bShowMarkers new value for property <code>showMarkers</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @since 1.16.0
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setShowMarkers = function(bShowMarkers) { return new sap.m.ObjectListItem(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setTitle = function(sTitle) { return new sap.m.ObjectListItem(); };


// ---- sap.m.ObjectNumber --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectNumber.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState</li>
 * <li>{@link #getUnit unit} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectNumber displays number and number unit properties for an object. The number can be displayed using semantic colors to provide addition meaning about the object to the user.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectNumber = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectNumber.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>emphasized</code>.
 * Indicates if the object number should appear emphasized
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>emphasized</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getEmphasized = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectNumber.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ObjectNumber.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>number</code>.
 * Number field of the object number
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getNumber = function() { return ""; };

/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @deprecated Since version 1.16.1. 
 * 
 * Replaced by unit property due to the number before unit is redundant.
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getNumberUnit = function() { return ""; };

/**
 * Getter for property <code>state</code>.
 * The object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>unit</code>.
 * Number units qualifier. If numberUnit and unit are both set, the unit value is used.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>unit</code>
 * @since 1.16.1
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getUnit = function() { return ""; };

/**
 * Setter for property <code>emphasized</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEmphasized new value for property <code>emphasized</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setEmphasized = function(bEmphasized) { return new sap.m.ObjectNumber(); };

/**
 * Setter for property <code>number</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNumber new value for property <code>number</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setNumber = function(sNumber) { return new sap.m.ObjectNumber(); };

/**
 * Setter for property <code>numberUnit</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNumberUnit new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16.1. 
 * 
 * Replaced by unit property due to the number before unit is redundant.
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.ObjectNumber(); };

/**
 * Setter for property <code>state</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sState new value for property <code>state</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setState = function(sState) { return new sap.m.ObjectNumber(); };

/**
 * Setter for property <code>unit</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sUnit new value for property <code>unit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @since 1.16.1
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setUnit = function(sUnit) { return new sap.m.ObjectNumber(); };


// ---- sap.m.ObjectStatus --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectStatus.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Status information that may be either text with a value state, or an icon.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectStatus = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectStatus.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>icon</code>.
 * Icon URI. This may be either an icon font or image path.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectStatus.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ObjectStatus.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>state</code>.
 * Text value state.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>text</code>.
 * The object status text.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>title</code>.
 * The object status title.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getTitle = function() { return ""; };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setIcon = function(sIcon) { return new sap.m.ObjectStatus(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectStatus(); };

/**
 * Setter for property <code>state</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sState new value for property <code>state</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setState = function(sState) { return new sap.m.ObjectStatus(); };

/**
 * Setter for property text.
 * Default value is empty/undefined
 * @public
 * @param {string} sText new value for property text
 * @returns {sap.m.ObjectStatus} this to allow method chaining
 * 
 */
sap.m.ObjectStatus.prototype.setText = function(sText) { return new sap.m.ObjectStatus(); };

/**
 * Setter for property title.
 * Default value is empty/undefined
 * @public
 * @param {string} sTitle new value for property title
 * @returns {sap.m.ObjectStatus} this to allow method chaining
 * 
 */
sap.m.ObjectStatus.prototype.setTitle = function(sTitle) { return new sap.m.ObjectStatus(); };


// ---- sap.m.P13nColumnsItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nColumnsItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getIndex index} : int</li>
 * <li>{@link #getVisible visible} : boolean</li>
 * <li>{@link #getWidth width} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class The ColumnsItem can be used to fill columnsItem aggregation in P13nColumnsPanel
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26.0 
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nColumnsItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nColumnsItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>columnKey</code>.
 * This property contains the unique table column key
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>columnKey</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getColumnKey = function() { return ""; };

/**
 * Getter for property <code>index</code>.
 * This property contains the index of a table column
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>index</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getIndex = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.P13nColumnsItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>visible</code>.
 * This property decides whether a P13nColumnsItem is visible
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>visible</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * This property contains the with of a table column.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>width</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getWidth = function() { return ""; };

/**
 * Setter for property <code>columnKey</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sColumnKey new value for property <code>columnKey</code>
 * @return {sap.m.P13nColumnsItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nColumnsItem(); };

/**
 * Setter for property <code>index</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iIndex new value for property <code>index</code>
 * @return {sap.m.P13nColumnsItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setIndex = function(iIndex) { return new sap.m.P13nColumnsItem(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.P13nColumnsItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setVisible = function(bVisible) { return new sap.m.P13nColumnsItem(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sWidth new value for property <code>width</code>
 * @return {sap.m.P13nColumnsItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setWidth = function(sWidth) { return new sap.m.P13nColumnsItem(); };


// ---- sap.m.P13nColumnsPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nColumnsPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleItemsThreshold visibleItemsThreshold} : int</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumnsItems columnsItems} : sap.m.P13nColumnsItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addColumnsItem addColumnsItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:changeColumnsItems changeColumnsItems} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:setData setData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The ColumnsPanel can be used for personalization of the table to define column specific settings
 * @extends sap.m.P13nPanel
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nColumnsPanel = function(sId,mSettings) {};
/**
 * event raised when a columnsItem shall be added
 * @event
 * @since 1.26.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.P13nColumnsItem} oControlEvent.getParameters.newItem columnsItem that needs to be added in the model
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.addColumnsItem = function(oControlEvent) {  };

/**
 * event raised when columnsItems shall be changed or new one needs to be created in model
 * @event
 * @since 1.26.7
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.P13nColumnsItem[]} oControlEvent.getParameters.newItems contains columnsItems that needs to be created in the model
 * @param {sap.m.P13nColumnsItem[]} oControlEvent.getParameters.existingItems contains columnsItems that needs to be changed in the model
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.changeColumnsItems = function(oControlEvent) {  };

/**
 * event raised when setData on model should be called; this event serves the purpose of minimizing such calls since these can be very
 * performance expensive
 * @event
 * @since 1.26.7
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.setData = function(oControlEvent) {  };

/**
 * Add ColumnsItem to columnsItems aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining.
 * @param {sap.m.P13nColumnsItem} oColumnsItem is the new ColumnsItem that shall be added
 * 
 */
sap.m.P13nColumnsPanel.prototype.addColumnsItem = function(oColumnsItem) { return new sap.m.P13nColumnsPanel(); };

/**
 * Add item to items aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining.
 * @param {sap.m.P13nItem} oItem is the new item that shall be added
 * 
 */
sap.m.P13nColumnsPanel.prototype.addItem = function(oItem) { return new sap.m.P13nColumnsPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'addColumnsItem' event of this <code>sap.m.P13nColumnsPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nColumnsPanel</code>.<br> itself.
 * 
 * event raised when a columnsItem shall be added
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code>.<br/> itself.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nColumnsPanel.prototype.attachAddColumnsItem = function(oData,fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'changeColumnsItems' event of this <code>sap.m.P13nColumnsPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nColumnsPanel</code>.<br> itself.
 * 
 * event raised when columnsItems shall be changed or new one needs to be created in model
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code>.<br/> itself.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.attachChangeColumnsItems = function(oData,fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'setData' event of this <code>sap.m.P13nColumnsPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nColumnsPanel</code>.<br> itself.
 * 
 * event raised when setData on model should be called; this event serves the purpose of minimizing such calls since these can be very
 * performance expensive
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code>.<br/> itself.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.attachSetData = function(oData,fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Binder for aggregation <code>columnsItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.bindColumnsItems = function(oBindingInfo) { return new sap.m.P13nColumnsPanel(); };

/**
 * Destroy all instances from columnsItems aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining.
 * 
 */
sap.m.P13nColumnsPanel.prototype.destroyColumnsItems = function() { return new sap.m.P13nColumnsPanel(); };

/**
 * Destroy all items from items aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining.
 * 
 */
sap.m.P13nColumnsPanel.prototype.destroyItems = function() { return new sap.m.P13nColumnsPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'addColumnsItem' event of this <code>sap.m.P13nColumnsPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.detachAddColumnsItem = function(fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'changeColumnsItems' event of this <code>sap.m.P13nColumnsPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @since 1.26.7
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.detachChangeColumnsItems = function(fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'setData' event of this <code>sap.m.P13nColumnsPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @since 1.26.7
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.detachSetData = function(fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Cleans up before destruction.
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.m.P13nColumnsPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event addColumnsItem to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newItem' of type <code>sap.m.P13nColumnsItem</code>columnsItem that needs to be added in the model</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.m.P13nColumnsPanel.prototype.fireAddColumnsItem = function(mArguments) { return new sap.m.P13nColumnsPanel(); };

/**
 * Fire event changeColumnsItems to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newItems' of type <code>sap.m.P13nColumnsItem[]</code>contains columnsItems that needs to be created in the model</li>
 * <li>'existingItems' of type <code>sap.m.P13nColumnsItem[]</code>contains columnsItems that needs to be changed in the model</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.fireChangeColumnsItems = function(mArguments) { return new sap.m.P13nColumnsPanel(); };

/**
 * Fire event setData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.fireSetData = function(mArguments) { return new sap.m.P13nColumnsPanel(); };

/**
 * Getter for aggregation <code>columnsItems</code>.<br/>
 * list of columns that has been changed
 * @return {sap.m.P13nColumnsItem[]}
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.getColumnsItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.P13nColumnsPanel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Delivers a payload for columnsPanel that can be used at consumer side
 * @public
 * @since 1.26.7
 * @returns {object} oPayload, which contains useful information
 * 
 */
sap.m.P13nColumnsPanel.prototype.getOkPayload = function() { return new Object(); };

/**
 * Getter for property <code>visibleItemsThreshold</code>.
 * This property is used to specify a threshold of visible items
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>visibleItemsThreshold</code>
 * @since 1.26.7
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.getVisibleItemsThreshold = function() { return 0; };

/**
 * Checks for the provided <code>sap.m.P13nColumnsItem</code> in the aggregation named <code>columnsItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nColumnsItem}
 *           oColumnsItem the columnsItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.indexOfColumnsItem = function(oColumnsItem) { return 0; };

/**
 * Insert ColumnsItem to columnsItems aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining.
 * @param {int} iIndex is the index where the columnsItem item shall be inserted
 * @param {sap.m.P13nColumnsItem} oColumnsItem is the new columnsItem that shall be inserted
 * 
 */
sap.m.P13nColumnsPanel.prototype.insertColumnsItem = function(iIndex,oColumnsItem) { return new sap.m.P13nColumnsPanel(); };

/**
 * Add item to items aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining.
 * @param {int} iIndex is the index where the new item shall be inserted
 * @param {sap.m.P13nItem} oItem is the new item that shall be added
 * 
 */
sap.m.P13nColumnsPanel.prototype.insertItem = function(iIndex,oItem) { return new sap.m.P13nColumnsPanel(); };

/**
 * This method is executed before navigation, to provide validation result(s) for columnsPanel
 * @returns {boolean} true if it is allowed to navigate away from this panel, false if it is not allowed
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.onBeforeNavigationFrom = function() { return false; };

/**
 * Remove all ColumnsItems from columnsItems aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsItem[]} An array of the removed items (might be empty).
 * 
 */
sap.m.P13nColumnsPanel.prototype.removeAllColumnsItems = function() { return new Array(); };

/**
 * Remove all item from items aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nItem[]} An array of the removed items (might be empty).
 * 
 */
sap.m.P13nColumnsPanel.prototype.removeAllItems = function() { return new Array(); };

/**
 * Remove ColumnsItem from columnsItems aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nColumnsItem} The removed item or null.
 * @param {sap.m.P13nColumnsItem} oColumnsItem is the ColumnsItem that shall be removed
 * 
 */
sap.m.P13nColumnsPanel.prototype.removeColumnsItem = function(oColumnsItem) { return new sap.m.P13nColumnsItem(); };

/**
 * Remove item from items aggregation
 * @public
 * @since 1.26.0
 * @returns {sap.m.P13nItem} The removed item or null.
 * @param {sap.m.P13nItem} oItem is the item that shall be removed
 * 
 */
sap.m.P13nColumnsPanel.prototype.removeItem = function(oItem) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>visibleItemsThreshold</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iVisibleItemsThreshold new value for property <code>visibleItemsThreshold</code>
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @since 1.26.7
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.setVisibleItemsThreshold = function(iVisibleItemsThreshold) { return new sap.m.P13nColumnsPanel(); };

/**
 * Unbinder for aggregation <code>columnsItems</code>.
 * @return {sap.m.P13nColumnsPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.unbindColumnsItems = function() { return new sap.m.P13nColumnsPanel(); };


// ---- sap.m.P13nConditionPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nConditionPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxConditions maxConditions} : string (default: -1)</li>
 * <li>{@link #getExclude exclude} : boolean (default: false)</li>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getAutoAddNewRow autoAddNewRow} : boolean (default: false)</li>
 * <li>{@link #getDisableFirstRemoveIcon disableFirstRemoveIcon} : boolean (default: false)</li>
 * <li>{@link #getAlwaysShowAddIcon alwaysShowAddIcon} : boolean (default: true)</li>
 * <li>{@link #getUsePrevConditionSetting usePrevConditionSetting} : boolean (default: true)</li>
 * <li>{@link #getAutoReduceKeyFieldItems autoReduceKeyFieldItems} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * <li>{@link #getShowLabel showLabel} : boolean (default: false)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:dataChange dataChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * @param {string}
 *            [sId] id for the new control, generated automatically if no id is given
 * @param {object}
 *            [mSettings] initial settings for the new control
 * @class The ConditionPanel Control will be used to realize the Sorting, Filtering and Grouping
 *        panel of the new Personalization dialog.
 * @extends sap.m.P13nPanel
 * @version 1.26.9
 * @constructor
 * @public
 * @experimental since version 1.26 !!! THIS CONTROL IS ONLY FOR INTERNAL USE !!!
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nConditionPanel = function(sId,mSettings) {};
/**
 * Workaround for updating the binding
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.dataChange = function(oControlEvent) {  };

/**
 * add a single condition.
 * @param {object}
 *            oCondition the new condition of type { "key": "007", "operation":
 *            sap.m.P13nConditionOperation.Ascending, "keyField": "keyFieldKey", "value1": "", "value2": ""};
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.addCondition = function(oCondition) {  };

/**
 * add a single KeyField
 * @public
 * @since 1.26.0
 * @param {object}
 *            oKeyField {key: "CompanyCode", text: "ID"}
 * 
 */
sap.m.P13nConditionPanel.prototype.addKeyField = function(oKeyField) {  };

/**
 * add a single operation
 * @public
 * @since 1.26.0
 * @param {sap.m.P13nConditionOperation}
 *            oOperation
 * @param {string}
 *            sType defines the type for which this operations will be used.
 * 
 */
sap.m.P13nConditionPanel.prototype.addOperation = function(oOperation,sType) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'dataChange' event of this <code>sap.m.P13nConditionPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nConditionPanel</code>.<br> itself.
 * 
 * Workaround for updating the binding
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nConditionPanel</code>.<br/> itself.
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.attachDataChange = function(oData,fnFunction,oListener) { return new sap.m.P13nConditionPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'dataChange' event of this <code>sap.m.P13nConditionPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.detachDataChange = function(fnFunction,oListener) { return new sap.m.P13nConditionPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nConditionPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nConditionPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event dataChange to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.P13nConditionPanel.prototype.fireDataChange = function(mArguments) { return new sap.m.P13nConditionPanel(); };

/**
 * Getter for property <code>alwaysShowAddIcon</code>.
 * makes the Add icon visible on each condition row. If is set to false the Add is only
 * visible at the end and you can only append a new condition.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>alwaysShowAddIcon</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getAlwaysShowAddIcon = function() { return false; };

/**
 * Getter for property <code>autoAddNewRow</code>.
 * adds initial a new empty condition row
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>autoAddNewRow</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getAutoAddNewRow = function() { return false; };

/**
 * Getter for property <code>autoReduceKeyFieldItems</code>.
 * KeyField value can only be selected once. When you set the property to true the
 * ConditionPanel will automatically offers on the KeyField drop down only the keyFields
 * which are not used. The default behavior is that in each keyField dropdown all
 * keyfields are listed.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>autoReduceKeyFieldItems</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getAutoReduceKeyFieldItems = function() { return false; };

/**
 * returns array of all defined conditions.
 * @public
 * @returns {object[]} array of Conditions
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.getConditions = function() { return new Array(); };

/**
 * Getter for property <code>containerQuery</code>.
 * defines if the mediaQuery or a ContainerResize will be used for layout update. When
 * the P13nConditionPanel is used on a dialog the property should be set to true!
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>containerQuery</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Getter for property <code>disableFirstRemoveIcon</code>.
 * makes the remove icon on the first condition row disabled when only one condition
 * exist.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>disableFirstRemoveIcon</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getDisableFirstRemoveIcon = function() { return false; };

/**
 * Getter for property <code>displayFormat</code>.
 * This represents the displayFormat of the condition Values.
 * With the value "UpperCase" the entered value of the condition will be converted to upperCase.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>displayFormat</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getDisplayFormat = function() { return ""; };

/**
 * Getter for property <code>exclude</code>.
 * exclude options for filter
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>exclude</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getExclude = function() { return false; };

/**
 * getter for KeyFields array
 * @public
 * @since 1.26.0
 * @returns {object[]} array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName",
 *          text : "Name"}]
 * 
 */
sap.m.P13nConditionPanel.prototype.getKeyFields = function() { return new Array(); };

/**
 * Getter for property <code>layoutMode</code>.
 * can be used to control the layout behavior. Default is "" which will automatically
 * change the layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>layoutMode</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Getter for property <code>maxConditions</code>.
 * defines the max number of conditions on the ConditionPanel
 * 
 * Default value is <code>-1</code>
 * @return {string} the value of property <code>maxConditions</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getMaxConditions = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nConditionPanel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nConditionPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * returns the default array of operations
 * @public
 * @since 1.26.0
 * @param {string}
 *            sType defines the type for which the operations should be returned.
 * @returns {sap.m.P13nConditionOperation[]} array of operations
 * 
 */
sap.m.P13nConditionPanel.prototype.getOperations = function(sType) { return new Array(); };

/**
 * Getter for property <code>showLabel</code>.
 * show additional labels in the condition
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showLabel</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getShowLabel = function() { return false; };

/**
 * Getter for property <code>usePrevConditionSetting</code>.
 * new added condition use the settings from the previous condition as default.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>usePrevConditionSetting</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getUsePrevConditionSetting = function() { return false; };

/**
 * insert a single condition.
 * @param {object}
 *            oCondition the new condition of type { "key": "007", "operation":
 *            sap.m.P13nConditionOperation.Ascending, "keyField": "keyFieldKey", "value1": "", "value2": ""};
 * @param {integer}
 *            index of the new condition
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.insertCondition = function(oCondition,index) {  };

/**
 * remove all conditions.
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.removeAllConditions = function() {  };

/**
 * removes all KeyFields
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.removeAllKeyFields = function() {  };

/**
 * remove all operations
 * @public
 * @since 1.26.0
 * @param {string}
 *            sType defines the type for which all operations should be removed
 * 
 */
sap.m.P13nConditionPanel.prototype.removeAllOperations = function(sType) {  };

/**
 * remove a single condition.
 * @param {object}
 *            vCondition is the condition which should be removed. can be either a string with the
 *            key of the condition of the condition object itself.
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.removeCondition = function(vCondition) {  };

/**
 * removes all invalid conditions.
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nConditionPanel.prototype.removeInvalidConditions = function() {  };

/**
 * removes all errors/warning states from the value1/2 fields of all conditions.
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nConditionPanel.prototype.removeValidationErrors = function() {  };

/**
 * sets the AlwaysShowAddIcon.
 * @public
 * @since 1.26.0
 * @param {boolean}
 *            bEnabled makes the Add icon visible for each condition row.
 * 
 */
sap.m.P13nConditionPanel.prototype.setAlwaysShowAddIcon = function(bEnabled) {  };

/**
 * Setter for property <code>autoAddNewRow</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoAddNewRow new value for property <code>autoAddNewRow</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setAutoAddNewRow = function(bAutoAddNewRow) { return new sap.m.P13nConditionPanel(); };

/**
 * Setter for property <code>autoReduceKeyFieldItems</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoReduceKeyFieldItems new value for property <code>autoReduceKeyFieldItems</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setAutoReduceKeyFieldItems = function(bAutoReduceKeyFieldItems) { return new sap.m.P13nConditionPanel(); };

/**
 * This method must be used to assign a list of conditions.
 * @param {object[]}
 *            aConditions array of Conditions.
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nConditionPanel.prototype.setConditions = function(aConditions) {  };

/**
 * Setter for property <code>containerQuery</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery new value for property <code>containerQuery</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nConditionPanel(); };

/**
 * Setter for property <code>disableFirstRemoveIcon</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisableFirstRemoveIcon new value for property <code>disableFirstRemoveIcon</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setDisableFirstRemoveIcon = function(bDisableFirstRemoveIcon) { return new sap.m.P13nConditionPanel(); };

/**
 * Setter for property <code>displayFormat</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDisplayFormat new value for property <code>displayFormat</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.P13nConditionPanel(); };

/**
 * Setter for property <code>exclude</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExclude new value for property <code>exclude</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setExclude = function(bExclude) { return new sap.m.P13nConditionPanel(); };

/**
 * This method allows you to specify the KeyFields for the conditions. You can set an array of
 * object with Key and Text properties to define the keyfields.
 * @public
 * @since 1.26.0
 * @param {array}
 *            aKeyFields array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]
 * 
 */
sap.m.P13nConditionPanel.prototype.setKeyFields = function(aKeyFields) {  };

/**
 * sets the LayoutMode. If not set the layout depends on the size of the browser or the container.
 * see ContainerQuery
 * @public
 * @since 1.26.0
 * @param {string}
 *            sLayoutMode define the layout mode for the condition row. The value can be Desktop,
 *            Tablet or Phone.
 * 
 */
sap.m.P13nConditionPanel.prototype.setLayoutMode = function(sLayoutMode) {  };

/**
 * Setter for property <code>maxConditions</code>.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxConditions new value for property <code>maxConditions</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setMaxConditions = function(sMaxConditions) { return new sap.m.P13nConditionPanel(); };

/**
 * setter for the supported operations which we show per condition row. This array of "default"
 * operations will only be used when we do not have on the keyfield itself some specific operations
 * and a keyfield is of not of type date or numeric.
 * @public
 * @since 1.26.0
 * @param {sap.m.P13nConditionOperation[]}
 *            aOperations array of operations [sap.m.P13nConditionOperation.BT,
 *            sap.m.P13nConditionOperation.EQ]
 * @param {string}
 *            sType defines the type for which this operations will be used. is sType is not defined
 *            the operations will be used as default operations.
 * 
 */
sap.m.P13nConditionPanel.prototype.setOperations = function(aOperations,sType) {  };

/**
 * Setter for property <code>showLabel</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowLabel new value for property <code>showLabel</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setShowLabel = function(bShowLabel) { return new sap.m.P13nConditionPanel(); };

/**
 * Setter for property <code>usePrevConditionSetting</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUsePrevConditionSetting new value for property <code>usePrevConditionSetting</code>
 * @return {sap.m.P13nConditionPanel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setUsePrevConditionSetting = function(bUsePrevConditionSetting) { return new sap.m.P13nConditionPanel(); };


// ---- sap.m.P13nDialog --------------------------------------------------------------------------

/**
 * Constructor for a new P13nDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInitialVisiblePanelType initialVisiblePanelType} : sap.m.P13nPanelType</li>
 * <li>{@link #getShowReset showReset} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPanels panels} : sap.m.P13nPanel[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:ok ok} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Dialog#constructor sap.m.Dialog}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The P13nDialog control provides dialog that contains one or more panels. On each of the panels, one or more changes with regards to a
 *        table can be processed. For example, a panel to set a column to invisible, change the order of the columns or a panel to sort or filter
 *        tables.
 * @extends sap.m.Dialog
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nDialog = function(sId,mSettings) {};
/**
 * Event fired if the 'cancel' button in P13nDialog is clicked.
 * @event
 * @since 1.26.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * Event fired if the 'ok' button in P13nDialog is clicked.
 * @event
 * @since 1.26.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nDialog.prototype.ok = function(oControlEvent) {  };

/**
 * Event fired if the 'reset' button in P13nDialog is clicked.
 * @event
 * @since 1.26.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nDialog.prototype.reset = function(oControlEvent) {  };

/**
 * Adds some panel into the aggregation named <code>panels</code>.
 * @param {sap.m.P13nPanel}
 *            oPanel the panel to add; to add; if empty, nothing is inserted
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.addPanel = function(oPanel) { return new sap.m.P13nDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.P13nDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nDialog</code>.<br> itself.
 * 
 * Event fired if the 'cancel' button in P13nDialog is clicked.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code>.<br/> itself.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'ok' event of this <code>sap.m.P13nDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nDialog</code>.<br> itself.
 * 
 * Event fired if the 'ok' button in P13nDialog is clicked.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code>.<br/> itself.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.attachOk = function(oData,fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'reset' event of this <code>sap.m.P13nDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nDialog</code>.<br> itself.
 * 
 * Event fired if the 'reset' button in P13nDialog is clicked.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code>.<br/> itself.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.attachReset = function(oData,fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Binder for aggregation <code>panels</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.bindPanels = function(oBindingInfo) { return new sap.m.P13nDialog(); };

/**
 * Destroys all the panels in the aggregation named <code>panels</code>.
 * @returns {sap.m.P13nDialog} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.P13nDialog.prototype.destroyPanels = function() { return new sap.m.P13nDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.P13nDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'ok' event of this <code>sap.m.P13nDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.detachOk = function(fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'reset' event of this <code>sap.m.P13nDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.detachReset = function(fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Creates a new subclass of class sap.m.P13nDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.fireCancel = function(mArguments) { return new sap.m.P13nDialog(); };

/**
 * Fire event ok to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.fireOk = function(mArguments) { return new sap.m.P13nDialog(); };

/**
 * Fire event reset to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.fireReset = function(mArguments) { return new sap.m.P13nDialog(); };

/**
 * Getter for property <code>initialVisiblePanelType</code>.
 * This property determines which panel is initially shown when dialog is opened.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.P13nPanelType} the value of property <code>initialVisiblePanelType</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getInitialVisiblePanelType = function() { return new sap.m.P13nPanelType(); };

/**
 * Returns a metadata object for class sap.m.P13nDialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for aggregation <code>panels</code>.<br/>
 * The dialog panels displayed in the dialog.
 * @return {sap.m.P13nPanel[]}
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getPanels = function() { return new Array(); };

/**
 * Getter for property <code>showReset</code>.
 * This property determines whether the 'Reset' button is shown inside the dialog. If this property is set to true, clicking the
 * 'Reset' button will trigger the 'reset' event sending a notification that model data must be reset.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showReset</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getShowReset = function() { return false; };

/**
 * Returns visible panel.
 * @returns {sap.m.P13nPanel || null}
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nDialog.prototype.getVisiblePanel = function() {  };

/**
 * Checks for the provided <code>sap.m.P13nPanel</code> in the aggregation named <code>panels</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nPanel}
 *           oPanel the panel whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.indexOfPanel = function(oPanel) { return 0; };

/**
 * Inserts a panel into the aggregation named <code>panels</code>.
 * @param {sap.m.P13nPanel}
 *            oPanel the panel to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the panel should be inserted at; for
 *              a negative value of <code>iIndex</code>, the panel is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the panel is inserted at
 *              the last position
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.insertPanel = function(oPanel,iIndex) { return new sap.m.P13nDialog(); };

/**
 * Removes all the controls in the aggregation named <code>panels</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.P13nPanel[]} an array of the removed elements (might be empty)
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.removeAllPanels = function() { return new Array(); };

/**
 * Removes an panel from the aggregation named <code>panels</code>.
 * @param {int | string | sap.m.P13nPanel} vPanel the panelto remove or its index or id
 * @return {sap.m.P13nPanel} the removed panel or null
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.removePanel = function(vPanel) { return new sap.m.P13nPanel(); };

/**
 * Setter for property <code>initialVisiblePanelType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.P13nPanelType} sInitialVisiblePanelType new value for property <code>initialVisiblePanelType</code>
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.setInitialVisiblePanelType = function(sInitialVisiblePanelType) { return new sap.m.P13nDialog(); };

/**
 * Setter for property <code>showReset</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowReset new value for property <code>showReset</code>
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.setShowReset = function(bShowReset) { return new sap.m.P13nDialog(); };

/**
 * Unbinder for aggregation <code>panels</code>.
 * @return {sap.m.P13nDialog} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nDialog.prototype.unbindPanels = function() { return new sap.m.P13nDialog(); };


// ---- sap.m.P13nFilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nFilterItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOperation operation} : string</li>
 * <li>{@link #getValue1 value1} : string</li>
 * <li>{@link #getValue2 value2} : string</li>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getExclude exclude} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class tbd
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nFilterItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nFilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>columnKey</code>.
 * key of the column
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>columnKey</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getColumnKey = function() { return ""; };

/**
 * Getter for property <code>exclude</code>.
 * defines if the filter is an include or exclude filter item
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>exclude</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getExclude = function() { return false; };

/**
 * Returns a metadata object for class sap.m.P13nFilterItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nFilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>operation</code>.
 * sap.m.P13nConditionOperation
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>operation</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getOperation = function() { return ""; };

/**
 * Getter for property <code>value1</code>.
 * value of the filter
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value1</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getValue1 = function() { return ""; };

/**
 * Getter for property <code>value2</code>.
 * to value of the between filter
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value2</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getValue2 = function() { return ""; };

/**
 * Setter for property <code>columnKey</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sColumnKey new value for property <code>columnKey</code>
 * @return {sap.m.P13nFilterItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nFilterItem(); };

/**
 * Setter for property <code>exclude</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExclude new value for property <code>exclude</code>
 * @return {sap.m.P13nFilterItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setExclude = function(bExclude) { return new sap.m.P13nFilterItem(); };

/**
 * Setter for property <code>operation</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sOperation new value for property <code>operation</code>
 * @return {sap.m.P13nFilterItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setOperation = function(sOperation) { return new sap.m.P13nFilterItem(); };

/**
 * Setter for property <code>value1</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue1 new value for property <code>value1</code>
 * @return {sap.m.P13nFilterItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setValue1 = function(sValue1) { return new sap.m.P13nFilterItem(); };

/**
 * Setter for property <code>value2</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue2 new value for property <code>value2</code>
 * @return {sap.m.P13nFilterItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setValue2 = function(sValue2) { return new sap.m.P13nFilterItem(); };


// ---- sap.m.P13nFilterPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nFilterPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxIncludes maxIncludes} : string (default: -1)</li>
 * <li>{@link #getMaxExcludes maxExcludes} : string (default: -1)</li>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFilterItems filterItems} : sap.m.P13nFilterItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addFilterItem addFilterItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:removeFilterItem removeFilterItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateFilterItem updateFilterItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * @param {string}
 *            [sId] id for the new control, generated automatically if no id is given
 * @param {object}
 *            [mSettings] initial settings for the new control
 * @class The FilterPanel Control can be used to...
 * @extends sap.m.P13nPanel
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime
 *                metamodel
 * 
 */
sap.m.P13nFilterPanel = function(sId,mSettings) {};
/**
 * event raised when a filterItem was added
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.addFilterItem = function(oControlEvent) {  };

/**
 * remove a filter item
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.removeFilterItem = function(oControlEvent) {  };

/**
 * update a filter item
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.updateFilterItem = function(oControlEvent) {  };

/**
 * Adds some filterItem into the aggregation named <code>filterItems</code>.
 * @param {sap.m.P13nFilterItem}
 *            oFilterItem the filterItem to add; to add; if empty, nothing is inserted
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.addFilterItem = function(oFilterItem) { return new sap.m.P13nFilterPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'addFilterItem' event of this <code>sap.m.P13nFilterPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nFilterPanel</code>.<br> itself.
 * 
 * event raised when a filterItem was added
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code>.<br/> itself.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.attachAddFilterItem = function(oData,fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'removeFilterItem' event of this <code>sap.m.P13nFilterPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nFilterPanel</code>.<br> itself.
 * 
 * remove a filter item
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code>.<br/> itself.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.attachRemoveFilterItem = function(oData,fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'updateFilterItem' event of this <code>sap.m.P13nFilterPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nFilterPanel</code>.<br> itself.
 * 
 * update a filter item
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code>.<br/> itself.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.attachUpdateFilterItem = function(oData,fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Binder for aggregation <code>filterItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.bindFilterItems = function(oBindingInfo) { return new sap.m.P13nFilterPanel(); };

/**
 * Destroys all the filterItems in the aggregation
 * named <code>filterItems</code>.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.destroyFilterItems = function() { return new sap.m.P13nFilterPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'addFilterItem' event of this <code>sap.m.P13nFilterPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.detachAddFilterItem = function(fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'removeFilterItem' event of this <code>sap.m.P13nFilterPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.detachRemoveFilterItem = function(fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'updateFilterItem' event of this <code>sap.m.P13nFilterPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.detachUpdateFilterItem = function(fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nFilterPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nFilterPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event addFilterItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.fireAddFilterItem = function(mArguments) { return new sap.m.P13nFilterPanel(); };

/**
 * Fire event removeFilterItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.fireRemoveFilterItem = function(mArguments) { return new sap.m.P13nFilterPanel(); };

/**
 * Fire event updateFilterItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.fireUpdateFilterItem = function(mArguments) { return new sap.m.P13nFilterPanel(); };

/**
 * returns the array of conditions.
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nFilterPanel.prototype.getConditions = function() {  };

/**
 * Getter for property <code>containerQuery</code>.
 * defines if the mediaQuery or a ContainerResize will be used for layout update. When
 * the ConditionPanel is used on a dialog the property should be set to true!
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>containerQuery</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getContainerQuery = function() { return false; };

/**
 * getter for the Exclude operations 
 * @public
 * @since 1.26
 * @returns {array}
 *            array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
 * 
 */
sap.m.P13nFilterPanel.prototype.getExcludeOperations = function() { return null; };

/**
 * Getter for aggregation <code>filterItems</code>.<br/>
 * defined Filter Items
 * @return {sap.m.P13nFilterItem[]}
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getFilterItems = function() { return new Array(); };

/**
 * getter for the Include operations 
 * @public
 * @since 1.26
 * @returns {array}
 *            array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
 * 
 */
sap.m.P13nFilterPanel.prototype.getIncludeOperations = function() { return null; };

/**
 * Getter for property <code>layoutMode</code>.
 * can be used to control the layout behavior. Default is "" which will automatically
 * change the layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>layoutMode</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Getter for property <code>maxExcludes</code>.
 * defines the max number of exclude filter
 * 
 * Default value is <code>-1</code>
 * @return {string} the value of property <code>maxExcludes</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getMaxExcludes = function() { return ""; };

/**
 * Getter for property <code>maxIncludes</code>.
 * defines the max number of include filter.
 * 
 * Default value is <code>-1</code>
 * @return {string} the value of property <code>maxIncludes</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getMaxIncludes = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nFilterPanel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nFilterPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.P13nFilterItem</code> in the aggregation named <code>filterItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nFilterItem}
 *           oFilterItem the filterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.indexOfFilterItem = function(oFilterItem) { return 0; };

/**
 * Inserts a filterItem into the aggregation named <code>filterItems</code>.
 * @param {sap.m.P13nFilterItem}
 *            oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the filterItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the filterItem is inserted at
 *              the last position
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.insertFilterItem = function(oFilterItem,iIndex) { return new sap.m.P13nFilterPanel(); };

/**
 * Removes all the controls in the aggregation named <code>filterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.P13nFilterItem[]} an array of the removed elements (might be empty)
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.removeAllFilterItems = function() { return new Array(); };

/**
 * Removes an filterItem from the aggregation named <code>filterItems</code>.
 * @param {int | string | sap.m.P13nFilterItem} vFilterItem the filterItemto remove or its index or id
 * @return {sap.m.P13nFilterItem} the removed filterItem or null
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.removeFilterItem = function(vFilterItem) { return new sap.m.P13nFilterItem(); };

/**
 * removes all invalid conditions.					 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nFilterPanel.prototype.removeInvalidConditions = function() {  };

/**
 * removes all errors/warning states from of all filter conditions.
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nFilterPanel.prototype.removeValidationErrors = function() {  };

/**
 * sets the array of conditions.
 * @public
 * @since 1.26
 * @param {object[]}
 *            aConditions the complete list of conditions
 * 
 */
sap.m.P13nFilterPanel.prototype.setConditions = function(aConditions) {  };

/**
 * Setter for property <code>containerQuery</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery new value for property <code>containerQuery</code>
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nFilterPanel(); };

/**
 * setter for the supported Exclude operations array
 * @public
 * @since 1.26
 * @param {array}
 *            array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
 * 
 */
sap.m.P13nFilterPanel.prototype.setExcludeOperations = function(array) {  };

/**
 * setter for the supported Include operations array
 * @public
 * @since 1.26
 * @param {array}
 *            array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
 * 
 */
sap.m.P13nFilterPanel.prototype.setIncludeOperations = function(array) {  };

/**
 * setter for a KeyFields array
 * @public
 * @since 1.26
 * @param {array}
 *            array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text :
 *            "Name"}]
 * 
 */
sap.m.P13nFilterPanel.prototype.setKeyFields = function(array) {  };

/**
 * Setter for property <code>layoutMode</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sLayoutMode new value for property <code>layoutMode</code>
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setLayoutMode = function(sLayoutMode) { return new sap.m.P13nFilterPanel(); };

/**
 * Setter for property <code>maxExcludes</code>.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxExcludes new value for property <code>maxExcludes</code>
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setMaxExcludes = function(sMaxExcludes) { return new sap.m.P13nFilterPanel(); };

/**
 * Setter for property <code>maxIncludes</code>.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxIncludes new value for property <code>maxIncludes</code>
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setMaxIncludes = function(sMaxIncludes) { return new sap.m.P13nFilterPanel(); };

/**
 * Unbinder for aggregation <code>filterItems</code>.
 * @return {sap.m.P13nFilterPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.unbindFilterItems = function() { return new sap.m.P13nFilterPanel(); };

/**
 * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state)
 * @public
 * @since 1.26
 * @returns {boolean}
 * 			false, if there is an invalid condition 
 * 
 */
sap.m.P13nFilterPanel.prototype.validateConditions = function() { return false; };


// ---- sap.m.P13nGroupItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nGroupItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOperation operation} : string</li>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getShowIfGrouped showIfGrouped} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class tbd
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nGroupItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nGroupItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nGroupItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>columnKey</code>.
 * key of the column
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>columnKey</code>
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.getColumnKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nGroupItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nGroupItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>operation</code>.
 * sap.m.P13nConditionOperation
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>operation</code>
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.getOperation = function() { return ""; };

/**
 * Getter for property <code>showIfGrouped</code>.
 * make the grouped column as normalcolumn visible
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showIfGrouped</code>
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.getShowIfGrouped = function() { return false; };

/**
 * Setter for property <code>columnKey</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sColumnKey new value for property <code>columnKey</code>
 * @return {sap.m.P13nGroupItem} <code>this</code> to allow method chaining
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nGroupItem(); };

/**
 * Setter for property <code>operation</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sOperation new value for property <code>operation</code>
 * @return {sap.m.P13nGroupItem} <code>this</code> to allow method chaining
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.setOperation = function(sOperation) { return new sap.m.P13nGroupItem(); };

/**
 * Setter for property <code>showIfGrouped</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowIfGrouped new value for property <code>showIfGrouped</code>
 * @return {sap.m.P13nGroupItem} <code>this</code> to allow method chaining
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.setShowIfGrouped = function(bShowIfGrouped) { return new sap.m.P13nGroupItem(); };


// ---- sap.m.P13nGroupPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nGroupPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxGroups maxGroups} : string (default: -1)</li>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroupItems groupItems} : sap.m.P13nGroupItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addGroupItem addGroupItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:removeGroupItem removeGroupItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateGroupItem updateGroupItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * @param {string}
 *            [sId] id for the new control, generated automatically if no id is given
 * @param {object}
 *            [mSettings] initial settings for the new control
 * @class The GroupPanel Control can be used to...
 * @extends sap.m.P13nPanel
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nGroupPanel = function(sId,mSettings) {};
/**
 * event raised when a GroupItem was added
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.addGroupItem = function(oControlEvent) {  };

/**
 * remove a group item
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.removeGroupItem = function(oControlEvent) {  };

/**
 * update a group item
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.updateGroupItem = function(oControlEvent) {  };

/**
 * Adds some groupItem into the aggregation named <code>groupItems</code>.
 * @param {sap.m.P13nGroupItem}
 *            oGroupItem the groupItem to add; to add; if empty, nothing is inserted
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.addGroupItem = function(oGroupItem) { return new sap.m.P13nGroupPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'addGroupItem' event of this <code>sap.m.P13nGroupPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nGroupPanel</code>.<br> itself.
 * 
 * event raised when a GroupItem was added
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code>.<br/> itself.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.attachAddGroupItem = function(oData,fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'removeGroupItem' event of this <code>sap.m.P13nGroupPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nGroupPanel</code>.<br> itself.
 * 
 * remove a group item
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code>.<br/> itself.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.attachRemoveGroupItem = function(oData,fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'updateGroupItem' event of this <code>sap.m.P13nGroupPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nGroupPanel</code>.<br> itself.
 * 
 * update a group item
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code>.<br/> itself.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.attachUpdateGroupItem = function(oData,fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Binder for aggregation <code>groupItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.bindGroupItems = function(oBindingInfo) { return new sap.m.P13nGroupPanel(); };

/**
 * Destroys all the groupItems in the aggregation
 * named <code>groupItems</code>.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.destroyGroupItems = function() { return new sap.m.P13nGroupPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'addGroupItem' event of this <code>sap.m.P13nGroupPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.detachAddGroupItem = function(fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'removeGroupItem' event of this <code>sap.m.P13nGroupPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.detachRemoveGroupItem = function(fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'updateGroupItem' event of this <code>sap.m.P13nGroupPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.detachUpdateGroupItem = function(fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nGroupPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nGroupPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event addGroupItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.fireAddGroupItem = function(mArguments) { return new sap.m.P13nGroupPanel(); };

/**
 * Fire event removeGroupItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.fireRemoveGroupItem = function(mArguments) { return new sap.m.P13nGroupPanel(); };

/**
 * Fire event updateGroupItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.fireUpdateGroupItem = function(mArguments) { return new sap.m.P13nGroupPanel(); };

/**
 * Getter for property <code>containerQuery</code>.
 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the
 * ConditionPanel is used on a dialog the property should be set to true!
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>containerQuery</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Getter for aggregation <code>groupItems</code>.<br/>
 * defined group Items
 * @return {sap.m.P13nGroupItem[]}
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getGroupItems = function() { return new Array(); };

/**
 * Getter for property <code>layoutMode</code>.
 * can be used to control the layout behavior. Default is "" which will automatically change the
 * layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>layoutMode</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Getter for property <code>maxGroups</code>.
 * defines the max number of groups.
 * 
 * Default value is <code>-1</code>
 * @return {string} the value of property <code>maxGroups</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getMaxGroups = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nGroupPanel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nGroupPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.P13nGroupItem</code> in the aggregation named <code>groupItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nGroupItem}
 *           oGroupItem the groupItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.indexOfGroupItem = function(oGroupItem) { return 0; };

/**
 * Inserts a groupItem into the aggregation named <code>groupItems</code>.
 * @param {sap.m.P13nGroupItem}
 *            oGroupItem the groupItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the groupItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the groupItem is inserted at
 *              the last position
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.insertGroupItem = function(oGroupItem,iIndex) { return new sap.m.P13nGroupPanel(); };

/**
 * Removes all the controls in the aggregation named <code>groupItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.P13nGroupItem[]} an array of the removed elements (might be empty)
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.removeAllGroupItems = function() { return new Array(); };

/**
 * Removes an groupItem from the aggregation named <code>groupItems</code>.
 * @param {int | string | sap.m.P13nGroupItem} vGroupItem the groupItemto remove or its index or id
 * @return {sap.m.P13nGroupItem} the removed groupItem or null
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.removeGroupItem = function(vGroupItem) { return new sap.m.P13nGroupItem(); };

/**
 * removes all invalid Group conditions.					 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nGroupPanel.prototype.removeInvalidConditions = function() {  };

/**
 * removes all errors/warning states from of all group conditions.
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nGroupPanel.prototype.removeValidationErrors = function() {  };

/**
 * Setter for property <code>containerQuery</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery new value for property <code>containerQuery</code>
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nGroupPanel(); };

/**
 * Setter for property <code>layoutMode</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sLayoutMode new value for property <code>layoutMode</code>
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.setLayoutMode = function(sLayoutMode) { return new sap.m.P13nGroupPanel(); };

/**
 * Setter for property <code>maxGroups</code>.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxGroups new value for property <code>maxGroups</code>
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.setMaxGroups = function(sMaxGroups) { return new sap.m.P13nGroupPanel(); };

/**
 * setter for the supported operations array
 * @public
 * @since 1.26
 * @param {array}
 *            array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
 * 
 */
sap.m.P13nGroupPanel.prototype.setOperations = function(array) {  };

/**
 * Unbinder for aggregation <code>groupItems</code>.
 * @return {sap.m.P13nGroupPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.unbindGroupItems = function() { return new sap.m.P13nGroupPanel(); };

/**
 * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state) and
 * opens a popup message dialog to give the user the feedback that some values are wrong or missing.
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nGroupPanel.prototype.validateConditions = function() {  };


// ---- sap.m.P13nItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getVisible visible} : boolean</li>
 * <li>{@link #getType type} : string (default: text)</li>
 * <li>{@link #getPrecision precision} : string</li>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getMaxLength maxLength} : string</li>
 * <li>{@link #getWidth width} : string</li>
 * <li>{@link #getIsDefault isDefault} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string}
 *          [sId] id for the new control, generated automatically if no id is given
 * @param {object}
 *          [mSettings] initial settings for the new control
 * @class tbd (should enable panels of personalization to have a constistent view of the 'columns' of the table)
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>columnKey</code>.
 * Can be used as input for subsequent actions.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>columnKey</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getColumnKey = function() { return ""; };

/**
 * Getter for property <code>isDefault</code>.
 * the column with isDefault==true will be used as the selected column item on the conditionPanel
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isDefault</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getIsDefault = function() { return false; };

/**
 * Getter for property <code>maxLength</code>.
 * specifies the number of characters which can be entered in the value fields of the condition panel
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>maxLength</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getMaxLength = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>precision</code>.
 * if type==numeric the precision will be used to format the entered value (maxIntegerDigits  of the used Formatter)
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>precision</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getPrecision = function() { return ""; };

/**
 * Getter for property <code>scale</code>.
 * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>scale</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getScale = function() { return ""; };

/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>text</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>type</code>.
 * data type of the column (text, numeric or date is supported)
 * 
 * Default value is <code>text</code>
 * @return {string} the value of property <code>type</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getType = function() { return ""; };

/**
 * Getter for property <code>visible</code>.
 * tbd
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>visible</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * tbd
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>width</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.getWidth = function() { return ""; };

/**
 * Setter for property <code>columnKey</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sColumnKey new value for property <code>columnKey</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>isDefault</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIsDefault new value for property <code>isDefault</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setIsDefault = function(bIsDefault) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>maxLength</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sMaxLength new value for property <code>maxLength</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setMaxLength = function(sMaxLength) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>precision</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sPrecision new value for property <code>precision</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setPrecision = function(sPrecision) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>scale</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sScale new value for property <code>scale</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setScale = function(sScale) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setText = function(sText) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>text</code>.
 * @param {string} sType new value for property <code>type</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setType = function(sType) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setVisible = function(bVisible) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sWidth new value for property <code>width</code>
 * @return {sap.m.P13nItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nItem.prototype.setWidth = function(sWidth) { return new sap.m.P13nItem(); };


// ---- sap.m.P13nPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getType type} : sap.m.P13nPanelType</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.P13nItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeNavigationTo beforeNavigationTo} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class tbd
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nPanel = function(sId,mSettings) {};
/**
 * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
 * @event
 * @since 1.28.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nPanel.prototype.beforeNavigationTo = function(oControlEvent) {  };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.P13nItem}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.addItem = function(oItem) { return new sap.m.P13nPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeNavigationTo' event of this <code>sap.m.P13nPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nPanel</code>.<br> itself.
 * 
 * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nPanel</code>.<br/> itself.
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.attachBeforeNavigationTo = function(oData,fnFunction,oListener) { return new sap.m.P13nPanel(); };

/**
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.beforeNavigationTo = function() {  };

/**
 * Binder for aggregation <code>items</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.bindItems = function(oBindingInfo) { return new sap.m.P13nPanel(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.destroyItems = function() { return new sap.m.P13nPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeNavigationTo' event of this <code>sap.m.P13nPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.28.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.detachBeforeNavigationTo = function(fnFunction,oListener) { return new sap.m.P13nPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event beforeNavigationTo to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.fireBeforeNavigationTo = function(mArguments) { return new sap.m.P13nPanel(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of items
 * @return {sap.m.P13nItem[]}
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.P13nPanel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * This method can be overwritten by subclass in order to return a payload
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.getOkPayload = function() {  };

/**
 * Getter for property <code>title</code>.
 * Title text appears in the panel
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>type</code>.
 * Panel type for generic use
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.P13nPanelType} the value of property <code>type</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getType = function() { return new sap.m.P13nPanelType(); };

/**
 * Getter for property <code>verticalScrolling</code>.
 * makes the vertical Scrolling on the P13nDialog enabled when the panel is shown
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.m.P13nItem</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nItem}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.P13nItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.insertItem = function(oItem,iIndex) { return new sap.m.P13nPanel(); };

/**
 * This method can be overwritten by subclass in order to cleanup after navigation, e.g. to remove invalid content on the panel.
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.onAfterNavigationFrom = function() {  };

/**
 * This method can be overwritten by subclass in order to prevent navigation to another panel. This could be the case if some content on the panel
 * is considered 'invalid'.
 * @returns {boolean} true if it is allowed to navigate away from this panel, false if it is not allowed
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.onBeforeNavigationFrom = function() { return false; };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.P13nItem[]} an array of the removed elements (might be empty)
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.P13nItem} vItem the itemto remove or its index or id
 * @return {sap.m.P13nItem} the removed item or null
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.removeItem = function(vItem) { return new sap.m.P13nItem(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setTitle = function(sTitle) { return new sap.m.P13nPanel(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.P13nPanelType} sType new value for property <code>type</code>
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setType = function(sType) { return new sap.m.P13nPanel(); };

/**
 * Setter for property <code>verticalScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling new value for property <code>verticalScrolling</code>
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.P13nPanel(); };

/**
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.P13nPanel} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nPanel.prototype.unbindItems = function() { return new sap.m.P13nPanel(); };


// ---- sap.m.P13nPanelType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.P13nPanelType.toString = function() { return ""; };

// ---- sap.m.P13nSortItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nSortItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOperation operation} : string</li>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class tbd
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nSortItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nSortItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nSortItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>columnKey</code>.
 * key of the column
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>columnKey</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.getColumnKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nSortItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nSortItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>operation</code>.
 * sap.m.P13nConditionOperation
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>operation</code>
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.getOperation = function() { return ""; };

/**
 * Setter for property <code>columnKey</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sColumnKey new value for property <code>columnKey</code>
 * @return {sap.m.P13nSortItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nSortItem(); };

/**
 * Setter for property <code>operation</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sOperation new value for property <code>operation</code>
 * @return {sap.m.P13nSortItem} <code>this</code> to allow method chaining
 * @since 1.26.0
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.setOperation = function(sOperation) { return new sap.m.P13nSortItem(); };


// ---- sap.m.P13nSortPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nSortPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSortItems sortItems} : sap.m.P13nSortItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addSortItem addSortItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:removeSortItem removeSortItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateSortItem updateSortItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * @param {string}
 *            [sId] id for the new control, generated automatically if no id is given
 * @param {object}
 *            [mSettings] initial settings for the new control
 * @class The SortPanel Control can be used to...
 * @extends sap.m.P13nPanel
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nSortPanel = function(sId,mSettings) {};
/**
 * event raised when a SortItem was added
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.addSortItem = function(oControlEvent) {  };

/**
 * remove a sort item
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.removeSortItem = function(oControlEvent) {  };

/**
 * update a sort item
 * @event
 * @since 1.26
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.updateSortItem = function(oControlEvent) {  };

/**
 * Adds some sortItem into the aggregation named <code>sortItems</code>.
 * @param {sap.m.P13nSortItem}
 *            oSortItem the sortItem to add; to add; if empty, nothing is inserted
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.addSortItem = function(oSortItem) { return new sap.m.P13nSortPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'addSortItem' event of this <code>sap.m.P13nSortPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nSortPanel</code>.<br> itself.
 * 
 * event raised when a SortItem was added
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code>.<br/> itself.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.attachAddSortItem = function(oData,fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'removeSortItem' event of this <code>sap.m.P13nSortPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nSortPanel</code>.<br> itself.
 * 
 * remove a sort item
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code>.<br/> itself.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.attachRemoveSortItem = function(oData,fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'updateSortItem' event of this <code>sap.m.P13nSortPanel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.P13nSortPanel</code>.<br> itself.
 * 
 * update a sort item
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code>.<br/> itself.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.attachUpdateSortItem = function(oData,fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Binder for aggregation <code>sortItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.bindSortItems = function(oBindingInfo) { return new sap.m.P13nSortPanel(); };

/**
 * Destroys all the sortItems in the aggregation
 * named <code>sortItems</code>.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.destroySortItems = function() { return new sap.m.P13nSortPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'addSortItem' event of this <code>sap.m.P13nSortPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.detachAddSortItem = function(fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'removeSortItem' event of this <code>sap.m.P13nSortPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.detachRemoveSortItem = function(fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'updateSortItem' event of this <code>sap.m.P13nSortPanel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.detachUpdateSortItem = function(fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nSortPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nSortPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event addSortItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.fireAddSortItem = function(mArguments) { return new sap.m.P13nSortPanel(); };

/**
 * Fire event removeSortItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.fireRemoveSortItem = function(mArguments) { return new sap.m.P13nSortPanel(); };

/**
 * Fire event updateSortItem to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.fireUpdateSortItem = function(mArguments) { return new sap.m.P13nSortPanel(); };

/**
 * Getter for property <code>containerQuery</code>.
 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the
 * ConditionPanel is used on a dialog the property should be set to true!
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>containerQuery</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Getter for property <code>layoutMode</code>.
 * can be used to control the layout behavior. Default is "" which will automatically change the
 * layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>layoutMode</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nSortPanel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.P13nSortPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for aggregation <code>sortItems</code>.<br/>
 * defined Sort Items
 * @return {sap.m.P13nSortItem[]}
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.getSortItems = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.P13nSortItem</code> in the aggregation named <code>sortItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nSortItem}
 *           oSortItem the sortItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.indexOfSortItem = function(oSortItem) { return 0; };

/**
 * Inserts a sortItem into the aggregation named <code>sortItems</code>.
 * @param {sap.m.P13nSortItem}
 *            oSortItem the sortItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the sortItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the sortItem is inserted at
 *              the last position
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.insertSortItem = function(oSortItem,iIndex) { return new sap.m.P13nSortPanel(); };

/**
 * Removes all the controls in the aggregation named <code>sortItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.P13nSortItem[]} an array of the removed elements (might be empty)
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.removeAllSortItems = function() { return new Array(); };

/**
 * removes all invalid sort conditions.					 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nSortPanel.prototype.removeInvalidConditions = function() {  };

/**
 * Removes an sortItem from the aggregation named <code>sortItems</code>.
 * @param {int | string | sap.m.P13nSortItem} vSortItem the sortItemto remove or its index or id
 * @return {sap.m.P13nSortItem} the removed sortItem or null
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.removeSortItem = function(vSortItem) { return new sap.m.P13nSortItem(); };

/**
 * removes all errors/warning states from of all sort conditions.
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nSortPanel.prototype.removeValidationErrors = function() {  };

/**
 * Setter for property <code>containerQuery</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery new value for property <code>containerQuery</code>
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nSortPanel(); };

/**
 * Setter for property <code>layoutMode</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sLayoutMode new value for property <code>layoutMode</code>
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.setLayoutMode = function(sLayoutMode) { return new sap.m.P13nSortPanel(); };

/**
 * setter for the supported operations array
 * @public
 * @since 1.26
 * @param {array}
 *            array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
 * 
 */
sap.m.P13nSortPanel.prototype.setOperations = function(array) {  };

/**
 * Unbinder for aggregation <code>sortItems</code>.
 * @return {sap.m.P13nSortPanel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.unbindSortItems = function() { return new sap.m.P13nSortPanel(); };

/**
 * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state) and
 * opens a popup message dialog to give the user the feedback that some values are wrong or missing.
 * @public
 * @since 1.26
 * 
 */
sap.m.P13nSortPanel.prototype.validateConditions = function() {  };


// ---- sap.m.Page --------------------------------------------------------------------------

/**
 * Constructor for a new Page.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getNavButtonText navButtonText} : string</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign</li>
 * <li>{@link #getNavButtonType navButtonType} : sap.m.ButtonType</li>
 * <li>{@link #getShowFooter showFooter} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.IBar</li>
 * <li>{@link #getFooter footer} : sap.m.IBar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Page = function(sId,mSettings) {};
/**
 * this event is fired when Nav Button is pressed
 * @event
 * @since 1.12.2
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Page.prototype.navButtonPress = function(oControlEvent) {  };

/**
 * this event is fired when Nav Button is tapped
 * @event
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Page.prototype.navButtonTap = function(oControlEvent) {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.addContent = function(oContent) { return new sap.m.Page(); };

/**
 * Adds some headerContent into the aggregation named <code>headerContent</code>.
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.addHeaderContent = function(oHeaderContent) { return new sap.m.Page(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br> itself.
 * 
 * this event is fired when Nav Button is pressed
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.attachNavButtonPress = function(oData,fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br> itself.
 * 
 * this event is fired when Nav Button is tapped
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.attachNavButtonTap = function(oData,fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyContent = function() { return new sap.m.Page(); };

/**
 * Destroys the customHeader in the aggregation
 * named <code>customHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyCustomHeader = function() { return new sap.m.Page(); };

/**
 * Destroys the footer in the aggregation
 * named <code>footer</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyFooter = function() { return new sap.m.Page(); };

/**
 * Destroys all the headerContent in the aggregation
 * named <code>headerContent</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyHeaderContent = function() { return new sap.m.Page(); };

/**
 * Destroys the subHeader in the aggregation
 * named <code>subHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroySubHeader = function() { return new sap.m.Page(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @since 1.12.2
 * @public
 * 
 */
sap.m.Page.prototype.detachNavButtonPress = function(fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @public
 * 
 */
sap.m.Page.prototype.detachNavButtonTap = function(fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Page.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event navButtonPress to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.fireNavButtonPress = function(mArguments) { return new sap.m.Page(); };

/**
 * Fire event navButtonTap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.fireNavButtonTap = function(mArguments) { return new sap.m.Page(); };

/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.PageBackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.m.Page.prototype.getBackgroundDesign = function() { return new sap.m.PageBackgroundDesign(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this page
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Page.prototype.getContent = function() { return new Array(); };

/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * The (optional) custom header of this page.
 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
 * @return {sap.m.IBar}
 * @public
 * 
 */
sap.m.Page.prototype.getCustomHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for property <code>enableScrolling</code>.
 * Whether the Page takes special measures to make page content scrollable and keep headers fixed.
 * If set to false, there will be no scrolling at all; for performance reasons this is highly recommended when scrolling is not needed.
 * 
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * 
 */
sap.m.Page.prototype.getEnableScrolling = function() { return false; };

/**
 * Getter for aggregation <code>footer</code>.<br/>
 * The (optional) footer of this page. It is always located at the bottom of the page
 * @return {sap.m.IBar}
 * @public
 * 
 */
sap.m.Page.prototype.getFooter = function() { return new sap.m.IBar(); };

/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
 * When a customHeader is used, this aggregation will be ignored.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Page.prototype.getHeaderContent = function() { return new Array(); };

/**
 * Getter for property <code>icon</code>.
 * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @public
 * 
 */
sap.m.Page.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.Page.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Page.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>navButtonText</code>.
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>navButtonText</code>
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @public
 * 
 */
sap.m.Page.prototype.getNavButtonText = function() { return ""; };

/**
 * Getter for property <code>navButtonType</code>.
 * This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header, you can set the value to "Default".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ButtonType} the value of property <code>navButtonType</code>
 * @since 1.12
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property is only useable with a Button text in that theme.
 * @public
 * 
 */
sap.m.Page.prototype.getNavButtonType = function() { return new sap.m.ButtonType(); };

/**
 * Getter for property <code>showFooter</code>.
 * Whether this page shall have a footer
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showFooter</code>
 * @since 1.13.1
 * @public
 * 
 */
sap.m.Page.prototype.getShowFooter = function() { return false; };

/**
 * Getter for property <code>showHeader</code>.
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.m.Page.prototype.getShowHeader = function() { return false; };

/**
 * Getter for property <code>showNavButton</code>.
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showNavButton</code>
 * @public
 * 
 */
sap.m.Page.prototype.getShowNavButton = function() { return false; };

/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * a subHeader will be rendered directly under the header
 * @return {sap.m.IBar}
 * @public
 * 
 */
sap.m.Page.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for property <code>title</code>.
 * The title text appearing in the page header bar.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Page.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Page.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Page.prototype.indexOfHeaderContent = function(oHeaderContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Page(); };

/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the headerContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the headerContent is inserted at
 *              the last position
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.insertHeaderContent = function(oHeaderContent,iIndex) { return new sap.m.Page(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Page.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Page.prototype.removeAllHeaderContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Page.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContentto remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * 
 */
sap.m.Page.prototype.removeHeaderContent = function(vHeaderContent) { return new sap.ui.core.Control(); };

/**
 * Scrolls to the given position. Only available if enableScrolling is set to "true".
 * @param {int} iY
 *         The vertical pixel position to scroll to. Scrolling down happens with positive values.
 * @param {int} iTime
 *         The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
 * @type sap.m.Page
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Page.prototype.scrollTo = function(iY,iTime) { return new sap.m.Page(); };

/**
 * Setter for property <code>backgroundDesign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.PageBackgroundDesign} sBackgroundDesign new value for property <code>backgroundDesign</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.Page(); };

/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.IBar} oCustomHeader the customHeader to set
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Page(); };

/**
 * Setter for property <code>enableScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableScrolling new value for property <code>enableScrolling</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.Page(); };

/**
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.m.IBar} oFooter the footer to set
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setFooter = function(oFooter) { return new sap.m.Page(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @public
 * 
 */
sap.m.Page.prototype.setIcon = function(sIcon) { return new sap.m.Page(); };

/**
 * Setter for property <code>navButtonText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNavButtonText new value for property <code>navButtonText</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @public
 * 
 */
sap.m.Page.prototype.setNavButtonText = function(sNavButtonText) { return new sap.m.Page(); };

/**
 * Setter for property <code>navButtonType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ButtonType} sNavButtonType new value for property <code>navButtonType</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @since 1.12
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property is only useable with a Button text in that theme.
 * @public
 * 
 */
sap.m.Page.prototype.setNavButtonType = function(sNavButtonType) { return new sap.m.Page(); };

/**
 * Setter for property <code>showFooter</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowFooter new value for property <code>showFooter</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @since 1.13.1
 * @public
 * 
 */
sap.m.Page.prototype.setShowFooter = function(bShowFooter) { return new sap.m.Page(); };

/**
 * Setter for property <code>showHeader</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader new value for property <code>showHeader</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Page(); };

/**
 * Setter for property <code>showNavButton</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowNavButton new value for property <code>showNavButton</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setShowNavButton = function(bShowNavButton) { return new sap.m.Page(); };

/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.IBar} oSubHeader the subHeader to set
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Page(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setTitle = function(sTitle) { return new sap.m.Page(); };


// ---- sap.m.PageBackgroundDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PageBackgroundDesign.toString = function() { return ""; };

// ---- sap.m.Panel --------------------------------------------------------------------------

/**
 * Constructor for a new Panel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getExpandable expandable} : boolean (default: false)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: false)</li>
 * <li>{@link #getExpandAnimation expandAnimation} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Panel control is a container for controls with a solid background and a header text.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Panel = function(sId,mSettings) {};
/**
 * Indicates that the panel will expand or collapse
 * @event
 * @since 1.22
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.expand If the panel will expand, this is true. If the panel will collapse, this is false.
 * @public
 * 
 */
sap.m.Panel.prototype.expand = function(oControlEvent) {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.addContent = function(oContent) { return new sap.m.Panel(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'expand' event of this <code>sap.m.Panel</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Panel</code>.<br> itself.
 * 
 * Indicates that the panel will expand or collapse
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Panel</code>.<br/> itself.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.22
 * 
 */
sap.m.Panel.prototype.attachExpand = function(oData,fnFunction,oListener) { return new sap.m.Panel(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.destroyContent = function() { return new sap.m.Panel(); };

/**
 * Destroys the headerToolbar in the aggregation
 * named <code>headerToolbar</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Panel.prototype.destroyHeaderToolbar = function() { return new sap.m.Panel(); };

/**
 * Destroys the infoToolbar in the aggregation
 * named <code>infoToolbar</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Panel.prototype.destroyInfoToolbar = function() { return new sap.m.Panel(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'expand' event of this <code>sap.m.Panel</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.Panel.prototype.detachExpand = function(fnFunction,oListener) { return new sap.m.Panel(); };

/**
 * Creates a new subclass of class sap.m.Panel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Panel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event expand to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'expand' of type <code>boolean</code>If the panel will expand, this is true. If the panel will collapse, this is false.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @protected
 * @since 1.22
 * 
 */
sap.m.Panel.prototype.fireExpand = function(mArguments) { return new sap.m.Panel(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content for the Panel
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Panel.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>expandable</code>.
 * Specifies whether the control is expandable. Per default the control is rendered as expanded.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>expandable</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Panel.prototype.getExpandable = function() { return false; };

/**
 * Getter for property <code>expandAnimation</code>.
 * Indicates whether the transition between the expanded and the hidden state of the control is animated. By default the animation is enabled.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>expandAnimation</code>
 * @since 1.26
 * @public
 * 
 */
sap.m.Panel.prototype.getExpandAnimation = function() { return false; };

/**
 * Getter for property <code>expanded</code>.
 * If expandable, this property indicates is the state is expanded or not. If expanded, then infoToolbar (if available) and content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>expanded</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Panel.prototype.getExpanded = function() { return false; };

/**
 * Getter for property <code>headerText</code>.
 * Sets the header text.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>headerText</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getHeaderText = function() { return ""; };

/**
 * Getter for aggregation <code>headerToolbar</code>.<br/>
 * Header can be used as a Toolbar to add extra controls for user interactions.
 * Note: This aggregation overwrites "headerText" property.
 * @return {sap.m.Toolbar}
 * @since 1.16
 * @public
 * 
 */
sap.m.Panel.prototype.getHeaderToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Getter for property <code>height</code>.
 * The Panel height.
 * 
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for aggregation <code>infoToolbar</code>.<br/>
 * InfoBar is placed below the header and can be used to show extra information to the user.
 * @return {sap.m.Toolbar}
 * @since 1.16
 * @public
 * 
 */
sap.m.Panel.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Returns a metadata object for class sap.m.Panel.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Panel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>width</code>.
 * The Panel width.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Panel.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Panel(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Panel.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Panel.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets the expandable property of the control.
 * @param {boolean}
 *          bExpandable defining whether control "expandable" - if yes infoToolbar (if available) and content can be
 *          collapsed/expanded
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setExpandable = function(bExpandable) { return new sap.m.Panel(); };

/**
 * Setter for property <code>expandAnimation</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bExpandAnimation new value for property <code>expandAnimation</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.Panel.prototype.setExpandAnimation = function(bExpandAnimation) { return new sap.m.Panel(); };

/**
 * Sets the expanded property of the control.
 * @param {boolean}
 *          bExpanded defining whether control is expanded or not
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setExpanded = function(bExpanded) { return new sap.m.Panel(); };

/**
 * Setter for property <code>headerText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sHeaderText new value for property <code>headerText</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setHeaderText = function(sHeaderText) { return new sap.m.Panel(); };

/**
 * Setter for the aggregated <code>headerToolbar</code>.
 * @param {sap.m.Toolbar} oHeaderToolbar the headerToolbar to set
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Panel.prototype.setHeaderToolbar = function(oHeaderToolbar) { return new sap.m.Panel(); };

/**
 * Sets the height of the panel.
 * @param {sap.ui.core.CSSSize}
 *          sHeight the height of the panel as CSS size
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setHeight = function(sHeight) { return new sap.m.Panel(); };

/**
 * Setter for the aggregated <code>infoToolbar</code>.
 * @param {sap.m.Toolbar} oInfoToolbar the infoToolbar to set
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Panel.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.Panel(); };

/**
 * Sets the width of the panel.
 * @param {sap.ui.core.CSSSize}
 *          sWidth the width of the panel as CSS size
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setWidth = function(sWidth) { return new sap.m.Panel(); };


// ---- sap.m.PlacementType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PlacementType.toString = function() { return ""; };

// ---- sap.m.PopinDisplay --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PopinDisplay.toString = function() { return ""; };

// ---- sap.m.Popover --------------------------------------------------------------------------

/**
 * Constructor for a new Popover.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getOffsetX offsetX} : int (default: 0)</li>
 * <li>{@link #getOffsetY offsetY} : int (default: 0)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getBounce bounce} : boolean</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>
 * <li>{@link #getSubHeader subHeader} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li>
 * <li>{@link #getBeginButton beginButton} : sap.ui.core.Control</li>
 * <li>{@link #getEndButton endButton} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover = function(sId,mSettings) {};
/**
 * This event will be fired after the popover is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the popover is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the popover is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the popover is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the
 * title and buttons if needed inside, and finally return this newly create header.
 * @protected
 * 
 */
sap.m.Popover.prototype._getAnyHeader = function() {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.addContent = function(oContent) { return new sap.m.Popover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br> itself.
 * 
 * This event will be fired after the popover is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br> itself.
 * 
 * This event will be fired after the popover is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br> itself.
 * 
 * This event will be fired before the popover is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br> itself.
 * 
 * This event will be fired before the popover is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Closes the popover when it's already opened.
 * @type sap.m.Popover
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover.prototype.close = function() { return new sap.m.Popover(); };

/**
 * Destroys the beginButton in the aggregation
 * named <code>beginButton</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.destroyBeginButton = function() { return new sap.m.Popover(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.destroyContent = function() { return new sap.m.Popover(); };

/**
 * Destroys the customHeader in the aggregation
 * named <code>customHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.destroyCustomHeader = function() { return new sap.m.Popover(); };

/**
 * Destroys the endButton in the aggregation
 * named <code>endButton</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.destroyEndButton = function() { return new sap.m.Popover(); };

/**
 * Destroys the footer in the aggregation
 * named <code>footer</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.destroyFooter = function() { return new sap.m.Popover(); };

/**
 * Destroys the subHeader in the aggregation
 * named <code>subHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.destroySubHeader = function() { return new sap.m.Popover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Popover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireAfterClose = function(mArguments) { return new sap.m.Popover(); };

/**
 * Fire event afterOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireAfterOpen = function(mArguments) { return new sap.m.Popover(); };

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireBeforeClose = function(mArguments) { return new sap.m.Popover(); };

/**
 * Fire event beforeOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.Popover(); };

/**
 * Getter for aggregation <code>beginButton</code>.<br/>
 * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * @return {sap.ui.core.Control}
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.getBeginButton = function() { return new sap.ui.core.Control(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the popover.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Popover.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>contentHeight</code>.
 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @since 1.9.0
 * @public
 * 
 */
sap.m.Popover.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>contentWidth</code>.
 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @since 1.9.0
 * @public
 * 
 */
sap.m.Popover.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Popover.prototype.getCustomHeader = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>enableScrolling</code>.
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @deprecated Since version 1.15.0. 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * @public
 * 
 */
sap.m.Popover.prototype.getEnableScrolling = function() { return false; };

/**
 * Getter for aggregation <code>endButton</code>.<br/>
 * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * @return {sap.ui.core.Control}
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.getEndButton = function() { return new sap.ui.core.Control(); };

/**
 * Getter for aggregation <code>footer</code>.<br/>
 * This is optional footer which is shown on the bottom of the popover.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Popover.prototype.getFooter = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>horizontalScrolling</code>.
 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Popover.prototype.getHorizontalScrolling = function() { return false; };

/**
 * Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * 
 * Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.
 * @return {sap.ui.core.Control}
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Popover.prototype.getInitialFocus = function() { return new sap.ui.core.Control(); };

/**
 * Id of the element which is the current target of the <code>leftButton</code> association, or null
 * 
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 * @return {sap.m.Button}
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * @public
 * 
 */
sap.m.Popover.prototype.getLeftButton = function() { return new sap.m.Button(); };

/**
 * Returns a metadata object for class sap.m.Popover.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Popover.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>modal</code>.
 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getModal = function() { return false; };

/**
 * Getter for property <code>offsetX</code>.
 * The offset for the popover placement in the x axis. It's with unit pixel.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getOffsetX = function() { return 0; };

/**
 * Getter for property <code>offsetY</code>.
 * The offset for the popover placement in the y axis. It's with unit pixel.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getOffsetY = function() { return 0; };

/**
 * Getter for property <code>placement</code>.
 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Vertical, sap.m.PlacementType.Left.Horizontal, sap.m.PlacementType.Left.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Id of the element which is the current target of the <code>rightButton</code> association, or null
 * 
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 * @return {sap.m.Button}
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * @public
 * 
 */
sap.m.Popover.prototype.getRightButton = function() { return new sap.m.Button(); };

/**
 * Getter for property <code>showHeader</code>.
 * If a header should be shown at the top of the popover.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getShowHeader = function() { return false; };

/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * @return {sap.ui.core.Control}
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.getSubHeader = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>title</code>.
 * Title text appears in the header. This property will be ignored when showHeader is set to false.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>verticalScrolling</code>.
 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Popover.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Popover.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Popover(); };

/**
 * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.
 * @type boolean
 * @public
 * @since 1.9.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover.prototype.isOpen = function() { return false; };

/**
 * Opens the popover and set the popover position according to the {@link #getPlacement() placement} property
 * around the <code>oControl</code> parameter.
 * @param {object} oControl
 *         This is the control to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover.
 * @param {boolean} bSkipInstanceManager
 * @type sap.m.Popover
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover.prototype.openBy = function(oControl,bSkipInstanceManager) { return new sap.m.Popover(); };

/**
 * calculate outerWidth of the element, for IE specific return the float number of width
 * @protected
 * 
 */
sap.m.Popover.outerWidth = function() {  };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Popover.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Popover.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.ui.core.Control} oBeginButton the beginButton to set
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.setBeginButton = function(oBeginButton) { return new sap.m.Popover(); };

/**
 * Setter for property <code>bounce</code>.
 * 
 * Default value is empty
 * @param {boolean} bBounce  new value for property <code>bounce</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.setBounce = function(bBounce) { return new sap.m.Popover(); };

/**
 * Setter for property <code>contentHeight</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentHeight new value for property <code>contentHeight</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.m.Popover.prototype.setContentHeight = function(sContentHeight) { return new sap.m.Popover(); };

/**
 * Setter for property <code>contentWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentWidth new value for property <code>contentWidth</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.m.Popover.prototype.setContentWidth = function(sContentWidth) { return new sap.m.Popover(); };

/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.ui.core.Control} oCustomHeader the customHeader to set
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Popover(); };

/**
 * Setter for property <code>enableScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableScrolling new value for property <code>enableScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.0. 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * @public
 * 
 */
sap.m.Popover.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.Popover(); };

/**
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.ui.core.Control} oEndButton the endButton to set
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.setEndButton = function(oEndButton) { return new sap.m.Popover(); };

/**
 * The followOf feature closes the Popover when the change of the open by control's position is no less than 32 pixels when runs on desktop browsers. This may leads to unwanted close.
 * 
 * This function is for enabling/disabling the followOf feature.
 * @param {boolean} bValue enables the followOf feature when set to true and disable the followOf when set to false 
 * @return {sap.m.Popover} The popover itself for method chaining
 * @protected
 * @since 1.16.8
 * 
 */
sap.m.Popover.prototype.setFollowOf = function(bValue) { return new sap.m.Popover(); };

/**
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.ui.core.Control} oFooter the footer to set
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setFooter = function(oFooter) { return new sap.m.Popover(); };

/**
 * Setter for property <code>horizontalScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontalScrolling new value for property <code>horizontalScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Popover.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.Popover(); };

/**
 * Setter for the associated <code>initialFocus</code>.
 * @param {sap.ui.core.Control} oInitialFocus Id of an element which becomes the new target of this initialFocus association. Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Popover.prototype.setInitialFocus = function(oInitialFocus) { return new sap.m.Popover(); };

/**
 * Setter for the associated <code>leftButton</code>.
 * @param {sap.m.Button} oLeftButton Id of an element which becomes the new target of this leftButton association. Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * @public
 * 
 */
sap.m.Popover.prototype.setLeftButton = function(oLeftButton) { return new sap.m.Popover(); };

/**
 * Setter for property <code>modal</code>.
 * This overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.
 * 
 * Default value is <code>false</code>
 * @param {boolean} bModal  new value for property <code>modal</code>.
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Popover.prototype.setModal = function(bModal,sModalCSSClass) { return new sap.m.Popover(); };

/**
 * Setter for property <code>offsetX</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iOffsetX new value for property <code>offsetX</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setOffsetX = function(iOffsetX) { return new sap.m.Popover(); };

/**
 * Setter for property <code>offsetY</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iOffsetY new value for property <code>offsetY</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setOffsetY = function(iOffsetY) { return new sap.m.Popover(); };

/**
 * Set the placement of the popover.
 * @param {sap.m.PlacementType} sPlacement
 * @returns {sap.m.Popover} <code>this</this> to facilitate method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setPlacement = function(sPlacement) { return new sap.m.Popover(); };

/**
 * Setter for the associated <code>rightButton</code>.
 * @param {sap.m.Button} oRightButton Id of an element which becomes the new target of this rightButton association. Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * @public
 * 
 */
sap.m.Popover.prototype.setRightButton = function(oRightButton) { return new sap.m.Popover(); };

/**
 * Setter for property <code>showHeader</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader new value for property <code>showHeader</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Popover(); };

/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.ui.core.Control} oSubHeader the subHeader to set
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.1
 * @public
 * 
 */
sap.m.Popover.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Popover(); };

/**
 * The setter of the title property. 
 * 
 * If you want to show a header in the popover, don't forget to set the 
 * {@link #setShowHeader showHeader} property to true.
 * @param {string} sTitle
 * @returns {sap.m.Popover} <code>this</this> to facilitate method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setTitle = function(sTitle) { return new sap.m.Popover(); };

/**
 * Setter for property <code>verticalScrolling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling new value for property <code>verticalScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.Popover.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.Popover(); };

/**
 * Return width of the element, for IE specific return the float number of width
 * @protected
 * 
 */
sap.m.Popover.width = function() {  };


// ---- sap.m.PopupHelper --------------------------------------------------------------------------

/**
 * This methods converts the percentage value to an absolute number based on the given base number.
 * @param {string} sPercentage A percentage value in string format, for example "25%"
 * @param {float} fBaseSize A float number which the calculation is based on.
 * @returns The calculated size string with "px" as unit or null when the format of given parameter is wrong.
 * @protected
 * 
 * @memberof sap.m.PopupHelper
 */
sap.m.PopupHelper.calcPercentageSize = function(sPercentage,fBaseSize) {  };


// ---- sap.m.ProgressIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new ProgressIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState</li>
 * <li>{@link #getDisplayValue displayValue} : string</li>
 * <li>{@link #getPercentValue percentValue} : float (default: 0)</li>
 * <li>{@link #getShowValue showValue} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
 * Additionally, a user defined string can be displayed on the ProgressIndicator.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.13.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ProgressIndicator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ProgressIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ProgressIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>displayValue</code>.
 * The text value to be displayed in the bar.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getDisplayValue = function() { return ""; };

/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * The height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @since 1.15.0
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.ProgressIndicator.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ProgressIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>percentValue</code>.
 * The numerical value for the displayed length of the progress bar.
 * 
 * Default value is <code>0</code>
 * @return {float} the value of property <code>percentValue</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getPercentValue = function() { return 0.0; };

/**
 * Getter for property <code>showValue</code>.
 * Specifies whether the current value shall be rendered inside the bar.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showValue</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getShowValue = function() { return false; };

/**
 * Getter for property <code>state</code>.
 * The state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>width</code>.
 * The width of the control.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>displayValue</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDisplayValue new value for property <code>displayValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setDisplayValue = function(sDisplayValue) { return new sap.m.ProgressIndicator(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setEnabled = function(bEnabled) { return new sap.m.ProgressIndicator(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @since 1.15.0
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setHeight = function(sHeight) { return new sap.m.ProgressIndicator(); };

/**
 * Setter for property <code>percentValue</code>.
 * 
 * Default value is <code>0</code>.
 * @param {float} fPercentValue new value for property <code>percentValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setPercentValue = function(fPercentValue) { return new sap.m.ProgressIndicator(); };

/**
 * Setter for property <code>showValue</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValue new value for property <code>showValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setShowValue = function(bShowValue) { return new sap.m.ProgressIndicator(); };

/**
 * Setter for property <code>state</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sState new value for property <code>state</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setState = function(sState) { return new sap.m.ProgressIndicator(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setWidth = function(sWidth) { return new sap.m.ProgressIndicator(); };


// ---- sap.m.PullToRefresh --------------------------------------------------------------------------

/**
 * Constructor for a new PullToRefresh.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
 * On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
 * In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PullToRefresh = function(sId,mSettings) {};
/**
 * Event indicates that the user has requested new data
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.refresh = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.PullToRefresh</code>.<br> itself.
 * 
 * Event indicates that the user has requested new data
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code>.<br/> itself.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.attachRefresh = function(oData,fnFunction,oListener) { return new sap.m.PullToRefresh(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.detachRefresh = function(fnFunction,oListener) { return new sap.m.PullToRefresh(); };

/**
 * Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PullToRefresh.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event refresh to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.PullToRefresh.prototype.fireRefresh = function(mArguments) { return new sap.m.PullToRefresh(); };

/**
 * Getter for property <code>customIcon</code>.
 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>description</code>.
 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>description</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getDescription = function() { return ""; };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.PullToRefresh.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.PullToRefresh.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showIcon</code>.
 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getShowIcon = function() { return false; };

/**
 * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PullToRefresh.prototype.hide = function() { return null; };

/**
 * Setter for property <code>customIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sCustomIcon new value for property <code>customIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.PullToRefresh(); };

/**
 * Setter for property <code>description</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDescription new value for property <code>description</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setDescription = function(sDescription) { return new sap.m.PullToRefresh(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.PullToRefresh(); };

/**
 * Setter for property <code>showIcon</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowIcon new value for property <code>showIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setShowIcon = function(bShowIcon) { return new sap.m.PullToRefresh(); };


// ---- sap.m.RadioButton --------------------------------------------------------------------------

/**
 * Constructor for a new RadioButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getGroupName groupName} : string (default: sapMRbDefaultGroup)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Generally, you would create at least two radio button controls which should have the same GroupName;
 * by this, you provide a limited choice for the user. Triggers an Event when User makes a change.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButton = function(sId,mSettings) {};
/**
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.selected Checks whether the RadioButton is active or not.
 * @public
 * 
 */
sap.m.RadioButton.prototype.select = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButton</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.RadioButton</code>.<br> itself.
 * 
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code>.<br/> itself.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.RadioButton(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButton</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.RadioButton(); };

/**
 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RadioButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code>Checks whether the RadioButton is active or not.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RadioButton.prototype.fireSelect = function(mArguments) { return new sap.m.RadioButton(); };

/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switched off,
 * there will not be visual changes on active state. Default value is 'true'
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getActiveHandling = function() { return false; };

/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user can select the radio button.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @since 1.25
 * @public
 * 
 */
sap.m.RadioButton.prototype.getEditable = function() { return false; };

/**
 * Getter for property <code>enabled</code>.
 * Disabled controls are displayed in another color.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 * 
 * Default value is <code>sapMRbDefaultGroup</code>
 * @return {string} the value of property <code>groupName</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getGroupName = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.RadioButton.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.RadioButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getSelected = function() { return false; };

/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the RadioButton
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Getter for property <code>valueState</code>.
 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @since 1.25
 * @public
 * 
 */
sap.m.RadioButton.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>width</code>.
 * Width of Label
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
 * @param {object} oEvent
 * @public
 * 
 */
sap.m.RadioButton.prototype.onsapselect = function(oEvent) {  };

/**
 * Setter for property <code>activeHandling</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bActiveHandling new value for property <code>activeHandling</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setActiveHandling = function(bActiveHandling) { return new sap.m.RadioButton(); };

/**
 * Method to set a RadioButton's state to active or inactive.
 * @param {boolean} bActive
 *         boolean to set the active state to true or false
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButton.prototype.setActiveState = function(bActive) { return null; };

/**
 * Setter for property <code>editable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable new value for property <code>editable</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @since 1.25
 * @public
 * 
 */
sap.m.RadioButton.prototype.setEditable = function(bEditable) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setEnabled = function(bEnabled) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>groupName</code>.
 * 
 * Default value is <code>sapMRbDefaultGroup</code>.
 * @param {string} sGroupName new value for property <code>groupName</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setGroupName = function(sGroupName) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>selected</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected new value for property <code>selected</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setSelected = function(bSelected) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setText = function(sText) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>textDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection new value for property <code>textDirection</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setTextDirection = function(sTextDirection) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>valueState</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sValueState new value for property <code>valueState</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @since 1.25
 * @public
 * 
 */
sap.m.RadioButton.prototype.setValueState = function(sValueState) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setWidth = function(sWidth) { return new sap.m.RadioButton(); };


// ---- sap.m.RadioButtonGroup --------------------------------------------------------------------------

/**
 * Constructor for a new RadioButtonGroup.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColumns columns} : int (default: 1)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState</li>
 * <li>{@link #getSelectedIndex selectedIndex} : int (default: 0)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.RadioButton[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A wrapper for a group of RadioButtons to handle as one UI element.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.25.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButtonGroup = function(sId,mSettings) {};
/**
 * Event is fired when selection is changed by user interaction.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.selectedIndex Index of the selected RadioButton.
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.select = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association named <code>ariaDescribedBy</code>.
 * @param {string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; to add; if empty, nothing is inserted
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.RadioButtonGroup(); };

/**
 * Adds some ariaLabelledBy into the association named <code>ariaLabelledBy</code>.
 * @param {string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; to add; if empty, nothing is inserted
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.RadioButtonGroup(); };

/**
 * Adds some button into the aggregation named <code>buttons</code>.
 * @param {sap.m.RadioButton}
 *            oButton the button to add; to add; if empty, nothing is inserted
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.addButton = function(oButton) { return new sap.m.RadioButtonGroup(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButtonGroup</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.RadioButtonGroup</code>.<br> itself.
 * 
 * Event is fired when selection is changed by user interaction.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButtonGroup</code>.<br/> itself.
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.RadioButtonGroup(); };

/**
 * Binder for aggregation <code>buttons</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.bindButtons = function(oBindingInfo) { return new sap.m.RadioButtonGroup(); };

/**
 * Destroys all the buttons in the aggregation
 * named <code>buttons</code>.
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.destroyButtons = function() { return new sap.m.RadioButtonGroup(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButtonGroup</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.RadioButtonGroup(); };

/**
 * Creates a new subclass of class sap.m.RadioButtonGroup with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RadioButtonGroup.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedIndex' of type <code>int</code>Index of the selected RadioButton.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RadioButtonGroup.prototype.fireSelect = function(mArguments) { return new sap.m.RadioButtonGroup(); };

/**
 * Id of the element which is the current target of the <code>ariaDescribedBy</code> association, or null
 * 
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Id of the element which is the current target of the <code>ariaLabelledBy</code> association, or null
 * 
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * returns a list of the RadioButtons in a RadioButtonGroup
 * @return {sap.m.RadioButton[]}
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getButtons = function() { return new Array(); };

/**
 * Getter for property <code>columns</code>.
 * Number of RadioButtons displayed in one line/column.
 * 
 * Default value is <code>1</code>
 * @return {int} the value of property <code>columns</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getColumns = function() { return 0; };

/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user can select the RadioButtonGroup. When the property is set to false, the control obtains visual styles different from its visual styles for the normal and the disabled state. Additionally the control is no longer interactive, but can receive focus.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getEditable = function() { return false; };

/**
 * Getter for property <code>enabled</code>.
 * Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is “true”.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.RadioButtonGroup.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.RadioButtonGroup.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns selected button. When no button is selected, "null" is returned.
 * @type sap.m.RadioButton
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButtonGroup.prototype.getSelectedButton = function() { return new sap.m.RadioButton(); };

/**
 * Getter for property <code>selectedIndex</code>.
 * Index of the selected/checked RadioButton.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getSelectedIndex = function() { return 0; };

/**
 * Getter for property <code>valueState</code>.
 * The value state to be displayed. Setting this attribute, when the accessibility feature is enabled, sets the value of the invalid property to “true”.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Getter for property <code>visible</code>.
 * Specifies whether the control is visible. Invisible controls are not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * Width of the RadioButtonGroup.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.RadioButton</code> in the aggregation named <code>buttons</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.RadioButton}
 *           oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 * @param {sap.m.RadioButton}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.insertButton = function(oButton,iIndex) { return new sap.m.RadioButtonGroup(); };

/**
 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.RadioButton[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedByto remove or its index or id
 * @return {sap.ui.core.Control} the removed ariaDescribedBy or null
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.Control(); };

/**
 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledByto remove or its index or id
 * @return {sap.ui.core.Control} the removed ariaLabelledBy or null
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.Control(); };

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 * @param {int | string | sap.m.RadioButton} vButton the buttonto remove or its index or id
 * @return {sap.m.RadioButton} the removed button or null
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeButton = function(vButton) { return new sap.m.RadioButton(); };

/**
 * Setter for property <code>columns</code>.
 * 
 * Default value is <code>1</code>.
 * @param {int} iColumns new value for property <code>columns</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setColumns = function(iColumns) { return new sap.m.RadioButtonGroup(); };

/**
 * Setter for property <code>editable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable new value for property <code>editable</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setEditable = function(bEditable) { return new sap.m.RadioButtonGroup(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setEnabled = function(bEnabled) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets the button as selected and removes the selection from the previous one.
 * @param {sap.m.RadioButton} oButton
 *         Selected button.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButtonGroup.prototype.setSelectedButton = function(oButton) { return null; };

/**
 * Setter for property <code>selectedIndex</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iSelectedIndex new value for property <code>selectedIndex</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setSelectedIndex = function(iSelectedIndex) { return new sap.m.RadioButtonGroup(); };

/**
 * Setter for property <code>valueState</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sValueState new value for property <code>valueState</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setValueState = function(sValueState) { return new sap.m.RadioButtonGroup(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setVisible = function(bVisible) { return new sap.m.RadioButtonGroup(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setWidth = function(sWidth) { return new sap.m.RadioButtonGroup(); };

/**
 * Unbinder for aggregation <code>buttons</code>.
 * @return {sap.m.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.unbindButtons = function() { return new sap.m.RadioButtonGroup(); };


// ---- sap.m.RatingIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new RatingIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getMaxValue maxValue} : int (default: 5)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getIconSize iconSize} : sap.ui.core.CSSSize</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getIconUnselected iconUnselected} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getVisualMode visualMode} : sap.m.RatingIndicatorVisualMode</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to the
 * image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.14
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RatingIndicator = function(sId,mSettings) {};
/**
 * The event is fired when the user has done a rating.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.value The rated value
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.change = function(oControlEvent) {  };

/**
 * This event is triggered during the dragging period, each time the rating value changes.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the rating after a live change event.
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.liveChange = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.RatingIndicator</code>.<br> itself.
 * 
 * The event is fired when the user has done a rating.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.RatingIndicator</code>.<br> itself.
 * 
 * This event is triggered during the dragging period, each time the rating value changes.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Binder for property <code>value</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.bindValue = function(oBindingInfo) { return new sap.m.RatingIndicator(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Creates a new subclass of class sap.m.RatingIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RatingIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code>The rated value</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.fireChange = function(mArguments) { return new sap.m.RatingIndicator(); };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code>The current value of the rating after a live change event.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.fireLiveChange = function(mArguments) { return new sap.m.RatingIndicator(); };

/**
 * Getter for property <code>enabled</code>.
 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>iconHovered</code>.
 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconHovered = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconSelected</code>.
 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconSelected = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconSize</code>.
 * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>iconSize</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>iconUnselected</code>.
 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>iconUnselected</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconUnselected = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>maxValue</code>.
 * The number of displayed rating symbols
 * 
 * Default value is <code>5</code>
 * @return {int} the value of property <code>maxValue</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getMaxValue = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.RatingIndicator.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.RatingIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>value</code>.
 * The indicated value of the rating
 * 
 * Default value is <code>0</code>
 * @return {float} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getValue = function() { return 0.0; };

/**
 * Getter for property <code>visualMode</code>.
 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.RatingIndicatorVisualMode} the value of property <code>visualMode</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getVisualMode = function() { return new sap.m.RatingIndicatorVisualMode(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setEnabled = function(bEnabled) { return new sap.m.RatingIndicator(); };

/**
 * Sets the hovered icon without rerendering the control.
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconHovered = function(sURI) { return new sap.m.RatingIndicator(); };

/**
 * Sets the selected icon without rerendering the control.
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconSelected = function(sURI) { return new sap.m.RatingIndicator(); };

/**
 * Sets the icon size value. The method is automatically updating the UI components if the control has been rendered before.
 * @param {sap.ui.core.CSSSize} sIconSize
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconSize = function(sIconSize) { return new sap.m.RatingIndicator(); };

/**
 * Sets the unselected icon without rerendering the control.
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconUnselected = function(sURI) { return new sap.m.RatingIndicator(); };

/**
 * Setter for property <code>maxValue</code>.
 * 
 * Default value is <code>5</code>.
 * @param {int} iMaxValue new value for property <code>maxValue</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setMaxValue = function(iMaxValue) { return new sap.m.RatingIndicator(); };

/**
 * Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-{@link #getMaxValue maxValue} and if it is a valid number. Calling the setter with null or undefined will reset the value to it's default.
 * @param {float} fValue The rating value to be set.
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setValue = function(fValue) { return new sap.m.RatingIndicator(); };

/**
 * Setter for property <code>visualMode</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.RatingIndicatorVisualMode} sVisualMode new value for property <code>visualMode</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setVisualMode = function(sVisualMode) { return new sap.m.RatingIndicator(); };

/**
 * Unbinder for property <code>value</code>.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.unbindValue = function() { return new sap.m.RatingIndicator(); };


// ---- sap.m.RatingIndicatorVisualMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.RatingIndicatorVisualMode.toString = function() { return ""; };

// ---- sap.m.ResponsivePopover --------------------------------------------------------------------------

/**
 * Constructor for a new ResponsivePopover.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getModal modal} : boolean</li>
 * <li>{@link #getOffsetX offsetX} : int</li>
 * <li>{@link #getOffsetY offsetY} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.IBar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and tablet while acts as a sap.m.Dialog with stretch set to true on phone.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.15.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover = function(sId,mSettings) {};
/**
 * Event is fired after popover or dialog is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} oControlEvent.getParameters.origin This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.afterClose = function(oControlEvent) {  };

/**
 * Event is fired after popover or dialog is open.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.afterOpen = function(oControlEvent) {  };

/**
 * Event is fired before popover or dialog is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} oControlEvent.getParameters.origin This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.beforeClose = function(oControlEvent) {  };

/**
 * Event is fired before popover or dialog is open.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.addContent = function(oContent) { return new sap.m.ResponsivePopover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br> itself.
 * 
 * Event is fired after popover or dialog is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br> itself.
 * 
 * Event is fired after popover or dialog is open.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br> itself.
 * 
 * Event is fired before popover or dialog is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br> itself.
 * 
 * Event is fired before popover or dialog is open.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Closes the ResponsivePopover.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover.prototype.close = function() { return new sap.ui.core.Control(); };

/**
 * Destroys the beginButton in the aggregation
 * named <code>beginButton</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyBeginButton = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyContent = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys the customHeader in the aggregation
 * named <code>customHeader</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyCustomHeader = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys the endButton in the aggregation
 * named <code>endButton</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyEndButton = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys the subHeader in the aggregation
 * named <code>subHeader</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroySubHeader = function() { return new sap.m.ResponsivePopover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Creates a new subclass of class sap.m.ResponsivePopover with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ResponsivePopover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
 * <li>'origin' of type <code>sap.m.Button</code>This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireAfterClose = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * Fire event afterOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireAfterOpen = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
 * <li>'origin' of type <code>sap.m.Button</code>This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireBeforeClose = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * Fire event beforeOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * Getter for aggregation <code>beginButton</code>.<br/>
 * BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
 * @return {sap.m.Button}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getBeginButton = function() { return new sap.m.Button(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#content sap.m.Popover} and {@linkcode sap.m.Dialog#content sap.m.Dialog}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>contentHeight</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentHeight sap.m.Popover} and {@linkcode sap.m.Dialog#contentHeight sap.m.Dialog}
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>contentWidth</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentWidth sap.m.Popover} and {@linkcode sap.m.Dialog#contentWidth sap.m.Dialog}
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * CustomHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#customHeader sap.m.Popover} and {@linkcode sap.m.Dialog#customHeader sap.m.Dialog}
 * @return {sap.m.IBar}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getCustomHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for aggregation <code>endButton</code>.<br/>
 * EndButton is supported by both variants. It is always show in the right part (left part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
 * @return {sap.m.Button}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getEndButton = function() { return new sap.m.Button(); };

/**
 * Getter for property <code>horizontalScrolling</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#horizontalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#horizontalScrolling sap.m.Dialog}
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getHorizontalScrolling = function() { return false; };

/**
 * Getter for property <code>icon</code>.
 * This property only takes effect when runs on phone. Please see the documentation {@linkcode sap.m.Dialog#icon here}.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * 
 * InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getInitialFocus = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.m.ResponsivePopover.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ResponsivePopover.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>modal</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#modal here}.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getModal = function() { return false; };

/**
 * Getter for property <code>offsetX</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetX here}.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getOffsetX = function() { return 0; };

/**
 * Getter for property <code>offsetY</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetY here}.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getOffsetY = function() { return 0; };

/**
 * Getter for property <code>placement</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#placement here}.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Getter for property <code>showCloseButton</code>.
 * Whether a close button should be inserted to the dialog's header dynamically to close the dialog. This property only takes effect when runs on the phone.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showCloseButton</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowCloseButton = function() { return false; };

/**
 * Getter for property <code>showHeader</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#showHeader sap.m.Popover} and {@linkcode sap.m.Dialog#showHeader sap.m.Dialog}
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowHeader = function() { return false; };

/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * SubHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#subHeader sap.m.Popover} and {@linkcode sap.m.Dialog#subHeader sap.m.Dialog}
 * @return {sap.m.IBar}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for property <code>title</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#title sap.m.Popover} and {@linkcode sap.m.Dialog#title sap.m.Dialog}
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>verticalScrolling</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#verticalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#verticalScrolling sap.m.Dialog}
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ResponsivePopover(); };

/**
 * Checks whether the ResponsivePopover is currently open.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover.prototype.isOpen = function() { return new sap.ui.core.Control(); };

/**
 * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter when runs on tablet or desktop and is full screen when runs on phone. Therefore the control parameter only has its usage when runs on tablet or desktop and is ignored when runs on phone.
 * @param {object} oControl
 * 
 * When this control runs on tablet or desktop, the ResponsivePopover is positioned relatively to this control.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover.prototype.openBy = function(oControl) { return new sap.ui.core.Control(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.m.Button} oBeginButton the beginButton to set
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setBeginButton = function(oBeginButton) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>contentHeight</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentHeight new value for property <code>contentHeight</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setContentHeight = function(sContentHeight) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>contentWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentWidth new value for property <code>contentWidth</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setContentWidth = function(sContentWidth) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.IBar} oCustomHeader the customHeader to set
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.m.Button} oEndButton the endButton to set
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setEndButton = function(oEndButton) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>horizontalScrolling</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bHorizontalScrolling new value for property <code>horizontalScrolling</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setIcon = function(sIcon) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for the associated <code>initialFocus</code>.
 * @param {sap.ui.core.Control} oInitialFocus Id of an element which becomes the new target of this initialFocus association. Alternatively, an element instance may be given.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setInitialFocus = function(oInitialFocus) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>modal</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bModal new value for property <code>modal</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setModal = function(bModal) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>offsetX</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iOffsetX new value for property <code>offsetX</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setOffsetX = function(iOffsetX) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>offsetY</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iOffsetY new value for property <code>offsetY</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setOffsetY = function(iOffsetY) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>placement</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.PlacementType} sPlacement new value for property <code>placement</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setPlacement = function(sPlacement) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>showCloseButton</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowCloseButton new value for property <code>showCloseButton</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowCloseButton = function(bShowCloseButton) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>showHeader</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader new value for property <code>showHeader</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowHeader = function(bShowHeader) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.IBar} oSubHeader the subHeader to set
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setSubHeader = function(oSubHeader) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setTitle = function(sTitle) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for property <code>verticalScrolling</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bVerticalScrolling new value for property <code>verticalScrolling</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.ResponsivePopover(); };


// ---- sap.m.routing.RouteMatchedHandler --------------------------------------------------------------------------

/**
 * Instantiates a RouteMatchedHandler.
 * @class
 * This class will attach to the Events of a provided router and add the views created by it to a  {@link sap.m.SplitContainer} or a {@link sap.m.NavContainer} Control, if this is the target control of the route.</br>
 * If the targetControl is no {@link sap.m.SplitContainer} or a {@link sap.m.NavContainer}, It will only close the dialogs, according to the property value.</br>
 * </br>
 * When a navigation is triggered, this class will try to determine the transition of the pages based on the history.</br>
 * Eg: if a user presses browser back, it will show a backwards animation.</br>
 * </br>
 * The navigation on the container takes place in the RoutePatternMatched event of the Router. If you register on the RouteMatched event of the Router, the visual navigation did not take place yet.</br>
 * </br>
 * Since it is hard to detect if a user has pressed browser back, this transitions will not be reliable, for example if someone bookmarked a detail page, and wants to navigate to a masterPage.</br>
 * If you want this case to always show a backwards transition, you should specify a "viewLevel" property on your Route.</br>
 * The viewLevel has to be an integer. The Master should have a lower number than the detail.</br>
 * These levels should represent the user process of your application and they do not have to match the container structure of your Routes.</br>
 * If the user navigates between views with the same viewLevel, the history is asked for the direction.</br>
 * </br>
 * You can specify a property "transition" in a route to define which transition will be applied when navigating. If it is not defined, the nav container will take its default transition.
 * </br>
 * You can also specify "transitionParameters" on a Route, to give the transition parameters.</br>
 * </br>
 * If you want to preserve the current view when navigating, but you want to navigate to it when nothing is displayed in the navContainer, you can set preservePageInSplitContainer = true</br>
 * When the route that has this flag directly matches the pattern, the view will still be switched by the splitContainer.
 * </br>
 * @see sap.m.NavContainer
 * @param {sap.ui.core.routing.Router} router - A router that creates views</br>
 * @param {boolean} closeDialogs - the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.
 * @public
 * 
 */
sap.m.routing.RouteMatchedHandler = function(router,closeDialogs) {};
/**
 * Removes the routeMatchedHandler from the Router
 * @public
 * @returns {sap.m.routing.RouteMatchedHandler} for chaining
 * 
 */
sap.m.routing.RouteMatchedHandler.prototype.destroy = function() { return new sap.m.routing.RouteMatchedHandler(); };

/**
 * Creates a new subclass of class sap.m.routing.RouteMatchedHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.routing.RouteMatchedHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets if a navigation should close dialogs
 * @public
 * @returns {boolean} a flag indication if dialogs will be closed
 * 
 */
sap.m.routing.RouteMatchedHandler.prototype.getCloseDialogs = function() { return false; };

/**
 * Returns a metadata object for class sap.m.routing.RouteMatchedHandler.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.routing.RouteMatchedHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets if a navigation should close dialogs
 * @param {boolean} bCloseDialogs close dialogs if true
 * @public
 * @returns {sap.m.routing.RouteMatchedHandler} for chaining
 * 
 */
sap.m.routing.RouteMatchedHandler.prototype.setCloseDialogs = function(bCloseDialogs) { return new sap.m.routing.RouteMatchedHandler(); };


// ---- sap.m.ScreenSize --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ScreenSize.toString = function() { return ""; };

// ---- sap.m.ScrollContainer --------------------------------------------------------------------------

/**
 * Constructor for a new ScrollContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getHorizontal horizontal} : boolean (default: true)</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li>
 * <li>{@link #getFocusable focusable} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.
 * 
 * Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ScrollContainer = function(sId,mSettings) {};
/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.addContent = function(oContent) { return new sap.m.ScrollContainer(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.destroyContent = function() { return new sap.m.ScrollContainer(); };

/**
 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ScrollContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the ScrollContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>focusable</code>.
 * Whether the scroll container can be focused.
 * 
 * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction  requires an additional tab stop on the container.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>focusable</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getFocusable = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * 
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * 
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>horizontal</code>.
 * Whether horizontal scrolling should be possible.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>horizontal</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getHorizontal = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ScrollContainer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ScrollContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>vertical</code>.
 * Whether vertical scrolling should be possible.
 * 
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getVertical = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 * 
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ScrollContainer(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Scrolls to the given position.
 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
 * @param {int} iX
 *         The horizontal pixel position to scroll to.
 *         Scrolling to the right happens with positive values. In right-to-left mode scrolling starts at the right side and higher values scroll to the left.
 *         If only vertical scrolling is enabled, give 0 as value.
 * @param {int} iY
 *         The vertical pixel position to scroll to.
 *         Scrolling down happens with positive values.
 *         If only horizontal scrolling is enabled, give 0 as value.
 * @param {int} iTime
 *         The duration of animated scrolling.
 *         To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
 * @type sap.m.ScrollContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ScrollContainer.prototype.scrollTo = function(iX,iY,iTime) { return new sap.m.ScrollContainer(); };

/**
 * Setter for property <code>focusable</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFocusable new value for property <code>focusable</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setFocusable = function(bFocusable) { return new sap.m.ScrollContainer(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setHeight = function(sHeight) { return new sap.m.ScrollContainer(); };

/**
 * Setter for property <code>horizontal</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontal new value for property <code>horizontal</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setHorizontal = function(bHorizontal) { return new sap.m.ScrollContainer(); };

/**
 * Setter for property <code>vertical</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bVertical new value for property <code>vertical</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setVertical = function(bVertical) { return new sap.m.ScrollContainer(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setWidth = function(sWidth) { return new sap.m.ScrollContainer(); };


// ---- sap.m.SearchField --------------------------------------------------------------------------

/**
 * Constructor for a new SearchField.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li>
 * <li>{@link #getShowRefreshButton showRefreshButton} : boolean (default: false)</li>
 * <li>{@link #getRefreshButtonTooltip refreshButtonTooltip} : string</li>
 * <li>{@link #getShowSearchButton showSearchButton} : boolean (default: true)</li>
 * <li>{@link #getSelectOnFocus selectOnFocus} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enables users to input a search string.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SearchField = function(sId,mSettings) {};
/**
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
 * @event
 * @since 1.9.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.newValue Current search string.
 * @public
 * 
 */
sap.m.SearchField.prototype.liveChange = function(oControlEvent) {  };

/**
 * Event which is fired when the user triggers a search.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.query The search query string.
 * @param {boolean} oControlEvent.getParameters.refreshButtonPressed Indicates if the user pressed the refresh button.
 * @public
 * 
 */
sap.m.SearchField.prototype.search = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br> itself.
 * 
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SearchField</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br> itself.
 * 
 * Event which is fired when the user triggers a search.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Binder for property <code>value</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.bindValue = function(oBindingInfo) { return new sap.m.SearchField(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @since 1.9.1
 * @public
 * 
 */
sap.m.SearchField.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SearchField</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SearchField.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code>Current search string.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.fireLiveChange = function(mArguments) { return new sap.m.SearchField(); };

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code>The search query string.</li>
 * <li>'refreshButtonPressed' of type <code>boolean</code>Indicates if the user pressed the refresh button.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SearchField.prototype.fireSearch = function(mArguments) { return new sap.m.SearchField(); };

/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.SearchField.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.SearchField.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>placeholder</code>.
 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getPlaceholder = function() { return ""; };

/**
 * Getter for property <code>refreshButtonTooltip</code>.
 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>refreshButtonTooltip</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.SearchField.prototype.getRefreshButtonTooltip = function() { return ""; };

/**
 * Getter for property <code>selectOnFocus</code>.
 * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>selectOnFocus</code>
 * @since 1.20
 * @public
 * 
 */
sap.m.SearchField.prototype.getSelectOnFocus = function() { return false; };

/**
 * Getter for property <code>showMagnifier</code>.
 * Set to false to hide the magnifier icon.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showMagnifier</code>
 * @deprecated Since version 1.16.0. 
 * This parameter is deprecated. Use "showSearchButton" instead.
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowMagnifier = function() { return false; };

/**
 * Getter for property <code>showRefreshButton</code>.
 * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showRefreshButton</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowRefreshButton = function() { return false; };

/**
 * Getter for property <code>showSearchButton</code>.
 * Set to true to show the search button with the magnifier icon.
 * If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showSearchButton</code>
 * @since 1.23
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowSearchButton = function() { return false; };

/**
 * Getter for property <code>value</code>.
 * Input Value.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getValue = function() { return ""; };

/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setEnabled = function(bEnabled) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>maxLength</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength new value for property <code>maxLength</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setMaxLength = function(iMaxLength) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>placeholder</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sPlaceholder new value for property <code>placeholder</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>refreshButtonTooltip</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sRefreshButtonTooltip new value for property <code>refreshButtonTooltip</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.SearchField.prototype.setRefreshButtonTooltip = function(sRefreshButtonTooltip) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>selectOnFocus</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSelectOnFocus new value for property <code>selectOnFocus</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @since 1.20
 * @public
 * 
 */
sap.m.SearchField.prototype.setSelectOnFocus = function(bSelectOnFocus) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>showMagnifier</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowMagnifier new value for property <code>showMagnifier</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @deprecated Since version 1.16.0. 
 * This parameter is deprecated. Use "showSearchButton" instead.
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowMagnifier = function(bShowMagnifier) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>showRefreshButton</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowRefreshButton new value for property <code>showRefreshButton</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowRefreshButton = function(bShowRefreshButton) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>showSearchButton</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSearchButton new value for property <code>showSearchButton</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @since 1.23
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowSearchButton = function(bShowSearchButton) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue new value for property <code>value</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setValue = function(sValue) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setVisible = function(bVisible) { return new sap.m.SearchField(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setWidth = function(sWidth) { return new sap.m.SearchField(); };

/**
 * Unbinder for property <code>value</code>.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.unbindValue = function() { return new sap.m.SearchField(); };


// ---- sap.m.SegmentedButton --------------------------------------------------------------------------

/**
 * Constructor for a new SegmentedButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SegmentedButton = function(sId,mSettings) {};
/**
 * Event is fired when the user selects a button, which returns the id and button object
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.button Reference to the button that has just been selected
 * @param {string} oControlEvent.getParameters.id Id of the button which has just been selected
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.select = function(oControlEvent) {  };

/**
 * Adds some button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to add; to add; if empty, nothing is inserted
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.addButton = function(oButton) { return new sap.m.SegmentedButton(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SegmentedButton</code>.<br> itself.
 * 
 * Event is fired when the user selects a button, which returns the id and button object
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code>.<br/> itself.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.SegmentedButton(); };

/**
 * Convenient method to add a button with a text as title or an uri for an icon. 
 * Only one is allowed.
 * @param {string}
 *         sText defines the title text of the newly created button
 * @param {sap.ui.core.URI} sURI 
 *         Icon to be displayed as graphical element within the button.
 *         Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
 * @param {boolean} [bEnabled]
 *         Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 * @return {sap.m.Button} the created button
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SegmentedButton.prototype.createButton = function(sText,sURI,bEnabled) { return new sap.m.Button(); };

/**
 * Destroys all the buttons in the aggregation
 * named <code>buttons</code>.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.destroyButtons = function() { return new sap.m.SegmentedButton(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.SegmentedButton(); };

/**
 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SegmentedButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'button' of type <code>sap.m.Button</code>Reference to the button that has just been selected</li>
 * <li>'id' of type <code>string</code>Id of the button which has just been selected</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SegmentedButton.prototype.fireSelect = function(mArguments) { return new sap.m.SegmentedButton(); };

/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface for the buttons displayed by the control. Only the properties "id", "icon", "text", and "enabled" of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively, you can use the "createButton" method to add buttons.
 * @return {sap.m.Button[]}
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getButtons = function() { return new Array(); };

/**
 * Getter for property <code>enabled</code>.
 * If disabled all buttons look grey, you cannot focus on them, you can not even click on them.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.SegmentedButton.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.SegmentedButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * 
 * A reference to the currently selected button control. By default or if the association is set to a falsy value (null, undefined, "", false), the first button will be selected.
 * If the association is set to an invalid value (e.g. an ID of a button that does not exist) the selection on the SegmentedButton will be removed.
 * @return {sap.m.Button}
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getSelectedButton = function() { return new sap.m.Button(); };

/**
 * Getter for property <code>width</code>.
 * Set the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.insertButton = function(oButton,iIndex) { return new sap.m.SegmentedButton(); };

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 * @param {int | string | sap.m.Button} vButton the buttonto remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setEnabled = function(bEnabled) { return new sap.m.SegmentedButton(); };

/**
 * Setter for association <code>selectedButton</code>.
 * @param {string | sap.m.Button | null | undefined} vButton new value for association <code>setSelectedButton</code>
 *    An sap.m.Button instance which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, the id of an sap.m.Button instance may be given as a string.
 *    If the value of null, undefined, or an empty string is provided the first item will be selected.
 * @returns {sap.m.SegmentedButton} <code>this</code> this pointer for chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setSelectedButton = function(vButton) { return new sap.m.SegmentedButton(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setWidth = function(sWidth) { return new sap.m.SegmentedButton(); };


// ---- sap.m.Select --------------------------------------------------------------------------

/**
 * Constructor for a new Select.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string (default: )</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getType type} : sap.m.SelectType</li>
 * <li>{@link #getAutoAdjustWidth autoAdjustWidth} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The select control provides a menu of predefined items that allows users to select an item.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Select = function(sId,mSettings) {};
/**
 * Occurs when the user changes the selected item.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.Select.prototype.change = function(oControlEvent) {  };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.addItem = function(oItem) { return new sap.m.Select(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Select</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Select</code>.<br> itself.
 * 
 * Occurs when the user changes the selected item.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Select</code>.<br/> itself.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Select(); };

/**
 * Binder for aggregation <code>items</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.bindItems = function(oBindingInfo) { return new sap.m.Select(); };

/**
 * Closes the control's picker pop-up.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.close = function() { return new sap.m.Select(); };

/**
 * Creates a picker.
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog}
 * @protected
 * 
 */
sap.m.Select.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.destroyItems = function() { return new sap.m.Select(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Select</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Select(); };

/**
 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Select.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code>The selected item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Select.prototype.fireChange = function(mArguments) { return new sap.m.Select(); };

/**
 * Getter for property <code>autoAdjustWidth</code>.
 * If set to true, the width of the select input is determined by the selected item’s content.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>autoAdjustWidth</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.Select.prototype.getAutoAdjustWidth = function() { return false; };

/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selected value.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Select.prototype.getEnabled = function() { return false; };

/**
 * Retrieves the enabled items from the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item[]} [aItems=getItems()] Items to filter.
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * @since 1.22.0
 * 
 */
sap.m.Select.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Retrieves the first item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getFirstItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>icon</code>.
 * The URI to the icon that will be displayed only when using the “IconOnly” type.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.Select.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Retrieves the item from the aggregation named <code>items</code> at the given 0-based index.
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item(); };

/**
 * Retrieves the item with the given key from the aggregation named <code>items</code>.
 * If duplicate keys exist, the first item matching the key is returned.
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null}
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Getter for aggregation <code>items</code>.
 * Items of the Item control.
 * 
 * <strong>Note</strong>: this is the default aggregation for Select.
 * @return {sap.ui.core.Item[]}
 * @public
 * 
 */
sap.m.Select.prototype.getItems = function() { return new Array(); };

/**
 * Retrieves the last item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getLastItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width. This value can be provided in %, em, px… and all CSS units
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.m.Select.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Select.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Select.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.Select.prototype.getName = function() { return ""; };

/**
 * Retrieves the selected item object from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>selectedItemId</code>.
 * Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>selectedItemId</code>
 * @since 1.12
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedItemId = function() { return ""; };

/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>selectedKey</code>
 * @since 1.11
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedKey = function() { return ""; };

/**
 * Getter for property <code>type</code>.
 * Type of a select. Possibles values "Default", "IconOnly".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.SelectType} the value of property <code>type</code>
 * @since 1.16
 * @public
 * 
 */
sap.m.Select.prototype.getType = function() { return new sap.m.SelectType(); };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the select input. The default width of a select control depends on the width of the widest option/item in the list. This value can be provided in %, em, px… and all CSS units.
 * Note: The width will be ignored if the "autoAdjustWidth" property is set to true.
 * 
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Select.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Select.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.insertItem = function(oItem,iIndex) { return new sap.m.Select(); };

/**
 * Whether the control's picker pop-up is open. It returns true when the control's picker pop-up is currently open,
 * this includes opening and closing animations.
 * @returns {boolean} Determines whether the Select is currently open (this includes opening and closing animations).
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.isOpen = function() { return false; };

/**
 * Removes all the controls in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea and clears the selection.
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.Select.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.Select.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Setter for property <code>autoAdjustWidth</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoAdjustWidth new value for property <code>autoAdjustWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Select.prototype.setAutoAdjustWidth = function(bAutoAdjustWidth) { return new sap.m.Select(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setEnabled = function(bEnabled) { return new sap.m.Select(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Select.prototype.setIcon = function(sIcon) { return new sap.m.Select(); };

/**
 * Setter for property <code>maxWidth</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth new value for property <code>maxWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.Select(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setName = function(sName) { return new sap.m.Select(); };

/**
 * Setter for association <code>selectedItem</code>.
 * @param {string | sap.ui.core.Item | null} vItem New value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given or null.
 *    If the value of null is provided the first enabled item will be selected (if any).
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.setSelectedItem = function(vItem) { return new sap.m.Select(); };

/**
 * Setter for property <code>selectedItemId</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * If the provided <code>vItem</code> has a default value,
 * the first enabled item will be selected (if any).
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.12
 * 
 */
sap.m.Select.prototype.setSelectedItemId = function(vItem) { return new sap.m.Select(); };

/**
 * Setter for property <code>selectedKey</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * If the provided <code>sKey</code> has a default value,
 * the first enabled item will be selected (if any).
 * In the case that an item has the default key value, it will be selected instead.
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.11
 * 
 */
sap.m.Select.prototype.setSelectedKey = function(sKey) { return new sap.m.Select(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.SelectType} sType new value for property <code>type</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @since 1.16
 * @public
 * 
 */
sap.m.Select.prototype.setType = function(sType) { return new sap.m.Select(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setWidth = function(sWidth) { return new sap.m.Select(); };

/**
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.unbindItems = function() { return new sap.m.Select(); };


// ---- sap.m.SelectDialog --------------------------------------------------------------------------

/**
 * Constructor for a new SelectDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ListItemBase[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A SelectDialog is a dialog containing a list and search functionality to filter the list and confirmation/cancel buttons. The control can be used when the user should select one or multiple items out of many.
 * 
 * The list used in the SelectDialog is a growing list and can be filled with a any kind of list item. The search field triggers the events "search" and "liveChange" where a filter function can be applied to the list binding.
 * 
 * After selecting an item in single selection mode or after confirming in multi selection mode, the dialog will be closed and the event "confirm" is fired with the items that have been selected. By default, the selection will also be reset to allow for a new selection when opening the dialog again.
 * 
 * When cancelling the selection, the event "change" will be fired and the selection is restored to the state when the dialog was opened.
 * 
 * NOTE: The growing functionality of the list does not support Two Way Binding, so if you use this control with a JSON model make sure the binding mode is set to "OneWay" and that you update the selection model manually with the items passed in the "confirm" event.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectDialog = function(sId,mSettings) {};
/**
 * This event will be fired when the cancel button is clicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SelectDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items.
 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog the contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.
 * @public
 * 
 */
sap.m.SelectDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value to search on, which can change at any keypress
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.SelectDialog.prototype.liveChange = function(oControlEvent) {  };

/**
 * This event will be fired when the search button has been clicked on the searchfield on the visual control
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.SelectDialog.prototype.search = function(oControlEvent) {  };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.addItem = function(oItem) { return new sap.m.SelectDialog(); };

/**
 * Forward method to the inner dialog: addStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.addStyleClass = function() { return new sap.m.SelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.SelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br> itself.
 * 
 * This event will be fired when the cancel button is clicked
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.SelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br> itself.
 * 
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br> itself.
 * 
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br> itself.
 * 
 * This event will be fired when the search button has been clicked on the searchfield on the visual control
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Forwards aggregations with the name of items to the internal list.
 * @override
 * @protected
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.SelectDialog(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.destroyItems = function() { return new sap.m.SelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.SelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.SelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Creates a new subclass of class sap.m.SelectDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireCancel = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * Fire event confirm to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.m.StandardListItem</code>Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
 * <li>'selectedItems' of type <code>sap.m.StandardListItem[]</code>Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
 * <li>'selectedContexts' of type <code>string</code>Returns the binding contexts of the selected items including the non-visible items.
 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog the contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The value to search on, which can change at any keypress</li>
 * <li>'itemsBinding' of type <code>any</code>The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireLiveChange = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The value entered in the search</li>
 * <li>'itemsBinding' of type <code>any</code>The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireSearch = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * Get the internal Dialog's contentHeight property {@link sap.m.Dialog}
 * @override
 * @public
 * @returns {sap.ui.core.CSSSize} sHeight the content width of the internal dialog
 * 
 */
sap.m.SelectDialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Get the internal Dialog's contentWidth property {@link sap.m.Dialog}
 * @override
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 * 
 */
sap.m.SelectDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Forward method to the inner dialog: getDomRef
 * @public
 * @override
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * 
 */
sap.m.SelectDialog.prototype.getDomRef = function() { return null; };

/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items initially displayed in the list
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getGrowingThreshold = function() { return 0; };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.
 * @return {sap.m.ListItemBase[]}
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SelectDialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.SelectDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>multiSelect</code>.
 * If on, the user can select several options from the list
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getMultiSelect = function() { return false; };

/**
 * Get the internal List's no data text property
 * @override
 * @public
 * @returns {string} the current no data text
 * 
 */
sap.m.SelectDialog.prototype.getNoDataText = function() { return ""; };

/**
 * Getter for property <code>rememberSelections</code>.
 * This flag controls whether the dialog clears the selection or not after the confirm event has been fired. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false".
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @since 1.18
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getRememberSelections = function() { return false; };

/**
 * Getter for property <code>title</code>.
 * The title text that appears in the dialog header
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getTitle = function() { return ""; };

/**
 * Forward method to the inner dialog: hasStyleClass
 * @public
 * @override
 * @returns {boolean} true if the class is set, false otherwise
 * 
 */
sap.m.SelectDialog.prototype.hasStyleClass = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ListItemBase}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SelectDialog.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.insertItem = function(oItem,iIndex) { return new sap.m.SelectDialog(); };

/**
 * Opens the internal dialog with a searchfield and a list.
 * @param {string} sSearchValue
 *         A value for the search can be passed to match with the filter applied to the list binding.
 * @type sap.m.SelectDialog
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectDialog.prototype.open = function(sSearchValue) { return new sap.m.SelectDialog(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SelectDialog.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ListItemBase} vItem the itemto remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * 
 */
sap.m.SelectDialog.prototype.removeItem = function(vItem) { return new sap.m.ListItemBase(); };

/**
 * Forward method to the inner dialog: removeStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.removeStyleClass = function() { return new sap.m.SelectDialog(); };

/**
 * Set the internal Dialog's contentHeight property {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sHeight the new content width value for the dialog
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setContentHeight = function(sHeight) { return new sap.m.SelectDialog(); };

/**
 * Set the internal Dialog's contentWidth property {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setContentWidth = function(sWidth) { return new sap.m.SelectDialog(); };

/**
 * Sets the growing threshold to the internal list
 * @public
 * @param {int} iValue Value for the list's growing threshold.
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setGrowingThreshold = function(iValue) { return new sap.m.SelectDialog(); };

/**
 * Enable/Disable multi selection mode.
 * @override
 * @public
 * @param {boolean} bMulti flag for multi selection mode
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setMultiSelect = function(bMulti) { return new sap.m.SelectDialog(); };

/**
 * Set the internal List's no data text property
 * @override
 * @public
 * @param {string} sNoDataText the no data text for the list
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setNoDataText = function(sNoDataText) { return new sap.m.SelectDialog(); };

/**
 * Setter for property <code>rememberSelections</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRememberSelections new value for property <code>rememberSelections</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @since 1.18
 * @public
 * 
 */
sap.m.SelectDialog.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.SelectDialog(); };

/**
 * Set the title of the internal dialog
 * @override
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setTitle = function(sTitle) { return new sap.m.SelectDialog(); };

/**
 * Forward method to the inner dialog: toggleStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.toggleStyleClass = function() { return new sap.m.SelectDialog(); };


// ---- sap.m.SelectList --------------------------------------------------------------------------

/**
 * Constructor for a new SelectList.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control displays a list of items to allow the user to select an item.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectList = function(sId,mSettings) {};
/**
 * Occurs when the user changes the selected item.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.SelectList.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.addItem = function(oItem) { return new sap.m.SelectList(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.m.SelectList</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SelectList</code>.<br> itself.
 * 
 * Occurs when the user changes the selected item.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code>.<br/> itself.
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.SelectList(); };

/**
 * Binder for aggregation <code>items</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.bindItems = function(oBindingInfo) { return new sap.m.SelectList(); };

/**
 * Clear the selection.
 * @protected
 * 
 */
sap.m.SelectList.prototype.clearSelection = function() {  };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.destroyItems = function() { return new sap.m.SelectList(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.m.SelectList</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.SelectList(); };

/**
 * Creates a new subclass of class sap.m.SelectList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Retrieves the first enabled item from the aggregation named <code>items</code>.
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @protected
 * 
 */
sap.m.SelectList.prototype.findFirstEnabledItem = function(aItems) { return new sap.ui.core.Item(); };

/**
 * Retrieves the last enabled item from the aggregation named <code>items</code>.
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @protected
 * 
 */
sap.m.SelectList.prototype.findLastEnabledItem = function(aItems) { return new sap.ui.core.Item(); };

/**
 * Fire event selectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code>The selected item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectList.prototype.fireSelectionChange = function(mArguments) { return new sap.m.SelectList(); };

/**
 * Retrieves the default selected item from the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item[]} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @protected
 * 
 */
sap.m.SelectList.prototype.getDefaultSelectedItem = function(aItems) { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selection.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.SelectList.prototype.getEnabled = function() { return false; };

/**
 * Retrieves the enabled items from the given array of items or from
 * this control's aggregation named <code>items</code>.
 * @param {sap.ui.core.Item[]} [aItems=getItems()] items to filter
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * 
 */
sap.m.SelectList.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Retrieves the first item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * 
 */
sap.m.SelectList.prototype.getFirstItem = function() { return new sap.ui.core.Item(); };

/**
 * Retrieves the item from the aggregation named items at the given 0-based index.
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * 
 */
sap.m.SelectList.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item(); };

/**
 * Retrieves the item with the given key from the aggregation named <code>items</code>.
 * If duplicate keys exists, the first item matching the key is returned.
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null}
 * @public
 * 
 */
sap.m.SelectList.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of items to be displayed.
 * @return {sap.ui.core.Item[]}
 * @public
 * 
 */
sap.m.SelectList.prototype.getItems = function() { return new Array(); };

/**
 * Retrieves the last item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * 
 */
sap.m.SelectList.prototype.getLastItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width of the control. This value can be provided in all CSS units.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.m.SelectList.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.SelectList.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.SelectList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Retrieves the selected item object from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * 
 */
sap.m.SelectList.prototype.getSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Getter for property <code>selectedItemId</code>.
 * Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * 
 */
sap.m.SelectList.prototype.getSelectedItemId = function() { return ""; };

/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * 
 */
sap.m.SelectList.prototype.getSelectedKey = function() { return ""; };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the control. This value can be provided in all CSS units.
 * 
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.SelectList.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SelectList.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.insertItem = function(oItem,iIndex) { return new sap.m.SelectList(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea and clears the selection.
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.SelectList.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.SelectList.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.setEnabled = function(bEnabled) { return new sap.m.SelectList(); };

/**
 * Setter for property <code>maxWidth</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth new value for property <code>maxWidth</code>
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.SelectList(); };

/**
 * Setter for association <code>selectedItem</code>.
 * @param {string | sap.ui.core.Item | null} vItem new value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given or null.
 *    If the value of null is provided the first enabled item will be selected (if any).
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.setSelectedItem = function(vItem) { return new sap.m.SelectList(); };

/**
 * Setter for property <code>selectedItemId</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.setSelectedItemId = function(vItem) { return new sap.m.SelectList(); };

/**
 * Setter for property <code>selectedKey</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.setSelectedKey = function(sKey) { return new sap.m.SelectList(); };

/**
 * Update and synchronize "selectedItem" association, "selectedItemId", "selectedKey" properties and
 * the "selectedItem".
 * @param {string | sap.ui.core.Item | null} vItem
 * @protected
 * 
 */
sap.m.SelectList.prototype.setSelection = function(vItem) {  };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.setWidth = function(sWidth) { return new sap.m.SelectList(); };

/**
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.SelectList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.unbindItems = function() { return new sap.m.SelectList(); };


// ---- sap.m.SelectType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SelectType.toString = function() { return ""; };

// ---- sap.m.Shell --------------------------------------------------------------------------

/**
 * Constructor for a new Shell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowLogout showLogout} : boolean (default: true)</li>
 * <li>{@link #getHeaderRightText headerRightText} : string</li>
 * <li>{@link #getAppWidthLimited appWidthLimited} : boolean (default: true)</li>
 * <li>{@link #getBackgroundColor backgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * <li>{@link #getHomeIcon homeIcon} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getApp app} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Shell control can be used as root element of applications, it can contain an App or SplitApp control.
 * The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, like a frame around the App, on desktop browser platforms.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Shell = function(sId,mSettings) {};
/**
 * Fired when the user presses the logout button/link.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Shell.prototype.logout = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.m.Shell</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Shell</code>.<br> itself.
 * 
 * Fired when the user presses the logout button/link.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code>.<br/> itself.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.attachLogout = function(oData,fnFunction,oListener) { return new sap.m.Shell(); };

/**
 * Destroys the app in the aggregation
 * named <code>app</code>.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.destroyApp = function() { return new sap.m.Shell(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.m.Shell</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.detachLogout = function(fnFunction,oListener) { return new sap.m.Shell(); };

/**
 * Creates a new subclass of class sap.m.Shell with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Shell.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event logout to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Shell.prototype.fireLogout = function(mArguments) { return new sap.m.Shell(); };

/**
 * Getter for aggregation <code>app</code>.<br/>
 * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Shell.prototype.getApp = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>appWidthLimited</code>.
 * Whether the width of the content (the aggregated app) should be limited or extend to the full screen width.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>appWidthLimited</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getAppWidthLimited = function() { return false; };

/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the Shell. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>backgroundColor</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the Shell. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to improve readability of the shell content by making the background image partly transparent.
 * 
 * Default value is <code>1</code>
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundRepeat = function() { return false; };

/**
 * Getter for property <code>headerRightText</code>.
 * A text, like the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise it is always hidden.).
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>headerRightText</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getHeaderRightText = function() { return ""; };

/**
 * Getter for property <code>homeIcon</code>.
 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
 * 
 * This property should be only set once and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
 * 
 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
 * The "precomposed" flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
 * {
 * 'phone':'phone-icon_57x57.png',
 * 'phone@2':'phone-retina_114x114.png',
 * 'tablet':'tablet-icon_72x72.png',
 * 'tablet@2':'tablet-retina_144x144.png',
 * 'precomposed':true,
 * 'favicon':'favicon.ico'
 * }
 * 
 * See jQuery.sap.setIcons() for full documentation.
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>homeIcon</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getHomeIcon = function() { return new Object(); };

/**
 * Getter for property <code>logo</code>.
 * A logo to be displayed next to the app when the screen is sufficiently large.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getLogo = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.Shell.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Shell.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showLogout</code>.
 * Whether the Logout button should be displayed. This currently only happens on very tall screens (1568px height), otherwise it is always hidden.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showLogout</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getShowLogout = function() { return false; };

/**
 * Getter for property <code>title</code>.
 * The application title which may or may not be displayed outside the actual application, depending on the available screen size.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getTitle = function() { return ""; };

/**
 * Setter for the aggregated <code>app</code>.
 * @param {sap.ui.core.Control} oApp the app to set
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setApp = function(oApp) { return new sap.m.Shell(); };

/**
 * Setter for property <code>appWidthLimited</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAppWidthLimited new value for property <code>appWidthLimited</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setAppWidthLimited = function(bAppWidthLimited) { return new sap.m.Shell(); };

/**
 * Setter for property <code>backgroundColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSColor} sBackgroundColor new value for property <code>backgroundColor</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.Shell(); };

/**
 * Setter for property <code>backgroundImage</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sBackgroundImage new value for property <code>backgroundImage</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.Shell(); };

/**
 * Setter for property <code>backgroundOpacity</code>.
 * 
 * Default value is <code>1</code>.
 * @param {float} fBackgroundOpacity new value for property <code>backgroundOpacity</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.Shell(); };

/**
 * Setter for property <code>backgroundRepeat</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bBackgroundRepeat new value for property <code>backgroundRepeat</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.Shell(); };

/**
 * Setter for property <code>headerRightText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sHeaderRightText new value for property <code>headerRightText</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setHeaderRightText = function(sHeaderRightText) { return new sap.m.Shell(); };

/**
 * Setter for property <code>homeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oHomeIcon new value for property <code>homeIcon</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.Shell(); };

/**
 * Setter for property <code>logo</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sLogo new value for property <code>logo</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setLogo = function(sLogo) { return new sap.m.Shell(); };

/**
 * Setter for property <code>showLogout</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowLogout new value for property <code>showLogout</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setShowLogout = function(bShowLogout) { return new sap.m.Shell(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setTitle = function(sTitle) { return new sap.m.Shell(); };


// ---- sap.m.Slider --------------------------------------------------------------------------

/**
 * Constructor for a new Slider.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getMin min} : float (default: 0)</li>
 * <li>{@link #getMax max} : float (default: 100)</li>
 * <li>{@link #getStep step} : float (default: 1)</li>
 * <li>{@link #getProgress progress} : boolean (default: true)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A slider is a user interface control that enables the user to adjust values in a specified numerical range.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Slider = function(sId,mSettings) {};
/**
 * This event is triggered after the end user finishes interacting, if there is any change.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the slider after a change.
 * @public
 * 
 */
sap.m.Slider.prototype.change = function(oControlEvent) {  };

/**
 * This event is triggered during the dragging period, each time the slider value changes.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the slider after a live change.
 * @public
 * 
 */
sap.m.Slider.prototype.liveChange = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Slider</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br> itself.
 * 
 * This event is triggered after the end user finishes interacting, if there is any change.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br> itself.
 * 
 * This event is triggered during the dragging period, each time the slider value changes.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Slider</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Slider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code>The current value of the slider after a change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Slider.prototype.fireChange = function(mArguments) { return new sap.m.Slider(); };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code>The current value of the slider after a live change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Slider.prototype.fireLiveChange = function(mArguments) { return new sap.m.Slider(); };

/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the slider value.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>max</code>.
 * The maximum value of the slider.
 * 
 * Default value is <code>100</code>
 * @return {float} the value of property <code>max</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getMax = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.m.Slider.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Slider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>min</code>.
 * The minimum value of the slider.
 * 
 * Default value is <code>0</code>
 * @return {float} the value of property <code>min</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getMin = function() { return 0.0; };

/**
 * Getter for property <code>name</code>.
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>progress</code>.
 * Show a progress bar indicator.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>progress</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getProgress = function() { return false; };

/**
 * Getter for property <code>step</code>.
 * Define the amount of units to change the slider when adjusting by drag and drop.
 * 
 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10, 15, 20).
 * 
 * The step must be positive, if a negative number is provided, the default value will be used instead.
 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
 * 
 * Default value is <code>1</code>
 * @return {float} the value of property <code>step</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getStep = function() { return 0.0; };

/**
 * Getter for property <code>value</code>.
 * Define the value of the slider.
 * 
 * If the value is lower/higher than the allowed minimum/maximum, the value of the properties "min"/"max" are used instead.
 * 
 * Default value is <code>0</code>
 * @return {float} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getValue = function() { return 0.0; };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the slider, this value can be provided in %, em, px… and all possible CSS units.
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setEnabled = function(bEnabled) { return new sap.m.Slider(); };

/**
 * Setter for property <code>max</code>.
 * 
 * Default value is <code>100</code>.
 * @param {float} fMax new value for property <code>max</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setMax = function(fMax) { return new sap.m.Slider(); };

/**
 * Setter for property <code>min</code>.
 * 
 * Default value is <code>0</code>.
 * @param {float} fMin new value for property <code>min</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setMin = function(fMin) { return new sap.m.Slider(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setName = function(sName) { return new sap.m.Slider(); };

/**
 * Setter for property <code>progress</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bProgress new value for property <code>progress</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setProgress = function(bProgress) { return new sap.m.Slider(); };

/**
 * Setter for property <code>step</code>.
 * 
 * Default value is <code>1</code>.
 * @param {float} fStep new value for property <code>step</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setStep = function(fStep) { return new sap.m.Slider(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>0</code>.
 * @param {float} fNewValue new value for property <code>value</code>.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Slider.prototype.setValue = function(fNewValue) { return new sap.m.Slider(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setWidth = function(sWidth) { return new sap.m.Slider(); };

/**
 * Decrements the slider value by multiplying the step the <code>step</code> with the given parameter.
 * @param {int} [iStep=1] The number of steps the slider goes down.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 * 
 */
sap.m.Slider.prototype.stepDown = function(iStep) { return new sap.m.Slider(); };

/**
 * Increments the slider value by multiplying the <code>step</code> with the given parameter.
 * @param {int} [iStep=1] The number of steps the slider goes up.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 * 
 */
sap.m.Slider.prototype.stepUp = function(iStep) { return new sap.m.Slider(); };


// ---- sap.m.SplitApp --------------------------------------------------------------------------

/**
 * Constructor for a new SplitApp.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.SplitContainer#constructor sap.m.SplitContainer}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.
 * @extends sap.m.SplitContainer
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitApp = function(sId,mSettings) {};
/**
 * This event will be fired when orientation (portrait/landscape) is changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.landscape Returns true if the device is in landscape.
 * @public
 * 
 */
sap.m.SplitApp.prototype.orientationChange = function(oControlEvent) {  };

/**
 * Fires the orientationChange event after SplitApp has reacted to the browser orientationchange event.
 * @protected
 * 
 */
sap.m.SplitApp.prototype._onOrientationChange = function() {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br> itself.
 * 
 * This event will be fired when orientation (portrait/landscape) is changed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.attachOrientationChange = function(oData,fnFunction,oListener) { return new sap.m.SplitApp(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.detachOrientationChange = function(fnFunction,oListener) { return new sap.m.SplitApp(); };

/**
 * Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.SplitContainer.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SplitApp.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code>Returns true if the device is in landscape.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitApp.prototype.fireOrientationChange = function(mArguments) { return new sap.m.SplitApp(); };

/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 * 
 * Default value is <code>undefined</code>
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * 
 */
sap.m.SplitApp.prototype.getHomeIcon = function() { return null; };

/**
 * Returns a metadata object for class sap.m.SplitApp.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.SplitApp.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for property <code>homeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {any} oHomeIcon new value for property <code>homeIcon</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.SplitApp(); };


// ---- sap.m.SplitAppMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SplitAppMode.toString = function() { return ""; };

// ---- sap.m.SplitContainer --------------------------------------------------------------------------

/**
 * Constructor for a new SplitContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDefaultTransitionNameDetail defaultTransitionNameDetail} : string (default: slide)</li>
 * <li>{@link #getDefaultTransitionNameMaster defaultTransitionNameMaster} : string (default: slide)</li>
 * <li>{@link #getMode mode} : sap.m.SplitAppMode</li>
 * <li>{@link #getMasterButtonText masterButtonText} : string</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMasterPages masterPages} : sap.ui.core.Control[]</li>
 * <li>{@link #getDetailPages detailPages} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:masterNavigate masterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterMasterNavigate afterMasterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:masterButton masterButton} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeMasterOpen beforeMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterMasterOpen afterMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeMasterClose beforeMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterMasterClose afterMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:detailNavigate detailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterDetailNavigate afterDetailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * SplitContainer maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitContainer.
 * 
 * This control must be rendered as a full screen control in order to make the show/hide master area work properly.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer = function(sId,mSettings) {};
/**
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterDetailNavigate = function(oControlEvent) {  };

/**
 * This event is fired when the master area is fully closed after the animation when there is.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterMasterClose = function(oControlEvent) {  };

/**
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterMasterNavigate = function(oControlEvent) {  };

/**
 * This event is fired when the master area is fully opened after animation if there is.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterMasterOpen = function(oControlEvent) {  };

/**
 * This event is fired before the master area is closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.beforeMasterClose = function(oControlEvent) {  };

/**
 * This event is fired before the master area is opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.beforeMasterOpen = function(oControlEvent) {  };

/**
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detailNavigate = function(oControlEvent) {  };

/**
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.masterButton = function(oControlEvent) {  };

/**
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.masterNavigate = function(oControlEvent) {  };

/**
 * Adds some detailPage into the aggregation named <code>detailPages</code>.
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to add; to add; if empty, nothing is inserted
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.addDetailPage = function(oDetailPage) { return new sap.m.SplitContainer(); };

/**
 * Adds some masterPage into the aggregation named <code>masterPages</code>.
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to add; to add; if empty, nothing is inserted
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.addMasterPage = function(oMasterPage) { return new sap.m.SplitContainer(); };

/**
 * Add a content entity either to master area or detail area depending on the master parameter.
 * 
 * This method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 * @param {sap.ui.core.Control} oPage
 *         The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * @param {boolean} bMaster
 *         States if the page should be added to the master area. If it's set to false, the page is added to detail area.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.addPage = function(oPage,bMaster) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterDetailNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * This event is fired when the master area is fully closed after the animation when there is.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterClose = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * This event is fired when the master area is fully opened after animation if there is.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterOpen = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * This event is fired before the master area is closed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachBeforeMasterClose = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * This event is fired before the master area is opened.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachBeforeMasterOpen = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachDetailNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachMasterButton = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br> itself.
 * 
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachMasterNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * navigate back within DetailView
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backDetail = function(oBackData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * navigate back within MasterView
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backMaster = function(oBackData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * Navigates back to the nearest previous page in the SplitContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the SplitContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * @param {string} sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backToPage = function(sPageId,oBackData,oTransitionParameters) { return new sap.m.SplitContainer(); };

/**
 * Navigates back to the initial/top level of Detail (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backToTopDetail = function(oBackData,oTransitionParameter) { return new sap.ui.core.Control(); };

/**
 * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backToTopMaster = function(oBackData,oTransitionParameter) { return new sap.ui.core.Control(); };

/**
 * Destroys all the detailPages in the aggregation
 * named <code>detailPages</code>.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.destroyDetailPages = function() { return new sap.m.SplitContainer(); };

/**
 * Destroys all the masterPages in the aggregation
 * named <code>masterPages</code>.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.destroyMasterPages = function() { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterDetailNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterClose = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterOpen = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachBeforeMasterClose = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachBeforeMasterOpen = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachDetailNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachMasterButton = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachMasterNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SplitContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event afterDetailNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code>The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code>The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code>The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code>The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code>Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code>Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code>How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterDetailNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event afterMasterClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterClose = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event afterMasterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code>The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code>The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code>The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code>The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code>Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code>Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code>How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event afterMasterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterOpen = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event beforeMasterClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireBeforeMasterClose = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event beforeMasterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireBeforeMasterOpen = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event detailNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code>The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code>The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code>The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code>The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code>Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code>Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code>Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code>How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireDetailNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event masterButton to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireMasterButton = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Fire event masterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code>The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code>The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code>The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code>The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code>Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code>Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code>Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code>How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireMasterNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the SplitContainer. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>backgroundColor</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundColor = function() { return ""; };

/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the SplitContainer. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 * 
 * Default value is <code>1</code>
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundRepeat = function() { return false; };

/**
 * Returns the current shown detail page.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getCurrentDetailPage = function() { return new sap.ui.core.Control(); };

/**
 * Returns the current shown master page.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getCurrentMasterPage = function() { return new sap.ui.core.Control(); };

/**
 * Returns the current shown page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned. Otherwise the current page in detail area is returned.
 * 
 * This method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 * @param {boolean} bMaster
 *         States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getCurrentPage = function(bMaster) { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>defaultTransitionNameDetail</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 * 
 * Default value is <code>slide</code>
 * @return {string} the value of property <code>defaultTransitionNameDetail</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDefaultTransitionNameDetail = function() { return ""; };

/**
 * Getter for property <code>defaultTransitionNameMaster</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 * 
 * Default value is <code>slide</code>
 * @return {string} the value of property <code>defaultTransitionNameMaster</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDefaultTransitionNameMaster = function() { return ""; };

/**
 * Returns the page with the given id in detail area. If there's no page that has the given id, null is returned.
 * @param {string} sId
 *         The id of the page that needs to be fetched.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getDetailPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * Getter for aggregation <code>detailPages</code>.<br/>
 * The content entities between which this SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDetailPages = function() { return new Array(); };

/**
 * Id of the element which is the current target of the <code>initialDetail</code> association, or null
 * 
 * Sets the initial detail page, which is shown on application launch.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getInitialDetail = function() { return new sap.ui.core.Control(); };

/**
 * Id of the element which is the current target of the <code>initialMaster</code> association, or null
 * 
 * Sets the initial master page, which is shown on application launch.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getInitialMaster = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>masterButtonText</code>.
 * This is the text shown in master button which has a default value "Navigation". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.
 * 
 * The master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitContainer manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>masterButtonText</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterButtonText = function() { return ""; };

/**
 * Returns the page with the given id in master area. If there's no page that has the given id, null is returned.
 * @param {string} sId
 *         The id of the page that needs to be fetched.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getMasterPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * Getter for aggregation <code>masterPages</code>.<br/>
 * The content entities between which this SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterPages = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SplitContainer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.SplitContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>mode</code>.
 * This mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.SplitAppMode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMode = function() { return new sap.m.SplitAppMode(); };

/**
 * Returns the page with the given id from either master area or detail area depending on the master parameter. If there's no page that has the given id, null is returned.
 * @param {string} sId
 *         The id of the page that needs to be fetched.
 * @param {boolean} bMaster
 *         If the page with given id should be fetched from the master area. If it's set to false, the page will be fetched from detail area.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getPage = function(sId,bMaster) { return new sap.ui.core.Control(); };

/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 * @param {boolean} bMaster
 *         States if this function returns the previous page in master area. If it's set to false, the previous page in detail area will be returned.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getPreviousPage = function(bMaster) { return new sap.ui.core.Control(); };

/**
 * When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.hideMaster = function() { return new sap.m.SplitContainer(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>detailPages</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oDetailPage the detailPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SplitContainer.prototype.indexOfDetailPage = function(oDetailPage) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>masterPages</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oMasterPage the masterPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SplitContainer.prototype.indexOfMasterPage = function(oMasterPage) { return 0; };

/**
 * Inserts a detailPage into the aggregation named <code>detailPages</code>.
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the detailPage should be inserted at; for
 *              a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the detailPage is inserted at
 *              the last position
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.insertDetailPage = function(oDetailPage,iIndex) { return new sap.m.SplitContainer(); };

/**
 * Inserts a masterPage into the aggregation named <code>masterPages</code>.
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the masterPage should be inserted at; for
 *              a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the masterPage is inserted at
 *              the last position
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.insertMasterPage = function(oMasterPage,iIndex) { return new sap.m.SplitContainer(); };

/**
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * 
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the SplitContainer's history stack.
 * @param {string} sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the SplitContainer, otherwise this will cause an error.
 * @param {string} sTransitionName
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 *         This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.insertPreviousPage = function(sPageId,sTransitionName,oData) { return new sap.m.SplitContainer(); };

/**
 * 
 * Returns whether master area is currently shown on the screen. In desktop browser or tablet, this method returns true when master area is shown on the screen no matter in portrait or landscape mode. And on mobile phone devices, this method returns true when the current shown page is from the pages which are added to the master area, otherwise it returns false.
 * @type boolean
 * @public
 * @since 1.16.5
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.isMasterShown = function() { return false; };

/**
 * Removes all the controls in the aggregation named <code>detailPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeAllDetailPages = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>masterPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeAllMasterPages = function() { return new Array(); };

/**
 * Removes an detailPage from the aggregation named <code>detailPages</code>.
 * @param {int | string | sap.ui.core.Control} vDetailPage the detailPageto remove or its index or id
 * @return {sap.ui.core.Control} the removed detailPage or null
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeDetailPage = function(vDetailPage) { return new sap.ui.core.Control(); };

/**
 * Removes an masterPage from the aggregation named <code>masterPages</code>.
 * @param {int | string | sap.ui.core.Control} vMasterPage the masterPageto remove or its index or id
 * @return {sap.ui.core.Control} the removed masterPage or null
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeMasterPage = function(vMasterPage) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>backgroundColor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sBackgroundColor new value for property <code>backgroundColor</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>backgroundImage</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sBackgroundImage new value for property <code>backgroundImage</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>backgroundOpacity</code>.
 * 
 * Default value is <code>1</code>.
 * @param {float} fBackgroundOpacity new value for property <code>backgroundOpacity</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>backgroundRepeat</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bBackgroundRepeat new value for property <code>backgroundRepeat</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @since 1.11.2
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>defaultTransitionNameDetail</code>.
 * 
 * Default value is <code>slide</code>.
 * @param {string} sDefaultTransitionNameDetail new value for property <code>defaultTransitionNameDetail</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setDefaultTransitionNameDetail = function(sDefaultTransitionNameDetail) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>defaultTransitionNameMaster</code>.
 * 
 * Default value is <code>slide</code>.
 * @param {string} sDefaultTransitionNameMaster new value for property <code>defaultTransitionNameMaster</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setDefaultTransitionNameMaster = function(sDefaultTransitionNameMaster) { return new sap.m.SplitContainer(); };

/**
 * Setter for the associated <code>initialDetail</code>.
 * @param {sap.ui.core.Control} oInitialDetail Id of an element which becomes the new target of this initialDetail association. Alternatively, an element instance may be given.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setInitialDetail = function(oInitialDetail) { return new sap.m.SplitContainer(); };

/**
 * Setter for the associated <code>initialMaster</code>.
 * @param {sap.ui.core.Control} oInitialMaster Id of an element which becomes the new target of this initialMaster association. Alternatively, an element instance may be given.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setInitialMaster = function(oInitialMaster) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>masterButtonText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sMasterButtonText new value for property <code>masterButtonText</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMasterButtonText = function(sMasterButtonText) { return new sap.m.SplitContainer(); };

/**
 * Setter for property <code>mode</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.SplitAppMode} sMode new value for property <code>mode</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMode = function(sMode) { return new sap.m.SplitContainer(); };

/**
 * When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.showMaster = function() { return new sap.m.SplitContainer(); };

/**
 * Navigate to given page inside the SplitContainer. The navigation is done inside the master area if the page has been added, otherwise it tries to do the page navigation in the detail area.
 * @param {string} sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.to = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.SplitContainer(); };

/**
 * navigate to given detail page
 * @param {string} sPageId
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.toDetail = function(sPageId,sTransitionName,oData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * navigate to given master page
 * @param {string} sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.toMaster = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.SplitContainer(); };


// ---- sap.m.StandardListItem --------------------------------------------------------------------------

/**
 * Constructor for a new StandardListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState</li>
 * <li>{@link #getAdaptTitleSize adaptTitleSize} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The StandardListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.StandardListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>activeIcon</code>.
 * List item active icon
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>adaptTitleSize</code>.
 * By default the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without description this results in titles with different sizes. In this cases it can be better to switch the size adaption off with setting this property to "false".
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>adaptTitleSize</code>
 * @since 1.16.3
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getAdaptTitleSize = function() { return false; };

/**
 * Getter for property <code>description</code>.
 * Description gets only visible when the title property is not empty.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>description</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getDescription = function() { return ""; };

/**
 * Getter for property <code>icon</code>.
 * List item icon
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>iconInset</code>.
 * If false image will not be shown as embedded icon. Instead it will take the full height of the listitem.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIconInset = function() { return false; };

/**
 * Getter for property <code>info</code>.
 * Info text shown on the right side of the description.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>info</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfo = function() { return ""; };

/**
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfoState = function() { return new sap.ui.core.ValueState(); };

/**
 * Returns a metadata object for class sap.m.StandardListItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.StandardListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>title</code>.
 * List item text
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getTitle = function() { return ""; };

/**
 * Setter for property <code>activeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sActiveIcon new value for property <code>activeIcon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>adaptTitleSize</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAdaptTitleSize new value for property <code>adaptTitleSize</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @since 1.16.3
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setAdaptTitleSize = function(bAdaptTitleSize) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>description</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDescription new value for property <code>description</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setDescription = function(sDescription) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIcon = function(sIcon) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>iconInset</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconInset new value for property <code>iconInset</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIconInset = function(bIconInset) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>info</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sInfo new value for property <code>info</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfo = function(sInfo) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>infoState</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sInfoState new value for property <code>infoState</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfoState = function(sInfoState) { return new sap.m.StandardListItem(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setTitle = function(sTitle) { return new sap.m.StandardListItem(); };


// ---- sap.m.StandardTile --------------------------------------------------------------------------

/**
 * Constructor for a new StandardTile.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState</li>
 * <li>{@link #getType type} : sap.m.StandardTileType</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The StandardTile
 * @extends sap.m.Tile
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.StandardTile = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Tile.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>activeIcon</code>.
 * Tile active icon
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>icon</code>.
 * Tile icon
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getIconDensityAware = function() { return false; };

/**
 * Getter for property <code>info</code>.
 * Tile description
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>info</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getInfo = function() { return ""; };

/**
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getInfoState = function() { return new sap.ui.core.ValueState(); };

/**
 * Returns a metadata object for class sap.m.StandardTile.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.StandardTile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>number</code>.
 * Number field
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getNumber = function() { return ""; };

/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getNumberUnit = function() { return ""; };

/**
 * Getter for property <code>title</code>.
 * Tile title
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getTitle = function() { return ""; };

/**
 * Getter for property <code>type</code>.
 * Tile type.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.StandardTileType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getType = function() { return new sap.m.StandardTileType(); };

/**
 * Setter for property <code>activeIcon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sActiveIcon new value for property <code>activeIcon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>icon</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.URI} sIcon new value for property <code>icon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setIcon = function(sIcon) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>iconDensityAware</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>info</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sInfo new value for property <code>info</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setInfo = function(sInfo) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>infoState</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.ValueState} sInfoState new value for property <code>infoState</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setInfoState = function(sInfoState) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>number</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNumber new value for property <code>number</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setNumber = function(sNumber) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>numberUnit</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNumberUnit new value for property <code>numberUnit</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>title</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sTitle new value for property <code>title</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setTitle = function(sTitle) { return new sap.m.StandardTile(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.StandardTileType} sType new value for property <code>type</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setType = function(sType) { return new sap.m.StandardTile(); };


// ---- sap.m.StandardTileType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.StandardTileType.toString = function() { return ""; };

// ---- sap.m.SwipeDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SwipeDirection.toString = function() { return ""; };

// ---- sap.m.Switch --------------------------------------------------------------------------

/**
 * Constructor for a new Switch.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : boolean (default: false)</li>
 * <li>{@link #getCustomTextOn customTextOn} : string (default: )</li>
 * <li>{@link #getCustomTextOff customTextOff} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getType type} : sap.m.SwitchType</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Switch = function(sId,mSettings) {};
/**
 * Triggered when a switch changes the state.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.state The new state of the switch.
 * @public
 * 
 */
sap.m.Switch.prototype.change = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Switch</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Switch</code>.<br> itself.
 * 
 * Triggered when a switch changes the state.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code>.<br/> itself.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Switch(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Switch</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Switch(); };

/**
 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Switch.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'state' of type <code>boolean</code>The new state of the switch.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Switch.prototype.fireChange = function(mArguments) { return new sap.m.Switch(); };

/**
 * Getter for property <code>customTextOff</code>.
 * Custom text for the "OFF" state.
 * 
 * "OFF" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>customTextOff</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getCustomTextOff = function() { return ""; };

/**
 * Getter for property <code>customTextOn</code>.
 * Custom text for the "ON" state.
 * 
 * "ON" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>customTextOn</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getCustomTextOn = function() { return ""; };

/**
 * Getter for property <code>enabled</code>.
 * Whether the switch is enabled.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Switch.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Switch.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>state</code>.
 * A boolean value indicating whether the switch is on or off.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getState = function() { return false; };

/**
 * Getter for property <code>type</code>.
 * Type of a Switch. Possibles values "Default", "AcceptReject".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.SwitchType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getType = function() { return new sap.m.SwitchType(); };

/**
 * Setter for property <code>customTextOff</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sCustomTextOff new value for property <code>customTextOff</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setCustomTextOff = function(sCustomTextOff) { return new sap.m.Switch(); };

/**
 * Setter for property <code>customTextOn</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sCustomTextOn new value for property <code>customTextOn</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setCustomTextOn = function(sCustomTextOn) { return new sap.m.Switch(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setEnabled = function(bEnabled) { return new sap.m.Switch(); };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setName = function(sName) { return new sap.m.Switch(); };

/**
 * Change the switch state between on and off.
 * @param {boolean} bState
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining.
 * 
 */
sap.m.Switch.prototype.setState = function(bState) { return new sap.m.Switch(); };

/**
 * Setter for property <code>type</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.SwitchType} sType new value for property <code>type</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setType = function(sType) { return new sap.m.Switch(); };


// ---- sap.m.SwitchType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SwitchType.toString = function() { return ""; };

// ---- sap.m.Table --------------------------------------------------------------------------

/**
 * Constructor for a new Table.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign</li>
 * <li>{@link #getFixedLayout fixedLayout} : boolean (default: true)</li>
 * <li>{@link #getShowOverlay showOverlay} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Table control provides a set of sophisticated and convenience functions for responsive table design.
 * For mobile devices, the recommended limit of table rows is 100(based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information
 * @extends sap.m.ListBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Table = function(sId,mSettings) {};
/**
 * Adds some column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to add; to add; if empty, nothing is inserted
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.addColumn = function(oColumn) { return new sap.m.Table(); };

/**
 * Destroys all the columns in the aggregation
 * named <code>columns</code>.
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.destroyColumns = function() { return new sap.m.Table(); };

/**
 * Creates a new subclass of class sap.m.Table with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Table.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the table. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.m.Table.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Getter for aggregation columns.
 * @param {Boolean} [bSort] set true to get the columns in an order that respects personalization settings
 * @returns {sap.m.Column[]} columns of the Table
 * @public
 * 
 */
sap.m.Table.prototype.getColumns = function(bSort) { return new Array(); };

/**
 * Getter for property <code>fixedLayout</code>.
 * Defines the algorithm to be used to layout the table cells, rows, and columns.
 * 
 * If you set this property to false, then table is rendered with "auto" layout algorithm. This means, the width of the table and its cells depends on the content thereof. The column width is set by the widest unbreakable content in the cells. This can make the rendering slow, since the browser needs to read through all the content in the table, before determining the final layout.
 * Note: Since table does not have own scroll container, setting fixedLayout to false can force the table to overflow and this can cause visual problems. So, we highly suggest to use this property when table has a few columns in wide screens or horizontal scroll container(e.g Dialog, Popover) to handle overflow.
 * Please note that with "auto" layout mode Column width property is taken into account as minimum width.
 * 
 * By default, table is rendered with "fixed" layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>fixedLayout</code>
 * @since 1.22
 * @public
 * 
 */
sap.m.Table.prototype.getFixedLayout = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Table.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Table.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>showOverlay</code>.
 * Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showOverlay</code>
 * @since 1.22.1
 * @public
 * 
 */
sap.m.Table.prototype.getShowOverlay = function() { return false; };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Table.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.Table(); };

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Table.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.m.Column} vColumn the columnto remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * 
 */
sap.m.Table.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * Setter for property <code>backgroundDesign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign new value for property <code>backgroundDesign</code>
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.Table(); };

/**
 * Setter for property <code>fixedLayout</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFixedLayout new value for property <code>fixedLayout</code>
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @since 1.22
 * @public
 * 
 */
sap.m.Table.prototype.setFixedLayout = function(bFixedLayout) { return new sap.m.Table(); };

/**
 * Setter for property <code>showOverlay</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowOverlay new value for property <code>showOverlay</code>
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @since 1.22.1
 * @public
 * 
 */
sap.m.Table.prototype.setShowOverlay = function(bShowOverlay) { return new sap.m.Table(); };


// ---- sap.m.TablePersoController --------------------------------------------------------------------------

/**
 * The TablePersoController can be used to connect a table that you want to provide
 * a personalization dialog for, with a persistence service such as one provided by
 * the unified shell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize (default: 20rem)</li>
 * <li>{@link #getComponentName componentName} : string</li>
 * <li>{@link #getHasGrouping hasGrouping} : boolean (default: false)</li>
 * <li>{@link #getShowSelectAll showSelectAll} : boolean (default: true)</li>
 * <li>{@link #getShowResetAll showResetAll} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPersoService persoService} : Object</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:personalizationsDone personalizationsDone} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string}
 * 			[sId] optional id for the new control; generated automatically if
 * 			no non-empty id is given Note: this can be omitted, no matter
 * 			whether <code>mSettings</code> will be given or not!
 * @param {object}
 * 			[mSettings] optional map/JSON-object with initial settings for the
 * 			new component instance
 * @public
 * @class Table Personalization Controller
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * 
 */
sap.m.TablePersoController = function(sId,mSettings) {};
/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TablePersoController.prototype.personalizationsDone = function(oControlEvent) {  };

/**
 * Activates the controller, i.e. tries to retrieve existing persisted
 * personalizations, creates a TablePersoDialog for the associated
 * table and attaches a close handler to apply the personalizations to
 * the table and persist them.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.activate = function() {  };

/**
 * Adds some table into the association named <code>tables</code>.
 * @param {string | sap.m.Table} vTable the tables to add; to add; if empty, nothing is inserted
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.addTable = function(vTable) { return new sap.m.TablePersoController(); };

/**
 * Applies the personalizations by getting the existing personalizations
 * and adjusting to the table.
 * @param {object} oTable
 * @public
 * 
 */
sap.m.TablePersoController.prototype.applyPersonalizations = function(oTable) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'personalizationsDone' event of this <code>sap.m.TablePersoController</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TablePersoController</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoController</code>.<br/> itself.
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.attachPersonalizationsDone = function(oData,fnFunction,oListener) { return new sap.m.TablePersoController(); };

/**
 * Destroys the persoService in the aggregation
 * named <code>persoService</code>.
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.destroyPersoService = function() { return new sap.m.TablePersoController(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'personalizationsDone' event of this <code>sap.m.TablePersoController</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.detachPersonalizationsDone = function(fnFunction,oListener) { return new sap.m.TablePersoController(); };

/**
 * Do some clean up: remove event delegates, etc
 * @protected
 * 
 */
sap.m.TablePersoController.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.m.TablePersoController with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TablePersoController.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event personalizationsDone to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TablePersoController.prototype.firePersonalizationsDone = function(mArguments) { return new sap.m.TablePersoController(); };

/**
 * Getter for property <code>componentName</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>componentName</code>
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getComponentName = function() { return ""; };

/**
 * Getter for property <code>contentHeight</code>.
 * 
 * 
 * Default value is <code>20rem</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>contentWidth</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>hasGrouping</code>.
 * 
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>hasGrouping</code>
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getHasGrouping = function() { return false; };

/**
 * Returns a metadata object for class sap.m.TablePersoController.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.TablePersoController.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for aggregation <code>persoService</code>.<br/>
 * @return {Object}
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getPersoService = function() { return null; };

/**
 * Getter for property <code>showResetAll</code>.
 * 
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showResetAll</code>
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getShowResetAll = function() { return false; };

/**
 * Getter for property <code>showSelectAll</code>.
 * 
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showSelectAll</code>
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getShowSelectAll = function() { return false; };

/**
 * Id of the element which is the current target of the <code>table</code> association, or null
 * @return {sap.m.Table}
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getTable = function() { return new sap.m.Table(); };

/**
 * Returns a  _tablePersoDialog instance if available. It can be NULL if
 * the controller has not been activated yet.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getTablePersoDialog = function() {  };

/**
 * Id of the element which is the current target of the <code>tables</code> association, or null
 * @return {sap.m.Table[]}
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getTables = function() { return new Array(); };

/**
 * Initializes the TablePersoController instance after creation.
 * @protected
 * 
 */
sap.m.TablePersoController.prototype.init = function() {  };

/**
 * Opens the TablePersoDialog, stores the personalized settings on close,
 * modifies the table columns, and sends them to the persistence service
 * @public
 * 
 */
sap.m.TablePersoController.prototype.openDialog = function() {  };

/**
 * Refresh the personalizations: reloads the personalization information from the table perso 
 * provider, applies it to the controller's table and updates the controller's table perso dialog.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.refresh = function() {  };

/**
 * Removes all the controls in the association named <code>tables</code>.
 * @return {sap.m.Table[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TablePersoController.prototype.removeAllTables = function() { return new Array(); };

/**
 * Removes an table from the association named <code>tables</code>.
 * @param {int | string | sap.m.Table} vTable the tableto remove or its index or id
 * @return {sap.m.Table} the removed table or null
 * @public
 * 
 */
sap.m.TablePersoController.prototype.removeTable = function(vTable) { return new sap.m.Table(); };

/**
 * Persist the personalizations
 * @public
 * 
 */
sap.m.TablePersoController.prototype.savePersonalizations = function() {  };

/**
 * Using this method, the first part of tablePerso persistence ids can be
 * provided, in case the table's app does not provide that part itself.
 * 
 * If a component name is set using this method, it will be used, regardless of
 * whether the table's app has a different component name or not.
 * @param {string} sCompName
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setComponentName = function(sCompName) {  };

/**
 * Reflector for the controller's 'contentHeight' property.
 * @param {sap.ui.core.CSSSize} sHeight
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setContentHeight = function(sHeight) {  };

/**
 * Reflector for the controller's 'contentWidth' property.
 * @param {sap.ui.core.CSSSize} sWidth
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setContentWidth = function(sWidth) {  };

/**
 * Reflector for the controller's 'hasGrouping' property.
 * @param {boolean} bHasGrouping
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setHasGrouping = function(bHasGrouping) {  };

/**
 * Setter for the aggregated <code>persoService</code>.
 * @param {Object} oPersoService the persoService to set
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setPersoService = function(oPersoService) { return new sap.m.TablePersoController(); };

/**
 * Reflector for the controller's 'showResetAll' property.
 * @param {boolean} bShowResetAll
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setShowResetAll = function(bShowResetAll) {  };

/**
 * Reflector for the controller's 'showSelectAll' property.
 * @param {boolean} bShowSelectAll
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setShowSelectAll = function(bShowSelectAll) {  };

/**
 * Setter for the associated <code>table</code>.
 * @param {sap.m.Table} oTable Id of an element which becomes the new target of this table association. Alternatively, an element instance may be given.
 * @return {sap.m.TablePersoController} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setTable = function(oTable) { return new sap.m.TablePersoController(); };


// ---- sap.m.TablePersoDialog --------------------------------------------------------------------------

/**
 * The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using
 * <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li>
 * <li>the column header control's 'text' property if no caption property is available</li>
 * <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li>
 * <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul>
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getPersoMap persoMap} : object</li>
 * <li>{@link #getColumnInfoCallback columnInfoCallback} : object</li>
 * <li>{@link #getInitialColumnState initialColumnState} : object</li>
 * <li>{@link #getHasGrouping hasGrouping} : boolean</li>
 * <li>{@link #getShowSelectAll showSelectAll} : boolean</li>
 * <li>{@link #getShowResetAll showResetAll} : boolean</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPersoService persoService} : Object</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @param {string}
 * 			[sId] optional id for the new control; generated automatically if
 * 			no non-empty id is given Note: this can be omitted, no matter
 * 			whether <code>mSettings</code> will be given or not!
 * @param {object}
 * 			[mSettings] optional map/JSON-object with initial settings for the
 * 			new component instance
 * @public
 * @class Table Personalization Dialog
 * @extends sap.ui.base.ManagedObject
 * @version 1.26.9
 * 
 */
sap.m.TablePersoDialog = function(sId,mSettings) {};
/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.TablePersoDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TablePersoDialog</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code>.<br/> itself.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.TablePersoDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TablePersoDialog</code>.<br> itself.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code>.<br/> itself.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Destroys the persoService in the aggregation
 * named <code>persoService</code>.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.destroyPersoService = function() { return new sap.m.TablePersoDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.TablePersoDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.TablePersoDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Creates a new subclass of class sap.m.TablePersoDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TablePersoDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TablePersoDialog.prototype.fireCancel = function(mArguments) { return new sap.m.TablePersoDialog(); };

/**
 * Fire event confirm to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TablePersoDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.TablePersoDialog(); };

/**
 * Getter for property <code>columnInfoCallback</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>columnInfoCallback</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getColumnInfoCallback = function() { return new Object(); };

/**
 * Getter for property <code>contentHeight</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>contentWidth</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>hasGrouping</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>hasGrouping</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getHasGrouping = function() { return false; };

/**
 * Getter for property <code>initialColumnState</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>initialColumnState</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getInitialColumnState = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.TablePersoDialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.TablePersoDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>persoMap</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {object} the value of property <code>persoMap</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getPersoMap = function() { return new Object(); };

/**
 * Getter for aggregation <code>persoService</code>.<br/>
 * @return {Object}
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getPersoService = function() { return null; };

/**
 * Getter for property <code>showResetAll</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>showResetAll</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getShowResetAll = function() { return false; };

/**
 * Getter for property <code>showSelectAll</code>.
 * 
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>showSelectAll</code>
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getShowSelectAll = function() { return false; };

/**
 * Initializes the TablePersoDialog instance after creation.
 * @protected
 * 
 */
sap.m.TablePersoDialog.prototype.init = function() {  };

/**
 * Sets the content of the dialog, being list items representing
 * the associated table's column settings, and opens the dialog
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.open = function() {  };

/**
 * Returns the personalizations made. Currently supports
 * a 'columns' property which holds an array of settings,
 * one element per column in the associated table. The element
 * contains column-specific information as follows: id: column id;
 * order: new order; text: the column's header text that was displayed
 * in the dialog; visible: visibility (true or false).
 * @return object personalizationData
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.retrievePersonalizations = function() {  };

/**
 * Setter for property <code>columnInfoCallback</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oColumnInfoCallback new value for property <code>columnInfoCallback</code>
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setColumnInfoCallback = function(oColumnInfoCallback) { return new sap.m.TablePersoDialog(); };

/**
 * Setter for property <code>contentHeight</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentHeight new value for property <code>contentHeight</code>
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setContentHeight = function(sContentHeight) { return new sap.m.TablePersoDialog(); };

/**
 * Setter for property <code>contentWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sContentWidth new value for property <code>contentWidth</code>
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setContentWidth = function(sContentWidth) { return new sap.m.TablePersoDialog(); };

/**
 * Reflector for the TablePersoDialog's Dialog's hasGrouping property.
 * @param {boolean} bHasGrouping
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setHasGrouping = function(bHasGrouping) {  };

/**
 * Setter for property <code>initialColumnState</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oInitialColumnState new value for property <code>initialColumnState</code>
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setInitialColumnState = function(oInitialColumnState) { return new sap.m.TablePersoDialog(); };

/**
 * Setter for property <code>persoMap</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {object} oPersoMap new value for property <code>persoMap</code>
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setPersoMap = function(oPersoMap) { return new sap.m.TablePersoDialog(); };

/**
 * Setter for the aggregated <code>persoService</code>.
 * @param {Object} oPersoService the persoService to set
 * @return {sap.m.TablePersoDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setPersoService = function(oPersoService) { return new sap.m.TablePersoDialog(); };

/**
 * Reflector for the TablePersoDialog's Dialog's showResetAll property.
 * @param {boolean} bShowResetAll
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setShowResetAll = function(bShowResetAll) {  };

/**
 * Reflector for the TablePersoDialog's Dialog's showSelectAll property.
 * @param {boolean} bShowSelectAll
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setShowSelectAll = function(bShowSelectAll) {  };


// ---- sap.m.TablePersoProvider --------------------------------------------------------------------------

/**
 * This is an abstract TablePersoProvider, describing the interface for a real
 * TablePersoProvider.
 * @public
 * @class Table Personalization Provider
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.26.9
 * 
 */
sap.m.TablePersoProvider = function() {};
/**
 * Removes the personalization bundle
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.delPersData = function() {  };

/**
 * Creates a new subclass of class sap.m.TablePersoProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TablePersoProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Callback function which can be used to determine the title of a given column
 * within the TablePersoDialog. As a default, the column header controls are
 * asked for their 'text' or 'title' property. This works in most cases, for example
 * if the header control is a sap.m.Label (has 'text' property) or a sap.m.ObjectListItem
 * (has 'title' property). 
 * 
 * If the header control used in a column has neither 'text' nor 'title' property, or if you would like to 
 * display a modified column name for a certain column, this callback function can be used.
 * 
 * If the callback delivers null for a column (which is the default implementation), the default
 * texts described above are displayed for that column in the TablePersoDialog. 
 * 
 * In case neither the callback delivers null and neither 'text' nor ' title' property are at hand,
 * the TablePersoDialog will display the column id and a warning message is logged.
 * @param {sap.m.Column} oColumn column whose caption shall be determined
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.getCaption = function(oColumn) {  };

/**
 * Callback function which can be used to determine the group of a given column
 * within the TablePersoDialog. As a default, the columns are not assigned to a group. 
 * 
 * This information is used to group the columns within the TablePersoDialog if the TablePersoController's
 * 'group' flag is set, otherwise, the groups are ignored. 
 * @param {sap.m.Column} oColumn column whose group shall be determined
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.getGroup = function(oColumn) {  };

/**
 * Returns a metadata object for class sap.m.TablePersoProvider.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.TablePersoProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Retrieves the personalization bundle. 
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.getPersData = function() {  };

/**
 * Initializes the TablePersoProvider instance after creation.
 * @protected
 * 
 */
sap.m.TablePersoProvider.prototype.init = function() {  };

/**
 * Resets user’s personalization for a given table so that ‘getPersData’ will
 * deliver its initial state. If no table is specified, all personalizations
 * of the currently logged on user are reset.
 * 
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.resetPersData = function() {  };

/**
 * Stores the personalization bundle, overwriting any
 * previous bundle completely
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @param {object} oBundle
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.setPersData = function(oBundle) {  };


// ---- sap.m.TableSelectDialog --------------------------------------------------------------------------

/**
 * Constructor for a new TableSelectDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ColumnListItem[]</li>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A TableSelectDialog provides you a easier way to create a dialog that contains a list with grouping and search functionality.
 * The Table used in a SelectDialog is a Table with Columns. After selecting an item, the dialog will be closed and a callback function will return the item being selected.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TableSelectDialog = function(sId,mSettings) {};
/**
 * This event will be fired when the cancel button is clicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items.
 * Note: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.liveChange = function(oControlEvent) {  };

/**
 * Fired when the search button has been clicked on dialog.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.search = function(oControlEvent) {  };

/**
 * Adds some column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to add; to add; if empty, nothing is inserted
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.addColumn = function(oColumn) { return new sap.m.TableSelectDialog(); };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.ColumnListItem}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.addItem = function(oItem) { return new sap.m.TableSelectDialog(); };

/**
 * Forward method to the inner dialog: addStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.addStyleClass = function() { return new sap.m.TableSelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br> itself.
 * 
 * This event will be fired when the cancel button is clicked
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br> itself.
 * 
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br> itself.
 * 
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br> itself.
 * 
 * Fired when the search button has been clicked on dialog.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Forwards aggregations with the name of items or columns to the internal table.
 * @overwrite
 * @protected
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.TableSelectDialog(); };

/**
 * Binder for aggregation <code>columns</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.bindColumns = function(oBindingInfo) { return new sap.m.TableSelectDialog(); };

/**
 * Binder for aggregation <code>items</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.bindItems = function(oBindingInfo) { return new sap.m.TableSelectDialog(); };

/**
 * Destroys all the columns in the aggregation
 * named <code>columns</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.destroyColumns = function() { return new sap.m.TableSelectDialog(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.destroyItems = function() { return new sap.m.TableSelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Creates a new subclass of class sap.m.TableSelectDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TableSelectDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireCancel = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * Fire event confirm to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.m.StandardListItem</code>Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
 * <li>'selectedItems' of type <code>sap.m.StandardListItem[]</code>Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
 * <li>'selectedContexts' of type <code>string</code>Returns the binding contexts of the selected items including the non-visible items.
 * Note: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The value entered in the search field.</li>
 * <li>'itemsBinding' of type <code>any</code>The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireLiveChange = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The value entered in the search field.</li>
 * <li>'itemsBinding' of type <code>any</code>The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireSearch = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * Getter for aggregation <code>columns</code>.<br/>
 * The columns bindings.
 * @return {sap.m.Column[]}
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getColumns = function() { return new Array(); };

/**
 * Get content height of the select dialog {@link sap.m.Dialog}
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sHeight the content height of the internal dialog
 * 
 */
sap.m.TableSelectDialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Get content width of the select dialog {@link sap.m.Dialog}
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 * 
 */
sap.m.TableSelectDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Forward method to the inner dialog: getDomRef
 * @public
 * @override
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * 
 */
sap.m.TableSelectDialog.prototype.getDomRef = function() { return null; };

/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items initially displayed in the table
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getGrowingThreshold = function() { return 0; };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of the table.
 * @return {sap.m.ColumnListItem[]}
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.TableSelectDialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.TableSelectDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>multiSelect</code>.
 * If on, the user can select several options from the table.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getMultiSelect = function() { return false; };

/**
 * Get the internal List's no data text property
 * @overwrite
 * @public
 * @returns {string} the current no data text
 * 
 */
sap.m.TableSelectDialog.prototype.getNoDataText = function() { return ""; };

/**
 * Getter for property <code>rememberSelections</code>.
 * This flag controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
 * Note: This property must be set before the dialog is opened to have an effect.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @since 1.18
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getRememberSelections = function() { return false; };

/**
 * Getter for property <code>title</code>.
 * The title text appears in the dialog header.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getTitle = function() { return ""; };

/**
 * Forward method to the inner dialog: hasStyleClass
 * @public
 * @override
 * @returns {boolean} true if the class is set, false otherwise
 * 
 */
sap.m.TableSelectDialog.prototype.hasStyleClass = function() { return false; };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ColumnListItem}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.TableSelectDialog(); };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ColumnListItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.insertItem = function(oItem,iIndex) { return new sap.m.TableSelectDialog(); };

/**
 * Opens the internal dialog with a searchfield and a table.
 * @public
 * @param {string} sSearchValue Value for the table search.
 * @returns {this} <code>this</code> to allow method chaining
 * 
 */
sap.m.TableSelectDialog.prototype.open = function(sSearchValue) { return new sap.m.TableSelectDialog(); };

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ColumnListItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.m.Column} vColumn the columnto remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ColumnListItem} vItem the itemto remove or its index or id
 * @return {sap.m.ColumnListItem} the removed item or null
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeItem = function(vItem) { return new sap.m.ColumnListItem(); };

/**
 * Forward method to the inner dialog: removeStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.removeStyleClass = function() { return new sap.m.TableSelectDialog(); };

/**
 * Set content height of the select dialog {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sHeight the new content height value for the dialog
 * @public
 * @overwrite
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setContentHeight = function(sHeight) { return new sap.m.TableSelectDialog(); };

/**
 * Set content width of the select dialog {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @overwrite
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setContentWidth = function(sWidth) { return new sap.m.TableSelectDialog(); };

/**
 * Sets the growing threshold to the internal table
 * @public
 * @param {int} iValue Value for the table's growing threshold.
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setGrowingThreshold = function(iValue) { return new sap.m.TableSelectDialog(); };

/**
 * Enable/Disable multi selection mode.
 * @overwrite
 * @public
 * @param {boolean} bMulti flag for multi selection mode
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setMultiSelect = function(bMulti) { return new sap.m.TableSelectDialog(); };

/**
 * Set the no data text of the internal table
 * @overwrite
 * @public
 * @param {string} sNoDataText the no data text for the table
 * 
 */
sap.m.TableSelectDialog.prototype.setNoDataText = function(sNoDataText) {  };

/**
 * Setter for property <code>rememberSelections</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRememberSelections new value for property <code>rememberSelections</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @since 1.18
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.TableSelectDialog(); };

/**
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setTitle = function(sTitle) { return new sap.m.TableSelectDialog(); };

/**
 * Forward method to the inner dialog: toggleStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.toggleStyleClass = function() { return new sap.m.TableSelectDialog(); };

/**
 * Unbinder for aggregation <code>columns</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.unbindColumns = function() { return new sap.m.TableSelectDialog(); };

/**
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.unbindItems = function() { return new sap.m.TableSelectDialog(); };


// ---- sap.m.Text --------------------------------------------------------------------------

/**
 * Constructor for a new Text.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLines maxLines} : int</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Text control is used to display some continuous text.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Text = function(sId,mSettings) {};
/**
 * Determines per instance whether line height should be cached or not.
 * Default value is true.
 * @since 1.22
 * @protected
 * @type {boolean}
 * 
 */
sap.m.Text.prototype.cacheLineHeight = false

/**
 * Ellipsis(…) text to indicate more text when clampText function is used.
 * Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.
 * @since 1.13.2
 * @protected
 * @type {string}
 * 
 */
sap.m.Text.prototype.ellipsis = ""

/**
 * Defines whether browser supports native line clamp or not
 * @since 1.13.2
 * @returns {boolean}
 * @protected
 * @readonly
 * @static
 * 
 */
sap.m.Text.hasNativeLineClamp = undefined

/**
 * Default line height value as a number when line-height is normal.
 * This value is required during max-height calculation for the browsers that do not support line-clamping.
 * It is better to define line-height in CSS instead of "normal" to get consistent maxLines results since normal line-height
 * not only vary from browser to browser but they also vary from one font face to another and can also vary within a given face.
 * 
 * Default value is 1.2
 * @since 1.22
 * @protected
 * @type {number}
 * 
 */
sap.m.Text.prototype.normalLineHeight = 0.0

/**
 * Binder for property <code>text</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.bindText = function(oBindingInfo) { return new sap.m.Text(); };

/**
 * Decides whether the control can use native line clamp feature or not.
 * In RTL mode native line clamp feature is not supported
 * @since 1.20
 * @protected
 * @return {Boolean}
 * 
 */
sap.m.Text.prototype.canUseNativeLineClamp = function() { return null; };

/**
 * Sets the max-height to support maxLines property
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number} calculated max height value
 * 
 */
sap.m.Text.prototype.clampHeight = function(oDomRef) { return null; };

/**
 * Clamps the wrapping text according to max lines and returns the found ellipsis position.
 * Parameters can be used for better performance.
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @param {number} [iStartPos] Start point of the ellipsis search.
 * @param {number} [iEndPos] End point of the ellipsis search.
 * @returns {number|undefined} Returns found ellipsis position or undefined
 * @since 1.20
 * @protected
 * 
 */
sap.m.Text.prototype.clampText = function(oDomRef,iStartPos,iEndPos) { return 0.0; };

/**
 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Text.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the max height according to max lines and line height calculation.
 * This is not calculated max-height!
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number}
 * 
 */
sap.m.Text.prototype.getClampHeight = function(oDomRef) { return null; };

/**
 * Caches and returns the computed line height of the text.
 * @since 1.22
 * @protected
 * @see sap.m.Text#cacheLineHeight
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number} returns calculated line-height
 * 
 */
sap.m.Text.prototype.getLineHeight = function(oDomRef) { return null; };

/**
 * Getter for property <code>maxLines</code>.
 * Limits the number of lines for wrapping texts.
 * 
 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>maxLines</code>
 * @since 1.13.2
 * @public
 * 
 */
sap.m.Text.prototype.getMaxLines = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.Text.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Text.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>text</code>.
 * Text to be displayed.
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Text.prototype.getText = function() { return ""; };

/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.m.Text.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Getter for property <code>textDirection</code>.
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.Text.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Returns the text node container's DOM reference.
 * This can be different then getDomRef when inner wrapper is needed.
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 * 
 */
sap.m.Text.prototype.getTextDomRef = function() { return null; };

/**
 * Getter for property <code>width</code>.
 * By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Text.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>wrapping</code>.
 * Set this property to false to disable the automatic text wrapping.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.m.Text.prototype.getWrapping = function() { return false; };

/**
 * Determines whether max lines should be rendered or not
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 * 
 */
sap.m.Text.prototype.hasMaxLines = function() { return null; };

/**
 * Setter for property <code>maxLines</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iMaxLines new value for property <code>maxLines</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @since 1.13.2
 * @public
 * 
 */
sap.m.Text.prototype.setMaxLines = function(iMaxLines) { return new sap.m.Text(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setText = function(sText) { return new sap.m.Text(); };

/**
 * Setter for property <code>textAlign</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign new value for property <code>textAlign</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Text(); };

/**
 * Setter for property <code>textDirection</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection new value for property <code>textDirection</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Text(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setWidth = function(sWidth) { return new sap.m.Text(); };

/**
 * Setter for property <code>wrapping</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bWrapping new value for property <code>wrapping</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setWrapping = function(bWrapping) { return new sap.m.Text(); };

/**
 * Unbinder for property <code>text</code>.
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.unbindText = function() { return new sap.m.Text(); };


// ---- sap.m.TextArea --------------------------------------------------------------------------

/**
 * Constructor for a new TextArea.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRows rows} : int (default: 2)</li>
 * <li>{@link #getCols cols} : int (default: 20)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enable users to input multi-line text.
 * @extends sap.m.InputBase
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.9.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TextArea = function(sId,mSettings) {};
/**
 * This event is fired when the value of the input is changed - e.g. at each keypress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the textarea.
 * @public
 * 
 */
sap.m.TextArea.prototype.liveChange = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TextArea</code>.<br> itself.
 * 
 * This event is fired when the value of the input is changed - e.g. at each keypress
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code>.<br/> itself.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.TextArea(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.TextArea(); };

/**
 * Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TextArea.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code>The new value of the textarea.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TextArea.prototype.fireLiveChange = function(mArguments) { return new sap.m.TextArea(); };

/**
 * Getter for property <code>cols</code>.
 * Specifies the width of the textarea (in average character width).
 * 
 * Default value is <code>20</code>
 * @return {int} the value of property <code>cols</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getCols = function() { return 0; };

/**
 * Getter for property <code>height</code>.
 * Defines the height of the textarea with CSS. This property can overwrite the rows property.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters that user can input. If your value property's length bigger than maxLength then value is not truncated and user can see whole value property but cannot write anymore.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.TextArea.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.TextArea.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>rows</code>.
 * Specifies the height of the text area (in lines).
 * 
 * Default value is <code>2</code>
 * @return {int} the value of property <code>rows</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getRows = function() { return 0; };

/**
 * Getter for property <code>wrapping</code>.
 * The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form. Possible values are: Soft, Hard, Off.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.Wrapping} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getWrapping = function() { return new sap.ui.core.Wrapping(); };

/**
 * Setter for property <code>cols</code>.
 * 
 * Default value is <code>20</code>.
 * @param {int} iCols new value for property <code>cols</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setCols = function(iCols) { return new sap.m.TextArea(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setHeight = function(sHeight) { return new sap.m.TextArea(); };

/**
 * Setter for property <code>maxLength</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength new value for property <code>maxLength</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setMaxLength = function(iMaxLength) { return new sap.m.TextArea(); };

/**
 * Setter for property <code>rows</code>.
 * 
 * Default value is <code>2</code>.
 * @param {int} iRows new value for property <code>rows</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setRows = function(iRows) { return new sap.m.TextArea(); };

/**
 * Setter for property <code>wrapping</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.Wrapping} sWrapping new value for property <code>wrapping</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setWrapping = function(sWrapping) { return new sap.m.TextArea(); };


// ---- sap.m.Tile --------------------------------------------------------------------------

/**
 * Constructor for a new Tile.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRemovable removable} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A tile to be displayed in the tile container. Use this
 * tile as the base class for
 * specialized tile implementations.
 * Use the renderers _addOuterClass methods to add a style class to the main
 * surface of the Tile. In this class set the background color, gradients
 * or background images.
 * Instead of implementing the default render method in the renderer implement
 * your content HTML in the _renderContent method of the specialized
 * tile.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Tile = function(sId,mSettings) {};
/**
 * Tap event is raised if the user tap or click to the
 * control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Tile.prototype.press = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Tile</code>.<br> itself.
 * 
 * Tap event is raised if the user tap or click to the
 * control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Tile(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Tile(); };

/**
 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Tile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Tile.prototype.firePress = function(mArguments) { return new sap.m.Tile(); };

/**
 * Returns a metadata object for class sap.m.Tile.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Tile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>removable</code>.
 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * 
 */
sap.m.Tile.prototype.getRemovable = function() { return false; };

/**
 * Setter for property <code>removable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bRemovable new value for property <code>removable</code>
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.setRemovable = function(bRemovable) { return new sap.m.Tile(); };


// ---- sap.m.TileContainer --------------------------------------------------------------------------

/**
 * Constructor for a new TileContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getEditable editable} : boolean</li>
 * <li>{@link #getAllowAdd allowAdd} : boolean</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tileMove tileMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tileDelete tileDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tileAdd tileAdd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A container that arranges same-size tiles nicely on carousel pages
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer = function(sId,mSettings) {};
/**
 * Fired if a Tile is added
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TileContainer.prototype.tileAdd = function(oControlEvent) {  };

/**
 * Fired if a tile is deleted during edit mode.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile
 * @public
 * 
 */
sap.m.TileContainer.prototype.tileDelete = function(oControlEvent) {  };

/**
 * Fired if a tile was moved
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile that has been moved
 * @param {int} oControlEvent.getParameters.newIndex The new index of the tile in the tiles aggregation
 * @public
 * 
 */
sap.m.TileContainer.prototype.tileMove = function(oControlEvent) {  };

/**
 * Adds a tile to the end of the tiles collection
 * @param {sap.m.Tile} oTile The tile to add.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 * 
 */
sap.m.TileContainer.prototype.addTile = function(oTile) { return new sap.m.TileContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br> itself.
 * 
 * Fired if a Tile is added
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileAdd = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br> itself.
 * 
 * Fired if a tile is deleted during edit mode.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileDelete = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br> itself.
 * 
 * Fired if a tile was moved
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileMove = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Deletes a tile.
 * @param {sap.m.Tile} oTile The tile to move
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 * 
 */
sap.m.TileContainer.prototype.deleteTile = function(oTile) { return new sap.m.TileContainer(); };

/**
 * Destroys all the tiles in the aggregation
 * named <code>tiles</code>.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.destroyTiles = function() { return new sap.m.TileContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileAdd = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileDelete = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileMove = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TileContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event tileAdd to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileAdd = function(mArguments) { return new sap.m.TileContainer(); };

/**
 * Fire event tileDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code>The tile</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileDelete = function(mArguments) { return new sap.m.TileContainer(); };

/**
 * Fire event tileMove to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code>The tile that has been moved</li>
 * <li>'newIndex' of type <code>int</code>The new index of the tile in the tiles aggregation</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileMove = function(mArguments) { return new sap.m.TileContainer(); };

/**
 * Getter for property <code>allowAdd</code>.
 * Determines whether the user is allowed to add tiles in edit mode (editable = true)
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>allowAdd</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getAllowAdd = function() { return false; };

/**
 * Getter for property <code>editable</code>.
 * Whether the tile container is editable and you can move or delete or add tiles.
 * 
 * Default value is <code>undefined</code>
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getEditable = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * The height of the container in pixel
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.TileContainer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.TileContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the index of the first tile that is visible in the current page
 * @returns {int} The index of the first tile that is visible in the current page.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer.prototype.getPageFirstTileIndex = function() { return 0; };

/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * The tiles to be displayed by the tile container
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.TileContainer.prototype.getTiles = function() { return new Array(); };

/**
 * Getter for property <code>width</code>.
 * The width of the container in pixel
 * 
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.TileContainer.prototype.indexOfTile = function(oTile) { return 0; };

/**
 * Inserts a tile to the given index
 * @param {sap.m.Tile} oTile The tile to insert
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 * 
 */
sap.m.TileContainer.prototype.insertTile = function(oTile,iIndex) { return new sap.m.TileContainer(); };

/**
 * Moves a given tile to the given index.
 * @param {sap.m.Tile} vTile The tile to move
 * @param {int} iNewIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer.prototype.moveTile = function(vTile,iNewIndex) { return new sap.m.TileContainer(); };

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TileContainer.prototype.removeAllTiles = function() { return new Array(); };

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 * @param {int | string | sap.ui.core.Control} vTile the tileto remove or its index or id
 * @return {sap.ui.core.Control} the removed tile or null
 * @public
 * 
 */
sap.m.TileContainer.prototype.removeTile = function(vTile) { return new sap.ui.core.Control(); };

/**
 * Scrolls to the page where the given tile or tile index is included.
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 * @param {sap.m.Tile|int} vTile The tile or tile index to be scrolled into view.
 * @param {boolean} bAnimated Whether the scroll should be animated.
 * @public
 * 
 */
sap.m.TileContainer.prototype.scrollIntoView = function(vTile,bAnimated) {  };

/**
 * Scrolls one page to the left
 * @public
 * 
 */
sap.m.TileContainer.prototype.scrollLeft = function() {  };

/**
 * Scrolls one page to the right.
 * @public
 * 
 */
sap.m.TileContainer.prototype.scrollRight = function() {  };

/**
 * Setter for property <code>allowAdd</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bAllowAdd new value for property <code>allowAdd</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setAllowAdd = function(bAllowAdd) { return new sap.m.TileContainer(); };

/**
 * Sets the editable property to the tile container that allows to move icons.
 * This is currently also set with a long tap
 * @param {boolean} bValue Whether the container is in edit mode or not.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 * 
 */
sap.m.TileContainer.prototype.setEditable = function(bValue) { return new sap.m.TileContainer(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setHeight = function(sHeight) { return new sap.m.TileContainer(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setWidth = function(sWidth) { return new sap.m.TileContainer(); };


// ---- sap.m.ToggleButton --------------------------------------------------------------------------

/**
 * Constructor for a new ToggleButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPressed pressed} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ToggleButton Control is a Button that can be toggled between pressed and normal state
 * @extends sap.m.Button
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToggleButton = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ToggleButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Button.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToggleButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ToggleButton.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ToggleButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>pressed</code>.
 * The property is “true” when the control is toggled. The default state of this property is "false".
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>pressed</code>
 * @public
 * 
 */
sap.m.ToggleButton.prototype.getPressed = function() { return false; };

/**
 * Setter for property <code>pressed</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPressed new value for property <code>pressed</code>
 * @return {sap.m.ToggleButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToggleButton.prototype.setPressed = function(bPressed) { return new sap.m.ToggleButton(); };


// ---- sap.m.Token --------------------------------------------------------------------------

/**
 * Constructor for a new Token.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getKey key} : string (default: )</li>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * renders a token containing text and an optional delete icon
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Token = function(sId,mSettings) {};
/**
 * Event is fired when the user clicks on the control.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Token.prototype.press = function(oControlEvent) {  };

/**
 * Event is fired when the user selects a token (could be a keyboard navigation, could be a press)
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Token.prototype.select = function(oControlEvent) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.Token</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Token</code>.<br> itself.
 * 
 * Fired if the user click the token's delete button.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code>.<br/> itself.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachDelete = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Token</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Token</code>.<br> itself.
 * 
 * Event is fired when the user clicks on the control.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code>.<br/> itself.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.Token</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Token</code>.<br> itself.
 * 
 * Event is fired when the user selects a token (could be a keyboard navigation, could be a press)
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code>.<br/> itself.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.Token</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.detachDelete = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Token</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.Token</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Creates a new subclass of class sap.m.Token with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Token.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event delete to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.fireDelete = function(mArguments) { return new sap.m.Token(); };

/**
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.firePress = function(mArguments) { return new sap.m.Token(); };

/**
 * Fire event select to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.fireSelect = function(mArguments) { return new sap.m.Token(); };

/**
 * Getter for property <code>editable</code>.
 * if true, token displays delete icon and fires events accordingly
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.m.Token.prototype.getEditable = function() { return false; };

/**
 * Getter for property <code>key</code>.
 * token's identifier key
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.m.Token.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.Token.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Token.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>selected</code>.
 * current selection status of token
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.Token.prototype.getSelected = function() { return false; };

/**
 * Getter for property <code>text</code>.
 * token's display text
 * 
 * Default value is <code></code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Token.prototype.getText = function() { return ""; };

/**
 * Setter for property <code>editable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable new value for property <code>editable</code>
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.setEditable = function(bEditable) { return new sap.m.Token(); };

/**
 * Setter for property <code>key</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sKey new value for property <code>key</code>
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.setKey = function(sKey) { return new sap.m.Token(); };

/**
 * Setter for property <code>selected</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected new value for property <code>selected</code>
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.setSelected = function(bSelected) { return new sap.m.Token(); };

/**
 * Setter for property <code>text</code>.
 * 
 * Default value is <code></code>.
 * @param {string} sText new value for property <code>text</code>
 * @return {sap.m.Token} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.setText = function(sText) { return new sap.m.Token(); };


// ---- sap.m.Tokenizer --------------------------------------------------------------------------

/**
 * Constructor for a new Tokenizer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTokens tokens} : sap.m.Token[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tokenChange tokenChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Tokenizer displays multiple tokens
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Tokenizer = function(sId,mSettings) {};
/**
 * fired when the tokens aggregation changed (add / remove token)
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.type type of tokenChange event. 
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
 * @param {sap.m.Token} oControlEvent.getParameters.token the added token or removed token. 
 * This parameter is used when tokenChange type is "added" or "removed".
 * @param {sap.m.Token[]} oControlEvent.getParameters.tokens the array of removed tokens. 
 * This parameter is used when tokenChange type is "removedAll".
 * @param {sap.m.Token[]} oControlEvent.getParameters.addedTokens the array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChange".
 * @param {sap.m.Token[]} oControlEvent.getParameters.removedTokens the array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChange".
 * @public
 * 
 */
sap.m.Tokenizer.prototype.tokenChange = function(oControlEvent) {  };

/**
 * Adds some token into the aggregation named <code>tokens</code>.
 * @param {sap.m.Token}
 *            oToken the token to add; to add; if empty, nothing is inserted
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.addToken = function(oToken) { return new sap.m.Tokenizer(); };

/**
 * Function validates the given text and adds a new token if validation was successful
 * @public
 * @param {object}
 *          oParameters - parameter bag containing following fields: {sap.m.String} text - the source text {sap.m.Token}
 *          [optional] token - a suggested token {object} [optional] suggestionObject - any object used to find the
 *          suggested token {function} [optional] validationCallback - callback which gets called after validation has
 *          finished
 * 
 */
sap.m.Tokenizer.prototype.addValidateToken = function(oParameters) {  };

/**
 * Function adds an validation callback called before any new token gets added to the tokens aggregation
 * @public
 * @param {function}
 *          fValidator
 * 
 */
sap.m.Tokenizer.prototype.addValidator = function(fValidator) {  };

/**
 * Attach event handler <code>fnFunction</code> to the 'tokenChange' event of this <code>sap.m.Tokenizer</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Tokenizer</code>.<br> itself.
 * 
 * fired when the tokens aggregation changed (add / remove token)
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tokenizer</code>.<br/> itself.
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.attachTokenChange = function(oData,fnFunction,oListener) { return new sap.m.Tokenizer(); };

/**
 * Destroys all the tokens in the aggregation
 * named <code>tokens</code>.
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.destroyTokens = function() { return new sap.m.Tokenizer(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'tokenChange' event of this <code>sap.m.Tokenizer</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.detachTokenChange = function(fnFunction,oListener) { return new sap.m.Tokenizer(); };

/**
 * Creates a new subclass of class sap.m.Tokenizer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Tokenizer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event tokenChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'type' of type <code>string</code>type of tokenChange event. 
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".</li>
 * <li>'token' of type <code>sap.m.Token</code>the added token or removed token. 
 * This parameter is used when tokenChange type is "added" or "removed".</li>
 * <li>'tokens' of type <code>sap.m.Token[]</code>the array of removed tokens. 
 * This parameter is used when tokenChange type is "removedAll".</li>
 * <li>'addedTokens' of type <code>sap.m.Token[]</code>the array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChange".</li>
 * <li>'removedTokens' of type <code>sap.m.Token[]</code>the array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChange".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Tokenizer.prototype.fireTokenChange = function(mArguments) { return new sap.m.Tokenizer(); };

/**
 * Getter for property <code>editable</code>.
 * true if tokens shall be editable otherwise false
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getEditable = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Tokenizer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Tokenizer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Function returns the internally used scroll delegate
 * @public
 * @returns {sap.ui.core.delegate.ScrollEnablement}
 * 
 */
sap.m.Tokenizer.prototype.getScrollDelegate = function() { return new sap.ui.core.delegate.ScrollEnablement(); };

/**
 * Function returns the tokens' width
 * @public
 * @returns
 * 	the complete tokens' width
 * 
 */
sap.m.Tokenizer.prototype.getScrollWidth = function() {  };

/**
 * Function returns all currently selected tokens
 * @public
 * @returns {sap.m.Token[]} - array of selected tokens or empty array
 * 
 */
sap.m.Tokenizer.prototype.getSelectedTokens = function() { return new Array(); };

/**
 * Getter for aggregation <code>tokens</code>.<br/>
 * the currently displayed tokens
 * @return {sap.m.Token[]}
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getTokens = function() { return new Array(); };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the Tokenizer.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.Token</code> in the aggregation named <code>tokens</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Token}
 *           oToken the token whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Tokenizer.prototype.indexOfToken = function(oToken) { return 0; };

/**
 * Inserts a token into the aggregation named <code>tokens</code>.
 * @param {sap.m.Token}
 *            oToken the token to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the token should be inserted at; for
 *              a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the token is inserted at
 *              the last position
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.insertToken = function(oToken,iIndex) { return new sap.m.Tokenizer(); };

/**
 * Removes all the controls in the aggregation named <code>tokens</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Token[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAllTokens = function() { return new Array(); };

/**
 * Function removes all validation callbacks
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAllValidators = function() {  };

/**
 * Function removes all selected tokens
 * @public
 * @returns {sap.m.Tokenizer} - this for chaining
 * 
 */
sap.m.Tokenizer.prototype.removeSelectedTokens = function() { return new sap.m.Tokenizer(); };

/**
 * Removes an token from the aggregation named <code>tokens</code>.
 * @param {int | string | sap.m.Token} vToken the tokento remove or its index or id
 * @return {sap.m.Token} the removed token or null
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeToken = function(vToken) { return new sap.m.Token(); };

/**
 * Function removes an validation callback
 * @public
 * @param {function}
 *          fValidator
 * 
 */
sap.m.Tokenizer.prototype.removeValidator = function(fValidator) {  };

/**
 * Function scrolls the tokens to the end
 * @public
 * @param {boolean}
 *          bInitialize indicates if we should reset the 'scroll-to-end-pending' flag; if true we would reset this flag
 * 
 */
sap.m.Tokenizer.prototype.scrollToEnd = function(bInitialize) {  };

/**
 * Function scrolls the tokens to the start
 * @public
 * 
 */
sap.m.Tokenizer.prototype.scrollToStart = function() {  };

/**
 * Function selects all tokens
 * @public
 * @param {boolean}
 *          [optional] bSelect - true for selecting, false for deselecting
 * @returns {sap.m.Tokenizer} - this for chaining
 * 
 */
sap.m.Tokenizer.prototype.selectAllTokens = function(optional) { return new sap.m.Tokenizer(); };

/**
 * Setter for property <code>editable</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable new value for property <code>editable</code>
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.setEditable = function(bEditable) { return new sap.m.Tokenizer(); };

/**
 * Function sets the tokenizer's width in pixels
 * @public
 * @param {number}
 *          nWidth - the new width in pixels
 * 
 */
sap.m.Tokenizer.prototype.setPixelWidth = function(nWidth) {  };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Tokenizer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.setWidth = function(sWidth) { return new sap.m.Tokenizer(); };


// ---- sap.m.Toolbar --------------------------------------------------------------------------

/**
 * Constructor for a new Toolbar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getActive active} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getDesign design} : sap.m.ToolbarDesign</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Toolbar control is a horizontal items container that can be used to get an input from user or just to display output.
 * 
 * Note: By default, when Toolbar overflows, it provides shrinking for text controls(e.g. Text, Label) and the controls that have percentual width.(e.g. Input, Slider). This behaviour can be overwritten by providing sap.m.ToolbarLayoutData for toolbar items.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Toolbar,sap.m.IBar
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Toolbar = function(sId,mSettings) {};
/**
 * Sets classes and tag according to the context in the page. Possible contexts are header, footer, subheader
 * @returns {IBar} this for chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.applyTagAndContextClassFor = undefined

/**
 * Gets the HTML tag of the root domref
 * @returns {IBarHTMLTag} the HTML-tag
 * @protected
 * 
 */
sap.m.Toolbar.prototype.getHTMLTag = undefined

/**
 * Returns if the bar is sensitive to the container context. Implementation of the IBar interface
 * @returns {bool} isContextSensitive
 * @protected
 * 
 */
sap.m.Toolbar.prototype.isContextSensitive = undefined

/**
 * Sets the HTML tag of the root domref
 * @param {string} sTag
 * @returns {IBar} this for chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.setHTMLTag = undefined

/**
 * If "active" property is set "true" then "press" event is fired when user clicks on the toolbar.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the toolbar.
 * @public
 * 
 */
sap.m.Toolbar.prototype.press = function(oControlEvent) {  };

/**
 * Adds some content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; to add; if empty, nothing is inserted
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.addContent = function(oContent) { return new sap.m.Toolbar(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Toolbar</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.Toolbar</code>.<br> itself.
 * 
 * If "active" property is set "true" then "press" event is fired when user clicks on the toolbar.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Toolbar</code>.<br/> itself.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Toolbar(); };

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.destroyContent = function() { return new sap.m.Toolbar(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Toolbar</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Toolbar(); };

/**
 * Creates a new subclass of class sap.m.Toolbar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Toolbar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code>The control which caused the press event within the toolbar.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.firePress = function(mArguments) { return new sap.m.Toolbar(); };

/**
 * Getter for property <code>active</code>.
 * Indicates that the whole toolbar is clickable. Press event of this control is fired only if this property is set "true"
 * Note: This property should be used when there is no interactive control inside the toolbar but to make the toolbar itself interactive.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>active</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getActive = function() { return false; };

/**
 * Returns the currently applied design property of the Toolbar.
 * @returns {sap.m.ToolbarDesign}
 * @protected
 * 
 */
sap.m.Toolbar.prototype.getActiveDesign = function() { return new sap.m.ToolbarDesign(); };

/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the toolbar.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Toolbar.prototype.getContent = function() { return new Array(); };

/**
 * Getter for property <code>design</code>.
 * Defines the toolbar design. Design settings are theme-dependent and can also define the default height of the toolbar.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ToolbarDesign} the value of property <code>design</code>
 * @since 1.16.8
 * @public
 * 
 */
sap.m.Toolbar.prototype.getDesign = function() { return new sap.m.ToolbarDesign(); };

/**
 * Getter for property <code>enabled</code>.
 * Sets the enabled property of all controls defined in the content aggregation. Note: This property is not for the toolbar itself. See also the "active" property.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getEnabled = function() { return false; };

/**
 * Getter for property <code>height</code>.
 * Defines the height of the control.
 * Note: By default, the height property depends on the theme and the design property.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Toolbar.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.Toolbar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>visible</code>.
 * Sets the visibility of the control.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getVisible = function() { return false; };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the control.
 * By default the Toolbar is block element, if the the width is not explicitly set, control will simply have its own natural size.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Toolbar.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Toolbar(); };

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the contentto remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for property <code>active</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bActive new value for property <code>active</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setActive = function(bActive) { return new sap.m.Toolbar(); };

/**
 * Setter for property <code>design</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ToolbarDesign} sDesign new value for property <code>design</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @since 1.16.8
 * @public
 * 
 */
sap.m.Toolbar.prototype.setDesign = function(sDesign) { return new sap.m.Toolbar(); };

/**
 * Setter for property <code>enabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled new value for property <code>enabled</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setEnabled = function(bEnabled) { return new sap.m.Toolbar(); };

/**
 * Setter for property <code>height</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sHeight new value for property <code>height</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setHeight = function(sHeight) { return new sap.m.Toolbar(); };

/**
 * Setter for property <code>visible</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible new value for property <code>visible</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setVisible = function(bVisible) { return new sap.m.Toolbar(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setWidth = function(sWidth) { return new sap.m.Toolbar(); };


// ---- sap.m.ToolbarDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ToolbarDesign.toString = function() { return ""; };

// ---- sap.m.ToolbarLayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new ToolbarLayoutData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShrinkable shrinkable} : boolean (default: false)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Holds layout data for the toolbar items.
 * @extends sap.ui.core.LayoutData
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.20
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToolbarLayoutData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ToolbarLayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarLayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>maxWidth</code>.
 * Sets the maximum width of the toolbar item.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.ToolbarLayoutData.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ToolbarLayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>minWidth</code>.
 * Sets the minimum width of the toolbar item.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getMinWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Getter for property <code>shrinkable</code>.
 * Determines whether the control in the toolbar is shrinkable or not. If the related control has fixed width(e.g. 100px, 5rem) then this property is ignored.
 * 
 * Note: Nested layout controls should not be shrinkable.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>shrinkable</code>
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getShrinkable = function() { return false; };

/**
 * Setter for property <code>maxWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth new value for property <code>maxWidth</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.ToolbarLayoutData(); };

/**
 * Setter for property <code>minWidth</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sMinWidth new value for property <code>minWidth</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setMinWidth = function(sMinWidth) { return new sap.m.ToolbarLayoutData(); };

/**
 * Setter for property <code>shrinkable</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShrinkable new value for property <code>shrinkable</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setShrinkable = function(bShrinkable) { return new sap.m.ToolbarLayoutData(); };


// ---- sap.m.ToolbarSeparator --------------------------------------------------------------------------

/**
 * Constructor for a new ToolbarSeparator.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Creates a visual separator (theme dependent: padding, margin, line) between the preceding and succeeding toolbar item.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToolbarSeparator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ToolbarSeparator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarSeparator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ToolbarSeparator.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ToolbarSeparator.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.ToolbarSpacer --------------------------------------------------------------------------

/**
 * Constructor for a new ToolbarSpacer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control can be used to add horizontal space between toolbar items.
 * Note: ToolbarLayoutData should not be used with this control.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToolbarSpacer = function(sId,mSettings) {};
/**
 * Flexible Spacer Class Name
 * @protected
 * 
 */
sap.m.ToolbarSpacer.flexClass = undefined

/**
 * Creates a new subclass of class sap.m.ToolbarSpacer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarSpacer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ToolbarSpacer.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ToolbarSpacer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>width</code>.
 * Defines the width of the horizontal space.
 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
 * This feature can be used to push next item to the edge of the toolbar.
 * 
 * Default value is <code></code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ToolbarSpacer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Setter for property <code>width</code>.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @return {sap.m.ToolbarSpacer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarSpacer.prototype.setWidth = function(sWidth) { return new sap.m.ToolbarSpacer(); };


// ---- sap.m.touch --------------------------------------------------------------------------

/**
 * Given a list of touches, count the number of touches related with the given element.
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {jQuery | Element | string} vElement A jQuery element or an element reference or an element id.
 * @return {number} The number of touches related with the given element.
 * @public
 * 
 * @memberof sap.m.touch
 */
sap.m.touch.countContained = function(oTouchList,vElement) { return 0.0; };

/**
 * Given a list of touch objects, find the touch that matches the given one.
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {Touch | number} oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
 * @return {object | undefined} The touch matching if any.
 * @public
 * 
 * @memberof sap.m.touch
 */
sap.m.touch.find = function(oTouchList,oTouch) { return new Object(); };


// ---- sap.m.UploadCollection --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollection.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFileType fileType} : string[]</li>
 * <li>{@link #getMaximumFilenameLength maximumFilenameLength} : int</li>
 * <li>{@link #getMaximumFileSize maximumFileSize} : int</li>
 * <li>{@link #getMimeType mimeType} : string[]</li>
 * <li>{@link #getMultiple multiple} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getSameFilenameAllowed sameFilenameAllowed} : boolean (default: false)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators</li>
 * <li>{@link #getUploadEnabled uploadEnabled} : boolean (default: true)</li>
 * <li>{@link #getUploadUrl uploadUrl} : string (default: ../../../upload)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.UploadCollectionItem[]</li>
 * <li>{@link #getHeaderParameters headerParameters} : sap.m.UploadCollectionParameter[]</li>
 * <li>{@link #getParameters parameters} : sap.m.UploadCollectionParameter[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fileDeleted fileDeleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filenameLengthExceed filenameLengthExceed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fileRenamed fileRenamed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fileSizeExceed fileSizeExceed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:typeMissmatch typeMissmatch} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:uploadComplete uploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:uploadTerminated uploadTerminated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control allows users to upload single or multiple files from their device (desktop PC, tablet or phone) and attach them into the application.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollection = function(sId,mSettings) {};
/**
 * The event is triggered when files are selected.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId An unique Id of the attached document.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.change = function(oControlEvent) {  };

/**
 * The event is triggered when a fileDeleted event occurs, typically by choosing the Delete pushbutton.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId An unique Id of the attached document.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.fileDeleted = function(oControlEvent) {  };

/**
 * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId An unique Id of the attached document.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.filenameLengthExceed = function(oControlEvent) {  };

/**
 * The event is triggered when the file name is changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId An unique Id of the attached document.
 * @param {string} oControlEvent.getParameters.fileName The new file name
 * @public
 * 
 */
sap.m.UploadCollection.prototype.fileRenamed = function(oControlEvent) {  };

/**
 * The event is triggered when the file size of an uploaded file is  exceeded (only if the maxFileSize property was provided by the application).
 * This event is not supported by Internet Explorer 8 and 9.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId An unique Id of the attached document.
 * @param {string} oControlEvent.getParameters.fileSize The size in MB of a file to be uploaded.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.fileSizeExceed = function(oControlEvent) {  };

/**
 * The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId An unique Id of the attached document.
 * @param {string} oControlEvent.getParameters.fileType File type.
 * @param {string} oControlEvent.getParameters.mimeType MIME type.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.typeMissmatch = function(oControlEvent) {  };

/**
 * The event is triggered as soon as the upload request is completed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.readyStateXHR Ready state XHR.
 * @param {string} oControlEvent.getParameters.response Response.
 * @param {string} oControlEvent.getParameters.status Status.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.uploadComplete = function(oControlEvent) {  };

/**
 * The event is triggered as soon as the upload request was terminated by the user.
 * @event
 * @since 1.26.2
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.UploadCollection.prototype.uploadTerminated = function(oControlEvent) {  };

/**
 * Adds some headerParameter into the aggregation named <code>headerParameters</code>.
 * @param {sap.m.UploadCollectionParameter}
 *            oHeaderParameter the headerParameter to add; to add; if empty, nothing is inserted
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.addHeaderParameter = function(oHeaderParameter) { return new sap.m.UploadCollection(); };

/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.UploadCollectionItem}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.addItem = function(oItem) { return new sap.m.UploadCollection(); };

/**
 * Adds some parameter into the aggregation named <code>parameters</code>.
 * @param {sap.m.UploadCollectionParameter}
 *            oParameter the parameter to add; to add; if empty, nothing is inserted
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.addParameter = function(oParameter) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered when files are selected.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'fileDeleted' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered when a fileDeleted event occurs, typically by choosing the Delete pushbutton.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFileDeleted = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'filenameLengthExceed' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFilenameLengthExceed = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'fileRenamed' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered when the file name is changed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFileRenamed = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'fileSizeExceed' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered when the file size of an uploaded file is  exceeded (only if the maxFileSize property was provided by the application).
 * This event is not supported by Internet Explorer 8 and 9.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFileSizeExceed = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'typeMissmatch' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachTypeMissmatch = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'uploadComplete' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered as soon as the upload request is completed.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachUploadComplete = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'uploadTerminated' event of this <code>sap.m.UploadCollection</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.UploadCollection</code>.<br> itself.
 * 
 * The event is triggered as soon as the upload request was terminated by the user.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code>.<br/> itself.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.2
 * 
 */
sap.m.UploadCollection.prototype.attachUploadTerminated = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Destroys all the headerParameters in the aggregation
 * named <code>headerParameters</code>.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyHeaderParameters = function() { return new sap.m.UploadCollection(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyItems = function() { return new sap.m.UploadCollection(); };

/**
 * Destroys all the parameters in the aggregation
 * named <code>parameters</code>.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyParameters = function() { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'fileDeleted' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFileDeleted = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'filenameLengthExceed' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFilenameLengthExceed = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'fileRenamed' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFileRenamed = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'fileSizeExceed' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFileSizeExceed = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'typeMissmatch' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachTypeMissmatch = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'uploadComplete' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachUploadComplete = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'uploadTerminated' event of this <code>sap.m.UploadCollection</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @since 1.26.2
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachUploadTerminated = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Creates a new subclass of class sap.m.UploadCollection with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollection.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'documentId' of type <code>string</code>An unique Id of the attached document.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireChange = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event fileDeleted to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'documentId' of type <code>string</code>An unique Id of the attached document.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFileDeleted = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event filenameLengthExceed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'documentId' of type <code>string</code>An unique Id of the attached document.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFilenameLengthExceed = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event fileRenamed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'documentId' of type <code>string</code>An unique Id of the attached document.</li>
 * <li>'fileName' of type <code>string</code>The new file name</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFileRenamed = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event fileSizeExceed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'documentId' of type <code>string</code>An unique Id of the attached document.</li>
 * <li>'fileSize' of type <code>string</code>The size in MB of a file to be uploaded.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFileSizeExceed = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event typeMissmatch to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'documentId' of type <code>string</code>An unique Id of the attached document.</li>
 * <li>'fileType' of type <code>string</code>File type.</li>
 * <li>'mimeType' of type <code>string</code>MIME type.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireTypeMissmatch = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event uploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'readyStateXHR' of type <code>string</code>Ready state XHR.</li>
 * <li>'response' of type <code>string</code>Response.</li>
 * <li>'status' of type <code>string</code>Status.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireUploadComplete = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Fire event uploadTerminated to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.2
 * 
 */
sap.m.UploadCollection.prototype.fireUploadTerminated = function(mArguments) { return new sap.m.UploadCollection(); };

/**
 * Getter for property <code>fileType</code>.
 * Defines the allowed file types for the upload.
 * The chosen files will be checked against an array of file types.
 * If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
 * 
 * Default value is <code>undefined</code>
 * @return {string[]} the value of property <code>fileType</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getFileType = function() { return new Array(); };

/**
 * Getter for aggregation <code>headerParameters</code>.<br/>
 * Specifies the header parameters for the FileUploader that are submitted only with XHR requests.
 * Header parameters are not supported by Internet Explorer 8 and 9.
 * @return {sap.m.UploadCollectionParameter[]}
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getHeaderParameters = function() { return new Array(); };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * Uploaded items.
 * @return {sap.m.UploadCollectionItem[]}
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getItems = function() { return new Array(); };

/**
 * Getter for property <code>maximumFilenameLength</code>.
 * Specifies the maximum length of a file name.
 * If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>maximumFilenameLength</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMaximumFilenameLength = function() { return 0; };

/**
 * Getter for property <code>maximumFileSize</code>.
 * Specifies a file size limit in bytes that prevents the upload if at least one file exceeds the limit.
 * This property is not supported by Internet Explorer 8 and 9.
 * 
 * Default value is <code>undefined</code>
 * @return {int} the value of property <code>maximumFileSize</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMaximumFileSize = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.UploadCollection.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.UploadCollection.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>mimeType</code>.
 * Defines the allowed MIME types of files to be uploaded.
 * The chosen files will be checked against an array of MIME types.
 * If at least one file does not fit the MIME type requirements, the upload is prevented.
 * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
 * 
 * Default value is <code>undefined</code>
 * @return {string[]} the value of property <code>mimeType</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMimeType = function() { return new Array(); };

/**
 * Getter for property <code>multiple</code>.
 * Allows multiple files to be chosen and uploaded from the same folder.
 * This property is not supported by Internet Explorer 8 and 9 
 * In Release 1.26 this property is not supported in all browsers so if set to 'true' it will be ignored
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>multiple</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMultiple = function() { return false; };

/**
 * Getter for property <code>noDataText</code>.
 * Allows you to set your own text for the 'No data' label.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getNoDataText = function() { return ""; };

/**
 * Getter for aggregation <code>parameters</code>.<br/>
 * Specifies the parameters for the FileUploader that are rendered as a hidden input field.
 * @return {sap.m.UploadCollectionParameter[]}
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getParameters = function() { return new Array(); };

/**
 * Getter for property <code>sameFilenameAllowed</code>.
 * Allows the user to assign the same name when editing the file name.  “Same” refers to the existence in the list of a file with the same name.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>sameFilenameAllowed</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getSameFilenameAllowed = function() { return false; };

/**
 * Getter for property <code>showSeparators</code>.
 * Defines whether separators are shown between list items.
 * 
 * Default value is <code>undefined</code>
 * @return {sap.m.ListSeparators} the value of property <code>showSeparators</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getShowSeparators = function() { return new sap.m.ListSeparators(); };

/**
 * Getter for property <code>uploadEnabled</code>.
 * Enables the upload of a file.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>uploadEnabled</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getUploadEnabled = function() { return false; };

/**
 * Getter for property <code>uploadUrl</code>.
 * Specifies the URL where the uploaded files have to be stored.
 * 
 * Default value is <code>../../../upload</code>
 * @return {string} the value of property <code>uploadUrl</code>
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getUploadUrl = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation named <code>headerParameters</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.UploadCollectionParameter}
 *           oHeaderParameter the headerParameter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.UploadCollection.prototype.indexOfHeaderParameter = function(oHeaderParameter) { return 0; };

/**
 * Checks for the provided <code>sap.m.UploadCollectionItem</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.UploadCollectionItem}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.UploadCollection.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation named <code>parameters</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.UploadCollectionParameter}
 *           oParameter the parameter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.UploadCollection.prototype.indexOfParameter = function(oParameter) { return 0; };

/**
 * Inserts a headerParameter into the aggregation named <code>headerParameters</code>.
 * @param {sap.m.UploadCollectionParameter}
 *            oHeaderParameter the headerParameter to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the headerParameter should be inserted at; for
 *              a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the headerParameter is inserted at
 *              the last position
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.insertHeaderParameter = function(oHeaderParameter,iIndex) { return new sap.m.UploadCollection(); };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.UploadCollectionItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.insertItem = function(oItem,iIndex) { return new sap.m.UploadCollection(); };

/**
 * Inserts a parameter into the aggregation named <code>parameters</code>.
 * @param {sap.m.UploadCollectionParameter}
 *            oParameter the parameter to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the parameter should be inserted at; for
 *              a negative value of <code>iIndex</code>, the parameter is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the parameter is inserted at
 *              the last position
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.insertParameter = function(oParameter,iIndex) { return new sap.m.UploadCollection(); };

/**
 * Removes all the controls in the aggregation named <code>headerParameters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.UploadCollectionParameter[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeAllHeaderParameters = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.UploadCollectionItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>parameters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.UploadCollectionParameter[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeAllParameters = function() { return new Array(); };

/**
 * Removes an headerParameter from the aggregation named <code>headerParameters</code>.
 * @param {int | string | sap.m.UploadCollectionParameter} vHeaderParameter the headerParameterto remove or its index or id
 * @return {sap.m.UploadCollectionParameter} the removed headerParameter or null
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeHeaderParameter = function(vHeaderParameter) { return new sap.m.UploadCollectionParameter(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.UploadCollectionItem} vItem the itemto remove or its index or id
 * @return {sap.m.UploadCollectionItem} the removed item or null
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeItem = function(vItem) { return new sap.m.UploadCollectionItem(); };

/**
 * Removes an parameter from the aggregation named <code>parameters</code>.
 * @param {int | string | sap.m.UploadCollectionParameter} vParameter the parameterto remove or its index or id
 * @return {sap.m.UploadCollectionParameter} the removed parameter or null
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeParameter = function(vParameter) { return new sap.m.UploadCollectionParameter(); };

/**
 * Setter for property <code>fileType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string[]} sFileType new value for property <code>fileType</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setFileType = function(sFileType) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>maximumFilenameLength</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iMaximumFilenameLength new value for property <code>maximumFilenameLength</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMaximumFilenameLength = function(iMaximumFilenameLength) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>maximumFileSize</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {int} iMaximumFileSize new value for property <code>maximumFileSize</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMaximumFileSize = function(iMaximumFileSize) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>mimeType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string[]} sMimeType new value for property <code>mimeType</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMimeType = function(sMimeType) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>multiple</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMultiple new value for property <code>multiple</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMultiple = function(bMultiple) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>noDataText</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sNoDataText new value for property <code>noDataText</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setNoDataText = function(sNoDataText) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>sameFilenameAllowed</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSameFilenameAllowed new value for property <code>sameFilenameAllowed</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setSameFilenameAllowed = function(bSameFilenameAllowed) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>showSeparators</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {sap.m.ListSeparators} sShowSeparators new value for property <code>showSeparators</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setShowSeparators = function(sShowSeparators) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>uploadEnabled</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUploadEnabled new value for property <code>uploadEnabled</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setUploadEnabled = function(bUploadEnabled) { return new sap.m.UploadCollection(); };

/**
 * Setter for property <code>uploadUrl</code>.
 * 
 * Default value is <code>../../../upload</code>.
 * @param {string} sUploadUrl new value for property <code>uploadUrl</code>
 * @return {sap.m.UploadCollection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setUploadUrl = function(sUploadUrl) { return new sap.m.UploadCollection(); };


// ---- sap.m.UploadCollectionItem --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollectionItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContributor contributor} : string</li>
 * <li>{@link #getDocumentId documentId} : string</li>
 * <li>{@link #getFileName fileName} : string</li>
 * <li>{@link #getFileSize fileSize} : float</li>
 * <li>{@link #getMimeType mimeType} : string</li>
 * <li>{@link #getThumbnailUrl thumbnailUrl} : string</li>
 * <li>{@link #getUploadedDate uploadedDate} : string</li>
 * <li>{@link #getUrl url} : string</li>
 * <li>{@link #getEnableEdit enableEdit} : boolean (default: true)</li>
 * <li>{@link #getEnableDelete enableDelete} : boolean (default: true)</li>
 * <li>{@link #getVisibleEdit visibleEdit} : boolean (default: true)</li>
 * <li>{@link #getVisibleDelete visibleDelete} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Items provide information about the uploaded files.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.26
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollectionItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.UploadCollectionItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for property <code>contributor</code>.
 * Specifies the name of the user who uploaded the file.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>contributor</code>
 * @since 1.12.2
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getContributor = function() { return ""; };

/**
 * Getter for property <code>documentId</code>.
 * Specifies a unique identifier of the file (created by the application).
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>documentId</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getDocumentId = function() { return ""; };

/**
 * Getter for property <code>enableDelete</code>.
 * Enables/Disables the Edit pushbutton.
 * If the value is true, the Edit pushbutton is enabled and the edit function can be used.
 * If the value is false, the edit function is not available.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableDelete</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getEnableDelete = function() { return false; };

/**
 * Getter for property <code>enableEdit</code>.
 * Enables/Disables the Edit pushbutton.
 * If the value is true, the Edit pushbutton is enabled and the edit function can be used.
 * If the value is false, the edit function is not available.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableEdit</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getEnableEdit = function() { return false; };

/**
 * Getter for property <code>fileName</code>.
 * Specifies the name of the uploaded file.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>fileName</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getFileName = function() { return ""; };

/**
 * Getter for property <code>fileSize</code>.
 * Specifies the size of the uploaded file (in megabytes).
 * 
 * Default value is <code>undefined</code>
 * @return {float} the value of property <code>fileSize</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getFileSize = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.m.UploadCollectionItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>mimeType</code>.
 * Specifies the MIME type of the file.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>mimeType</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getMimeType = function() { return ""; };

/**
 * Getter for property <code>thumbnailUrl</code>.
 * Specifies the URL where the thumbnail of the file is located.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>thumbnailUrl</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getThumbnailUrl = function() { return ""; };

/**
 * Getter for property <code>uploadedDate</code>.
 * Specifies the date on which the file was uploaded.
 * The application has to define the date format.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>uploadedDate</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getUploadedDate = function() { return ""; };

/**
 * Getter for property <code>url</code>.
 * Specifies the URL where the file is located.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>url</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getUrl = function() { return ""; };

/**
 * Getter for property <code>visibleDelete</code>.
 * Show/Hide the Delete pushbutton.
 * If the value is true, the Delete pushbutton is visible.
 * If the value is false, the Delete pushbutton is not visible.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visibleDelete</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getVisibleDelete = function() { return false; };

/**
 * Getter for property <code>visibleEdit</code>.
 * Show/Hide the Edit pushbutton.
 * If the value is true, the Edit pushbutton is visible.
 * If the value is false, the Edit pushbutton is not visible.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visibleEdit</code>
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getVisibleEdit = function() { return false; };

/**
 * Setter for property <code>contributor</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sContributor new value for property <code>contributor</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @since 1.12.2
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setContributor = function(sContributor) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>documentId</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDocumentId new value for property <code>documentId</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setDocumentId = function(sDocumentId) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>enableDelete</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableDelete new value for property <code>enableDelete</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setEnableDelete = function(bEnableDelete) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>enableEdit</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableEdit new value for property <code>enableEdit</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setEnableEdit = function(bEnableEdit) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>fileName</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sFileName new value for property <code>fileName</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setFileName = function(sFileName) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>fileSize</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {float} fFileSize new value for property <code>fileSize</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setFileSize = function(fFileSize) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>mimeType</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sMimeType new value for property <code>mimeType</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setMimeType = function(sMimeType) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>thumbnailUrl</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sThumbnailUrl new value for property <code>thumbnailUrl</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setThumbnailUrl = function(sThumbnailUrl) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>uploadedDate</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sUploadedDate new value for property <code>uploadedDate</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setUploadedDate = function(sUploadedDate) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>url</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sUrl new value for property <code>url</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setUrl = function(sUrl) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>visibleDelete</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisibleDelete new value for property <code>visibleDelete</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setVisibleDelete = function(bVisibleDelete) { return new sap.m.UploadCollectionItem(); };

/**
 * Setter for property <code>visibleEdit</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisibleEdit new value for property <code>visibleEdit</code>
 * @return {sap.m.UploadCollectionItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setVisibleEdit = function(bVisibleEdit) { return new sap.m.UploadCollectionItem(); };


// ---- sap.m.UploadCollectionParameter --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollectionParameter.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Represents a parameter for the UploadCollection.
 * @extends sap.ui.core.Element
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollectionParameter = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.UploadCollectionParameter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionParameter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.UploadCollectionParameter.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionParameter.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>name</code>.
 * The name of the parameter.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @since 1.12.2
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.getName = function() { return ""; };

/**
 * Getter for property <code>value</code>.
 * The value of the parameter.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @since 1.12.2
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.getValue = function() { return ""; };

/**
 * Setter for property <code>name</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sName new value for property <code>name</code>
 * @return {sap.m.UploadCollectionParameter} <code>this</code> to allow method chaining
 * @since 1.12.2
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.setName = function(sName) { return new sap.m.UploadCollectionParameter(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sValue new value for property <code>value</code>
 * @return {sap.m.UploadCollectionParameter} <code>this</code> to allow method chaining
 * @since 1.12.2
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.setValue = function(sValue) { return new sap.m.UploadCollectionParameter(); };


// ---- sap.m.URLHelper --------------------------------------------------------------------------

/**
 * Adds an event registration for redirect
 * @param {Function} fnFunction The function to call, when the event occurs.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {Object} sap.m.URLHelper instance
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.attachRedirect = function(fnFunction,oListener) { return null; };

/**
 * Detach already registered redirect event
 * @param {Function} fnFunction The function to call, when the event occurs.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {Object} sap.m.URLHelper instance
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.detachRedirect = function(fnFunction,oListener) { return null; };

/**
 * Builds Email URI from given parameter.
 * Trims spaces from email addresses
 * @param {String} [sEmail] Destination email address.
 * @param {String} [sSubject] Subject of the email address.
 * @param {String} [sBody] Default message text.
 * @param {String} [sCC] Carbon Copy email address.
 * @param {String} [sBCC] Blind carbon copy email address.
 * @return {String} Email URI scheme.
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.normalizeEmail = function(sEmail,sSubject,sBody,sCC,sBCC) { return null; };

/**
 * Sanitize the given telephone number and returns SMS URI scheme
 * @param {String} [sTel] telephone number.
 * @return {String} SMS URI scheme.
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.normalizeSms = function(sTel) { return null; };

/**
 * Sanitize the given telephone number and returns telephone URI scheme
 * @param {String} [sTel] telephone number.
 * @return {String} telephone URI scheme.
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.normalizeTel = function(sTel) { return null; };

/**
 * Redirects to given URL
 * This method fires "redirect" event before open the URL
 * @param {String} sURL Uniform resource locator.
 * @param {boolean} [bNewWindow] Opens URL in a new browser window
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.redirect = function(sURL,bNewWindow) {  };

/**
 * Trigger email application to send email
 * Trims spaces from email addresses
 * @param {String} [sEmail] Destination email address.
 * @param {String} [sSubject] Subject of the email address.
 * @param {String} [sBody] Default message text.
 * @param {String} [sCC] Carbon Copy email address.
 * @param {String} [sBCC] Blind carbon copy email address.
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.triggerEmail = function(sEmail,sSubject,sBody,sCC,sBCC) {  };

/**
 * Trigger SMS application to send SMS to given telephone number
 * @param {String} [sTel] telephone number.
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.triggerSms = function(sTel) {  };

/**
 * Trigger telephone to call given telephone number
 * @param {String} [sTel] telephone number.
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.triggerTel = function(sTel) {  };


// ---- sap.m.VBox --------------------------------------------------------------------------

/**
 * Constructor for a new VBox.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.
 * 
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.m.FlexBox
 * @version 1.26.9
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.VBox = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.VBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.VBox.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.VBox.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.ViewSettingsCustomItem --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsCustomItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFilterCount filterCount} : int (default: 0)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomControl customControl} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ViewSettingsCustomItem is used for modelling custom filters in the ViewSettingsDialog.
 * @extends sap.m.ViewSettingsItem
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsCustomItem = function(sId,mSettings) {};
/**
 * Destroys the customControl in the aggregation
 * named <code>customControl</code>.
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.destroyCustomControl = function() { return new sap.m.ViewSettingsCustomItem(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsCustomItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>customControl</code>.<br/>
 * A custom control for the filter field. It can be used for complex filtering mechanisms.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.getCustomControl = function() { return new sap.ui.core.Control(); };

/**
 * Getter for property <code>filterCount</code>.
 * The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
 * 
 * Default value is <code>0</code>
 * @return {int} the value of property <code>filterCount</code>
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.getFilterCount = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.ViewSettingsCustomItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Setter for the aggregated <code>customControl</code>.
 * @param {sap.ui.core.Control} oCustomControl the customControl to set
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.setCustomControl = function(oCustomControl) { return new sap.m.ViewSettingsCustomItem(); };

/**
 * Setter for property <code>filterCount</code>.
 * 
 * Default value is <code>0</code>.
 * @param {int} iFilterCount new value for property <code>filterCount</code>
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.setFilterCount = function(iFilterCount) { return new sap.m.ViewSettingsCustomItem(); };


// ---- sap.m.ViewSettingsDialog --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSortDescending sortDescending} : boolean (default: false)</li>
 * <li>{@link #getGroupDescending groupDescending} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSortItems sortItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getGroupItems groupItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getFilterItems filterItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getPresetFilterItems presetFilterItems} : sap.m.ViewSettingsItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:resetFilters resetFilters} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ViewSettingsDialog provides functionality to easily select the options for sorting, grouping, and filtering data. It is a composite control, consisting of a modal popover and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respecive associations. If only one assication is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.
 * @extends sap.ui.core.Control
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsDialog = function(sId,mSettings) {};
/**
 * Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.sortItem Selected sort item.
 * @param {boolean} oControlEvent.getParameters.sortDescending Selected sort order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.groupItem Selected group item
 * @param {boolean} oControlEvent.getParameters.groupDescending Selected group order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.presetFilterItem Selected preset filter item.
 * @param {sap.m.ViewSettingsItem[]} oControlEvent.getParameters.filterItems Selected filters in an array of ViewSettingsItem.
 * @param {object} oControlEvent.getParameters.filterKeys Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {string} oControlEvent.getParameters.filterString Selected filter items in string format to display in a control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.resetFilters = function(oControlEvent) {  };

/**
 * Adds some filterItem into the aggregation named <code>filterItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem to add; to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.addFilterItem = function(oFilterItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds a group item and sets the association to reflect the selected state
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addGroupItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds a preset filter item and sets the association to reflect the selected
 * state
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addPresetFilterItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds a sort item and sets the association to reflect the selected state
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addSortItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Forward method to the inner dialog: addStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addStyleClass = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br> itself.
 * 
 * Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br> itself.
 * 
 * The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Attach event handler <code>fnFunction</code> to the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br> itself.
 * 
 * Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachResetFilters = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binder for aggregation <code>filterItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindFilterItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binder for aggregation <code>groupItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindGroupItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binder for aggregation <code>presetFilterItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindPresetFilterItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binder for aggregation <code>sortItems</code>.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo the binding information
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindSortItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the filterItems in the aggregation
 * named <code>filterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the groupItems in the aggregation
 * named <code>groupItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyGroupItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the presetFilterItems in the aggregation
 * named <code>presetFilterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyPresetFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the sortItems in the aggregation
 * named <code>sortItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroySortItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Detach event handler <code>fnFunction</code> from the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * 
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachResetFilters = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireCancel = function(mArguments) { return new sap.m.ViewSettingsDialog(); };

/**
 * Fire event confirm to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'sortItem' of type <code>sap.m.ViewSettingsItem</code>Selected sort item.</li>
 * <li>'sortDescending' of type <code>boolean</code>Selected sort order (true = descending, false = ascending).</li>
 * <li>'groupItem' of type <code>sap.m.ViewSettingsItem</code>Selected group item</li>
 * <li>'groupDescending' of type <code>boolean</code>Selected group order (true = descending, false = ascending).</li>
 * <li>'presetFilterItem' of type <code>sap.m.ViewSettingsItem</code>Selected preset filter item.</li>
 * <li>'filterItems' of type <code>sap.m.ViewSettingsItem[]</code>Selected filters in an array of ViewSettingsItem.</li>
 * <li>'filterKeys' of type <code>object</code>Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.</li>
 * <li>'filterString' of type <code>string</code>Selected filter items in string format to display in a control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.ViewSettingsDialog(); };

/**
 * Fire event resetFilters to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireResetFilters = function(mArguments) { return new sap.m.ViewSettingsDialog(); };

/**
 * Forward method to the inner dialog: getDomRef
 * @public
 * @override
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * 
 */
sap.m.ViewSettingsDialog.prototype.getDomRef = function() { return null; };

/**
 * Getter for aggregation <code>filterItems</code>.<br/>
 * List of items with key and value that can be filtered on (e.g. a list of columns for a table). A filterItem is associated with one or more detail filters.
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getFilterItems = function() { return new Array(); };

/**
 * Getter for property <code>groupDescending</code>.
 * If set to true, the group order is descending, otherwise ascending (default).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>groupDescending</code>
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getGroupDescending = function() { return false; };

/**
 * Getter for aggregation <code>groupItems</code>.<br/>
 * List of items with key and value that can be grouped on (e.g. a list of columns for a table).
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getGroupItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ViewSettingsDialog.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for aggregation <code>presetFilterItems</code>.<br/>
 * List of preset filter items that allow the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getPresetFilterItems = function() { return new Array(); };

/**
 * Returns the selected filters in an array of ViewSettingsItem.
 * @overwrite
 * @public
 * @return {sap.m.ViewSettingsItem[]} an array of selected filter items
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterItems = function() { return new Array(); };

/**
 * Get the selected filter object in format {key: boolean}
 * @public
 * @return {object} an object with item and subitem keys
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterKeys = function() { return new Object(); };

/**
 * Returns the selected filters as an array of ViewSettingsItems. It can be used to create matching sorters and filters to apply the selected settings to the data.
 * @type sap.m.ViewSettingsItem[]
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilters = function() { return new Array(); };

/**
 * Get the filter string in the format "filter name (subfilter1 name, subfilter2
 * name, ...), ..." For custom filters and preset filters it will only add the
 * filter name to the resulting string
 * @public
 * @return {string} the selected filter string
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterString = function() { return ""; };

/**
 * Id of the element which is the current target of the <code>selectedGroupItem</code> association, or null
 * 
 * Group item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedGrouptItem"
 * @return {sap.m.ViewSettingsItem}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedGroupItem = function() { return new sap.m.ViewSettingsItem(); };

/**
 * Id of the element which is the current target of the <code>selectedPresetFilterItem</code> association, or null
 * 
 * Preset filter item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedPresetFilterItem". Note that either a preset filter OR multiple detail filters can be active at the same time.
 * @return {sap.m.ViewSettingsItem}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedPresetFilterItem = function() { return new sap.m.ViewSettingsItem(); };

/**
 * Id of the element which is the current target of the <code>selectedSortItem</code> association, or null
 * 
 * Sort item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedSortItem"
 * @return {sap.m.ViewSettingsItem}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedSortItem = function() { return new sap.m.ViewSettingsItem(); };

/**
 * Getter for property <code>sortDescending</code>.
 * If set to true, the sort order is descending, otherwise ascending (default).
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>sortDescending</code>
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSortDescending = function() { return false; };

/**
 * Getter for aggregation <code>sortItems</code>.<br/>
 * List of items with key and value that can be sorted over (e.g. a list of columns for a table).
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSortItems = function() { return new Array(); };

/**
 * Getter for property <code>title</code>.
 * Title of the dialog. If not set, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively if there is only one active tab.
 * 
 * Default value is <code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getTitle = function() { return ""; };

/**
 * Forward method to the inner dialog: hasStyleClass
 * @public
 * @override
 * @returns {boolean} true if the class is set, false otherwise
 * 
 */
sap.m.ViewSettingsDialog.prototype.hasStyleClass = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>filterItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oFilterItem the filterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfFilterItem = function(oFilterItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>groupItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oGroupItem the groupItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfGroupItem = function(oGroupItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>presetFilterItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oPresetFilterItem the presetFilterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfPresetFilterItem = function(oPresetFilterItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>sortItems</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oSortItem the sortItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfSortItem = function(oSortItem) { return 0; };

/**
 * Inserts a filterItem into the aggregation named <code>filterItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the filterItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the filterItem is inserted at
 *              the last position
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertFilterItem = function(oFilterItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a groupItem into the aggregation named <code>groupItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oGroupItem the groupItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the groupItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the groupItem is inserted at
 *              the last position
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertGroupItem = function(oGroupItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a presetFilterItem into the aggregation named <code>presetFilterItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oPresetFilterItem the presetFilterItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the presetFilterItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the presetFilterItem is inserted at
 *              the last position
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertPresetFilterItem = function(oPresetFilterItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a sortItem into the aggregation named <code>sortItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oSortItem the sortItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the sortItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the sortItem is inserted at
 *              the last position
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertSortItem = function(oSortItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Opens the view settings dialog relative to the parent control
 * @public
 * @param {sap.ui.core.Control}
 *            oParentControl the parent control
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.open = function(oParentControl) { return new sap.m.ViewSettingsDialog(); };

/**
 * Removes all the controls in the aggregation named <code>filterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllFilterItems = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>groupItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllGroupItems = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>presetFilterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllPresetFilterItems = function() { return new Array(); };

/**
 * Removes all the controls in the aggregation named <code>sortItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllSortItems = function() { return new Array(); };

/**
 * Removes an filterItem from the aggregation named <code>filterItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vFilterItem the filterItemto remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed filterItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeFilterItem = function(vFilterItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Removes an groupItem from the aggregation named <code>groupItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vGroupItem the groupItemto remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed groupItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeGroupItem = function(vGroupItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Removes an presetFilterItem from the aggregation named <code>presetFilterItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vPresetFilterItem the presetFilterItemto remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed presetFilterItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removePresetFilterItem = function(vPresetFilterItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Removes an sortItem from the aggregation named <code>sortItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vSortItem the sortItemto remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed sortItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeSortItem = function(vSortItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Forward method to the inner dialog: removeStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeStyleClass = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Setter for property <code>groupDescending</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGroupDescending new value for property <code>groupDescending</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setGroupDescending = function(bGroupDescending) { return new sap.m.ViewSettingsDialog(); };

/**
 * Set the selected filter object in format {key: boolean}
 * @public
 * @param {object}
 *            oSelectedFilterKeys an object with filter item and sub keys
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedFilterKeys = function(oSelectedFilterKeys) { return new sap.m.ViewSettingsDialog(); };

/**
 * Set the selected group item (either by key or by item)
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedGroupItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Set the selected preset filter item
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedPresetFilterItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Set the selected sort item (either by key or by item)
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedSortItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Setter for property <code>sortDescending</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSortDescending new value for property <code>sortDescending</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSortDescending = function(bSortDescending) { return new sap.m.ViewSettingsDialog(); };

/**
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string}
 *            sTitle the title text for the dialog
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setTitle = function(sTitle) { return new sap.m.ViewSettingsDialog(); };

/**
 * Forward method to the inner dialog: toggleStyleClass
 * @public
 * @override
 * @returns {this} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.toggleStyleClass = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinder for aggregation <code>filterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinder for aggregation <code>groupItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindGroupItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinder for aggregation <code>presetFilterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindPresetFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinder for aggregation <code>sortItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindSortItems = function() { return new sap.m.ViewSettingsDialog(); };


// ---- sap.m.ViewSettingsFilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsFilterItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ViewSettingsItem[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A ViewSettingsFilterItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.
 * @extends sap.m.ViewSettingsItem
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsFilterItem = function(sId,mSettings) {};
/**
 * Adds some item into the aggregation named <code>items</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to add; to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.addItem = function(oItem) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Destroys all the items in the aggregation
 * named <code>items</code>.
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.destroyItems = function() { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsFilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ViewSettingsFilterItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsFilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>multiSelect</code>.
 * If set to (true), multi selection will be allowed for the items aggregation.
 * 
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.getMultiSelect = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>items</code>.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vItem the itemto remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed item or null
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.removeItem = function(vItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Setter for property <code>multiSelect</code>.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bMultiSelect new value for property <code>multiSelect</code>
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.setMultiSelect = function(bMultiSelect) { return new sap.m.ViewSettingsFilterItem(); };


// ---- sap.m.ViewSettingsItem --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.
 * @extends sap.ui.core.Item
 * @version 1.26.9
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ViewSettingsItem.
 * @return {sap.ui.base.Metadata} metadata object describing thi class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>selected</code>.
 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
 * 
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.getSelected = function() { return false; };

/**
 * Setter for property <code>selected</code>.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected new value for property <code>selected</code>
 * @return {sap.m.ViewSettingsItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.setSelected = function(bSelected) { return new sap.m.ViewSettingsItem(); };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- sap.m --------------------------------------------------------------------------

/**
 * Hide the soft keyboard
 * @public
 * @since 1.20
 * 
 * @memberof sap.m
 */
sap.m.prototype.closeKeyboard = undefined;

/**
 * Search given control's parents and try to find iScroll
 * @param {sap.ui.core.Control} oControl
 * @return {iScroll|undefined} iScroll reference or undefined if cannot find
 * @public
 * @since 1.11
 * 
 * @memberof sap.m
 */
sap.m.prototype.getIScroll = undefined;

/**
 * Search given control's parents and try to find ScrollDelegate
 * @param {sap.ui.core.Control} oControl
 * @return {Object|undefined} ScrollDelegate or undefined if cannot find
 * @public
 * @since 1.11
 * 
 * @memberof sap.m
 */
sap.m.prototype.getScrollDelegate = undefined;

/**
 * Suggestion helper for sap.m.Input fields: Creates a multi column suggest list for a sap.m.Input field based on a ValueList 
 * annotation. The ValueList annotation will be resolved via the binding information of the Input field.
 * 
 * If the annotation describes multiple input parameter the suggest provider will resolve all of these relative to the 
 * context of the Input filed and use them for the suggestion query. The suggest provider will write all values that are
 * described as output parameters back to the model (relative to the context of the Input field). This can only be done if 
 * the model runs in "TwoWay" binding mode. Both features can be switched of via the bResolveInput/bResolveOutput parameter
 * of the suggest function:
 * @param {event} oEvent
 * @param {boolean} bResolveInput SuggestProvider resolves all input parameters for the data query
 * @param {boolean} bResolveOutput SuggestProvider writes back all output parameters.
 * @param {int} iLength If iLength is provided only these number of entries will be requested.
 * @since 1.21.2
 * @public
 * 
 * @memberof sap.m
 */
sap.m.InputODataSuggestProvider = undefined;

/**
 * <pre>
 * <code>sap.m.Support</code> shows the technical information for SAPUI5 Mobile Applications.
 * This technical information includes
 * 	* SAPUI5 Version
 * 	* User Agent
 * 	* Configurations (Bootstrap and Computed)
 * 	* URI parameters
 * 	* All loaded module names
 * 
 * In order to show the device information, the user must follow the following gestures.
 * 	1 - Hold two finger for 3 seconds minimum.
 * 	2 - Tab with a third finger while holding the first two fingers.
 * 
 * NOTE: This class is internal and all its functions must not be used by an application
 * 
 * As <code>sap.m.Support</code> is a static class, a <code>jQuery.sap.require("sap.m.Support");</code>
 * statement must be implicitly executed before the class is used.
 * 
 * 
 * Enable Support:
 * --------------------------------------------------
 * //import library
 * jQuery.sap.require("sap.m.Support");
 * 
 * //By default after require, support is enabled but implicitly we can call
 * sap.m.Support.on();
 * 
 * Disable Support:
 * --------------------------------------------------
 * sap.m.Support.off();
 * </pre>
 * @since 1.11.0
 * @static
 * @protected
 * 
 * @memberof sap.m
 */
sap.m.Support = undefined;


// ---- sap.m.BackgroundDesign --------------------------------------------------------------------------

/**
 * A solid background color dependent on the theme.
 * @public
 * 
 */
sap.m.BackgroundDesign.Solid = "";

/**
 * A translucent background depending on the opacity value of the theme.
 * @public
 * 
 */
sap.m.BackgroundDesign.Translucent = "";

/**
 * Transparent background.
 * @public
 * 
 */
sap.m.BackgroundDesign.Transparent = "";


// ---- sap.m.BarDesign --------------------------------------------------------------------------

/**
 * The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.
 * @public
 * 
 */
sap.m.BarDesign.Auto = "";

/**
 * The bar will be styled like a footer of the page.
 * @public
 * 
 */
sap.m.BarDesign.Footer = "";

/**
 * The bar will be styled like a header of the page.
 * @public
 * 
 */
sap.m.BarDesign.Header = "";

/**
 * The bar will be styled like a subheader of the page.
 * @public
 * 
 */
sap.m.BarDesign.SubHeader = "";


// ---- sap.m.ButtonType --------------------------------------------------------------------------

/**
 * accept type (blue button)
 * @public
 * 
 */
sap.m.ButtonType.Accept = "";

/**
 * back type (back navigation button for header)
 * @public
 * 
 */
sap.m.ButtonType.Back = "";

/**
 * default type (no special styling)
 * @public
 * 
 */
sap.m.ButtonType.Default = "";

/**
 * emphasized type
 * @public
 * 
 */
sap.m.ButtonType.Emphasized = "";

/**
 * reject style (red button)
 * @public
 * 
 */
sap.m.ButtonType.Reject = "";

/**
 * transparent type
 * @public
 * 
 */
sap.m.ButtonType.Transparent = "";

/**
 * Unstyled type (no styling)
 * @public
 * 
 */
sap.m.ButtonType.Unstyled = "";

/**
 * up type (up navigation button for header)
 * @public
 * 
 */
sap.m.ButtonType.Up = "";


// ---- sap.m.DateTimeInputType --------------------------------------------------------------------------

/**
 * An input control for specifying a date value. The user can select a month, day of the month, and year.
 * @public
 * @deprecated Since version 1.22. 
 * Instead, use dedicated sap.m.DatePicker control.
 * 
 */
sap.m.DateTimeInputType.Date = "";

/**
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
 * @public
 * 
 */
sap.m.DateTimeInputType.DateTime = "";

/**
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
 * @public
 * 
 */
sap.m.DateTimeInputType.Time = "";


// ---- sap.m.DialogType --------------------------------------------------------------------------

/**
 * Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS.
 * @public
 * 
 */
sap.m.DialogType.Message = "";

/**
 * This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog.
 * @public
 * 
 */
sap.m.DialogType.Standard = "";


// ---- sap.m.FacetFilterListDataType --------------------------------------------------------------------------

/**
 * >An input control for specifying a Boolean value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Boolean = "";

/**
 * An input control for specifying a date value. The user can select a month, day of the month, and year.
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Date = "";

/**
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
 * @public
 * 
 */
sap.m.FacetFilterListDataType.DateTime = "";

/**
 * >An input control for specifying a Float value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Float = "";

/**
 * >An input control for specifying a Integer value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Integer = "";

/**
 * >An input control for specifying a String value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.String = "";

/**
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Time = "";


// ---- sap.m.FacetFilterType --------------------------------------------------------------------------

/**
 * Forces FacetFilter to display in light mode.
 * @public
 * 
 */
sap.m.FacetFilterType.Light = "";

/**
 * Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.
 * @public
 * 
 */
sap.m.FacetFilterType.Simple = "";


// ---- sap.m.FlexAlignItems --------------------------------------------------------------------------

/**
 * If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.Baseline = "";

/**
 * The box items' margin boxes are centered in the cross axis within the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.Center = "";

/**
 * The cross-start margin edges of the box items are placed flush with the cross-end edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexAlignItems.Inherit = "";

/**
 * The cross-start margin edges of the box items are placed flush with the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.Start = "";

/**
 * Make the cross size of the items' margin boxes as close to the same size as the line as possible.
 * @public
 * 
 */
sap.m.FlexAlignItems.Stretch = "";


// ---- sap.m.FlexAlignSelf --------------------------------------------------------------------------

/**
 * Takes up the value of alignItems from the parent FlexBox
 * @public
 * 
 */
sap.m.FlexAlignSelf.Auto = "";

/**
 * If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Baseline = "";

/**
 * The box item's margin box is centered in the cross axis within the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Center = "";

/**
 * The cross-start margin edges of the box item is placed flush with the cross-end edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Inherit = "";

/**
 * The cross-start margin edges of the box item is placed flush with the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Start = "";

/**
 * Make the cross size of the item's margin box as close to the same size as the line as possible.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Stretch = "";


// ---- sap.m.FlexDirection --------------------------------------------------------------------------

/**
 * Elements are layed out along the direction of the block axis (usually top to bottom).
 * @public
 * 
 */
sap.m.FlexDirection.Column = "";

/**
 * Elements are layed out along the reverse direction of the block axis (usually bottom to top).
 * @public
 * 
 */
sap.m.FlexDirection.ColumnReverse = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexDirection.Inherit = "";

/**
 * Elements are layed out along the direction of the inline axis (text direction).
 * @public
 * 
 */
sap.m.FlexDirection.Row = "";

/**
 * Elements are layed out along the reverse direction of the inline axis (against the text direction).
 * @public
 * 
 */
sap.m.FlexDirection.RowReverse = "";


// ---- sap.m.FlexJustifyContent --------------------------------------------------------------------------

/**
 * Box items are packed toward the center of the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.Center = "";

/**
 * Box items are packed toward the end of the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexJustifyContent.Inherit = "";

/**
 * Box items are evenly distributed in the line, with half-size spaces on either end.
 * @public
 * 
 */
sap.m.FlexJustifyContent.SpaceAround = "";

/**
 * Box items are evenly distributed in the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.SpaceBetween = "";

/**
 * Box items are packed toward the start of the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.Start = "";


// ---- sap.m.FlexRendertype --------------------------------------------------------------------------

/**
 * DIV elements are used for rendering
 * @public
 * 
 */
sap.m.FlexRendertype.Div = "";

/**
 * Unordered lists are used for rendering.
 * @public
 * 
 */
sap.m.FlexRendertype.List = "";


// ---- sap.m.HeaderLevel --------------------------------------------------------------------------

/**
 * Header level 1
 * @public
 * 
 */
sap.m.HeaderLevel.H1 = "";

/**
 * Header level 2
 * @public
 * 
 */
sap.m.HeaderLevel.H2 = "";

/**
 * Header level 3
 * @public
 * 
 */
sap.m.HeaderLevel.H3 = "";

/**
 * Header level 4
 * @public
 * 
 */
sap.m.HeaderLevel.H4 = "";

/**
 * Header level 5
 * @public
 * 
 */
sap.m.HeaderLevel.H5 = "";

/**
 * Header level 6
 * @public
 * 
 */
sap.m.HeaderLevel.H6 = "";


// ---- sap.m.IBarHTMLTag --------------------------------------------------------------------------

/**
 * Renders as a div element.
 * @public
 * 
 */
sap.m.IBarHTMLTag.Div = "";

/**
 * Renders as a footer element.
 * @public
 * 
 */
sap.m.IBarHTMLTag.Footer = "";

/**
 * Renders as a header element.
 * @public
 * 
 */
sap.m.IBarHTMLTag.Header = "";


// ---- sap.m.IconTabFilterDesign --------------------------------------------------------------------------

/**
 * A horizontally layouted design providing more space for texts.
 * @public
 * 
 */
sap.m.IconTabFilterDesign.Horizontal = "";

/**
 * A vertically layouted design using minimum horizontal space.
 * @public
 * 
 */
sap.m.IconTabFilterDesign.Vertical = "";


// ---- sap.m.InputType --------------------------------------------------------------------------

/**
 * An input control for specifying a date value. The user can select a month, day of the month, and year.
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use sap.m.DateTimeInput control with type "Date" to create date input.
 * 
 */
sap.m.InputType.Date = "";

/**
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
 * 
 */
sap.m.InputType.Datetime = "";

/**
 * An input control for specifying a date and time value where the format depends on the locale.
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
 * 
 */
sap.m.InputType.DatetimeLocale = "";

/**
 * A text field for specifying an email address. Brings up a keyboard optimized for email address entry.
 * @public
 * 
 */
sap.m.InputType.Email = "";

/**
 * An input control for selecting a month.
 * @public
 * @deprecated Since version 1.9.1. 
 * There is no cross-platform support. Please do not use this Input type.
 * 
 */
sap.m.InputType.Month = "";

/**
 * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type.
 * @public
 * 
 */
sap.m.InputType.Number = "";

/**
 * Password input where the user entry cannot be seen.
 * @public
 * 
 */
sap.m.InputType.Password = "";

/**
 * A text field for specifying a phone number. Brings up a phone pad keyboard.
 * @public
 * 
 */
sap.m.InputType.Tel = "";

/**
 * default (text)
 * @public
 * 
 */
sap.m.InputType.Text = "";

/**
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use dedicated sap.m.DateTimeInput control with type "Time" to create time input.
 * 
 */
sap.m.InputType.Time = "";

/**
 * A text field for specifying a URL. Brings up a keyboard optimized for URL entry.
 * @public
 * 
 */
sap.m.InputType.Url = "";

/**
 * An input control for selecting a week.
 * @public
 * @deprecated Since version 1.9.1. 
 * There is no cross-platform support. Please do not use this Input type.
 * 
 */
sap.m.InputType.Week = "";


// ---- sap.m.LabelDesign --------------------------------------------------------------------------

/**
 * Displays the label in bold.
 * @public
 * 
 */
sap.m.LabelDesign.Bold = "";

/**
 * Displays the label in normal mode.
 * @public
 * 
 */
sap.m.LabelDesign.Standard = "";


// ---- sap.m.ListHeaderDesign --------------------------------------------------------------------------

/**
 * Plain header style
 * @public
 * 
 */
sap.m.ListHeaderDesign.Plain = "";

/**
 * Standard header style
 * @public
 * 
 */
sap.m.ListHeaderDesign.Standard = "";


// ---- sap.m.ListMode --------------------------------------------------------------------------

/**
 * delete mode (only one list item can be deleted)
 * @public
 * 
 */
sap.m.ListMode.Delete = "";

/**
 * multi selection mode (whole list item including checkbox will be selected)
 * @public
 * 
 */
sap.m.ListMode.MultiSelect = "";

/**
 * default mode (no selection)
 * @public
 * 
 */
sap.m.ListMode.None = "";

/**
 * right positioned single selection mode (only one list item can be selected)
 * @public
 * 
 */
sap.m.ListMode.SingleSelect = "";

/**
 * left positioned single selection mode (only one list item can be selected)
 * @public
 * 
 */
sap.m.ListMode.SingleSelectLeft = "";

/**
 * Single selection master mode (only one list item can be selected), selected item is highlighted but no radiobutton is visible.
 * @public
 * 
 */
sap.m.ListMode.SingleSelectMaster = "";


// ---- sap.m.ListSeparators --------------------------------------------------------------------------

/**
 * Separators around the items.
 * @public
 * 
 */
sap.m.ListSeparators.All = "";

/**
 * Separators between the items when there is no footer. Note: This enumeration depends on the theme. Please check design documentation for more details.
 * @public
 * 
 */
sap.m.ListSeparators.Inner = "";

/**
 * No item separators.
 * @public
 * 
 */
sap.m.ListSeparators.None = "";


// ---- sap.m.ListType --------------------------------------------------------------------------

/**
 * Active
 * @public
 * 
 */
sap.m.ListType.Active = "";

/**
 * Detail
 * @public
 * 
 */
sap.m.ListType.Detail = "";

/**
 * DetailAndActive
 * @public
 * 
 */
sap.m.ListType.DetailAndActive = "";

/**
 * Inactive
 * @public
 * 
 */
sap.m.ListType.Inactive = "";

/**
 * Navigation
 * @public
 * 
 */
sap.m.ListType.Navigation = "";


// ---- sap.m.MessageBox.Action --------------------------------------------------------------------------

/**
 * Adds an "Abort" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.ABORT = undefined;

/**
 * Adds a "Cancel" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.CANCEL = undefined;

/**
 * Adds a "Close" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.CLOSE = undefined;

/**
 * Adds a "Delete" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.DELETE = undefined;

/**
 * Adds an "Ignore" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.IGNORE = undefined;

/**
 * Adds a "No" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.NO = undefined;

/**
 * Adds an "OK" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.OK = undefined;

/**
 * Adds a "Retry" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.RETRY = undefined;

/**
 * Adds a "Yes" button to the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.YES = undefined;


// ---- sap.m.MessageBox.Icon --------------------------------------------------------------------------

/**
 * Shows the error icon in the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.ERROR = undefined;

/**
 * Shows the information icon in the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.INFORMATION = undefined;

/**
 * Shows no icon in the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.NONE = undefined;

/**
 * Shows the question icon in the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.QUESTION = undefined;

/**
 * Shows the success icon in the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.SUCCESS = undefined;

/**
 * Shows the warning icon in the message box.
 * @public
 * 
 * @memberof sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.WARNING = undefined;


// ---- sap.m.P13nPanelType --------------------------------------------------------------------------

/**
 * Color: blue (#b8d0e8)
 * @public
 * 
 */
sap.m.P13nPanelType.columns = "";

/**
 * Color: blue (#b8d0e8)
 * @public
 * 
 */
sap.m.P13nPanelType.filter = "";

/**
 * Color: blue (#b8d0e8)
 * @public
 * 
 */
sap.m.P13nPanelType.group = "";

/**
 * Color: blue (#b8d0e8)
 * @public
 * 
 */
sap.m.P13nPanelType.sort = "";


// ---- sap.m.PageBackgroundDesign --------------------------------------------------------------------------

/**
 * Page background color when a List is set as the Page content.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.List = "";

/**
 * A solid background color dependent on the theme.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.Solid = "";

/**
 * Standard Page background color.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.Standard = "";

/**
 * Transparent background for the page.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.Transparent = "";


// ---- sap.m.PlacementType --------------------------------------------------------------------------

/**
 * Popover will be placed automatically at the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Auto = "";

/**
 * Popover will be placed at the bottom of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Bottom = "";

/**
 * Popover will be placed at the right or left side of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Horizontal = "";

/**
 * Popover will be placed at the left side of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Left = "";

/**
 * Popover will be placed at the right side of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Right = "";

/**
 * Popover will be placed at the top of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Top = "";

/**
 * Popover will be placed at the top or bottom of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Vertical = "";


// ---- sap.m.PopinDisplay --------------------------------------------------------------------------

/**
 * Inside the table popin, header is displayed in first line and value field is displayed in next line.
 * @public
 * 
 */
sap.m.PopinDisplay.Block = "";

/**
 * Inside the table popin, value field is displayed next to the header in the same line. Note: If there is no enough space for the value field then goes to next line.
 * @public
 * 
 */
sap.m.PopinDisplay.Inline = "";


// ---- sap.m.RatingIndicatorVisualMode --------------------------------------------------------------------------

/**
 * Values are rounded to the nearest integer value (e.g. 1.7 -> 2).
 * @public
 * 
 */
sap.m.RatingIndicatorVisualMode.Full = "";

/**
 * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).
 * @public
 * 
 */
sap.m.RatingIndicatorVisualMode.Half = "";


// ---- sap.m.ScreenSize --------------------------------------------------------------------------

/**
 * 1024px wide
 * @public
 * 
 */
sap.m.ScreenSize.Desktop = "";

/**
 * 768px wide
 * @public
 * 
 */
sap.m.ScreenSize.Large = "";

/**
 * 560px wide
 * @public
 * 
 */
sap.m.ScreenSize.Medium = "";

/**
 * 240px wide
 * @public
 * 
 */
sap.m.ScreenSize.Phone = "";

/**
 * 480px wide
 * @public
 * 
 */
sap.m.ScreenSize.Small = "";

/**
 * 600px wide
 * @public
 * 
 */
sap.m.ScreenSize.Tablet = "";

/**
 * 960px wide
 * @public
 * 
 */
sap.m.ScreenSize.XLarge = "";

/**
 * 320px wide
 * @public
 * 
 */
sap.m.ScreenSize.XSmall = "";

/**
 * 1120px wide
 * @public
 * 
 */
sap.m.ScreenSize.XXLarge = "";

/**
 * 240px wide
 * @public
 * 
 */
sap.m.ScreenSize.XXSmall = "";


// ---- sap.m.SelectType --------------------------------------------------------------------------

/**
 * Will show the text.
 * @public
 * 
 */
sap.m.SelectType.Default = "";

/**
 * Will show only the specified icon.
 * @public
 * 
 */
sap.m.SelectType.IconOnly = "";


// ---- sap.m.SplitAppMode --------------------------------------------------------------------------

/**
 * Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.
 * @public
 * 
 */
sap.m.SplitAppMode.HideMode = "";

/**
 * Master will be shown inside a Popover when in portrait mode
 * @public
 * 
 */
sap.m.SplitAppMode.PopoverMode = "";

/**
 * Master will automatically be hidden in portrait mode.
 * @public
 * 
 */
sap.m.SplitAppMode.ShowHideMode = "";

/**
 * Master will always be shown but in a compressed version when in portrait mode.
 * @public
 * 
 */
sap.m.SplitAppMode.StretchCompressMode = "";


// ---- sap.m.StandardTileType --------------------------------------------------------------------------

/**
 * Tile representing that something needs to be created
 * @public
 * 
 */
sap.m.StandardTileType.Create = "";

/**
 * Monitor tile
 * @public
 * 
 */
sap.m.StandardTileType.Monitor = "";

/**
 * Default type
 * @public
 * 
 */
sap.m.StandardTileType.None = "";


// ---- sap.m.SwipeDirection --------------------------------------------------------------------------

/**
 * Both directions (left to right or right to left)
 * @public
 * 
 */
sap.m.SwipeDirection.Both = "";

/**
 * Swipe from left to right
 * @public
 * 
 */
sap.m.SwipeDirection.LeftToRight = "";

/**
 * Swipe from right to left.
 * @public
 * 
 */
sap.m.SwipeDirection.RightToLeft = "";


// ---- sap.m.SwitchType --------------------------------------------------------------------------

/**
 * Switch with accept and reject icons
 * @public
 * 
 */
sap.m.SwitchType.AcceptReject = "";

/**
 * Will show "ON" and "OFF" translated to the current language or the custom text if provided
 * @public
 * 
 */
sap.m.SwitchType.Default = "";


// ---- sap.m.ToolbarDesign --------------------------------------------------------------------------

/**
 * The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.
 * @public
 * 
 */
sap.m.ToolbarDesign.Auto = "";

/**
 * The toolbar appears smaller than the regular size to show information(e.g: text, icon).
 * @public
 * 
 */
sap.m.ToolbarDesign.Info = "";

/**
 * The toolbar has a solid background. Its content will be rendered in a standard way.
 * @public
 * @since 1.22
 * 
 */
sap.m.ToolbarDesign.Solid = "";

/**
 * The toolbar and its content will be displayed transparent.
 * @public
 * 
 */
sap.m.ToolbarDesign.Transparent = "";

